<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ConnectQl</name>
    </assembly>
    <members>
        <member name="T:ConnectQl.AsyncEnumerablePolicies.AsyncEnumerableBuilderExtensions">
            <summary>
            The async enumerable builder extensions.
            </summary>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.AsyncEnumerableBuilderExtensions.AddAsync``1(ConnectQl.AsyncEnumerablePolicies.IAsyncEnumerableBuilder{``0},ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0})">
            <summary>
            Adds items to the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </summary>
            <typeparam name="T">
            The type of the items to add.
            </typeparam>
            <param name="builder">
            The builder.
            </param>
            <param name="items">
            The items to add.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.AsyncEnumerablePolicies.FileAccessType">
            <summary>
                The file access type.
            </summary>
        </member>
        <member name="F:ConnectQl.AsyncEnumerablePolicies.FileAccessType.Read">
            <summary>
                Read access.
            </summary>
        </member>
        <member name="F:ConnectQl.AsyncEnumerablePolicies.FileAccessType.Write">
            <summary>
                Writes access.
            </summary>
        </member>
        <member name="T:ConnectQl.AsyncEnumerablePolicies.IAsyncEnumerableBuilder`1">
            <summary>
            The AsyncEnumerableBuilder interface.
            </summary>
            <typeparam name="T">
            The type of the items of the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </typeparam>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.IAsyncEnumerableBuilder`1.AddAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds items to the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </summary>
            <param name="items">
            The items to add.
            </param>
            <returns>
            This builder.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.IAsyncEnumerableBuilder`1.BuildAsync">
            <summary>
            Builds the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/> from the added items.
            </summary>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.AsyncEnumerablePolicies.IMaterializationPolicy">
            <summary>
            The MaterializationPolicy interface.
            </summary>
        </member>
        <member name="P:ConnectQl.AsyncEnumerablePolicies.IMaterializationPolicy.MaximumChunkSize">
            <summary>
            Gets the maximum chunk size.
            </summary>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.IMaterializationPolicy.CreateBuilder``1">
            <summary>
            Creates a builder that can be used to create an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </summary>
            <typeparam name="T">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerablePolicies.IAsyncEnumerableBuilder`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.IMaterializationPolicy.SortAsync``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Comparison{``0})">
            <summary>
            Creates a new <see cref="T:ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection`1"/> that contains the sorted elements of the
                <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </summary>
            <param name="source">
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/> to sort.
            </param>
            <param name="comparison">
            The comparison to use while sorting.
            </param>
            <typeparam name="T">
            The type of the items.
            </typeparam>
            <returns>
            The sorted <see cref="T:ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection`1"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy">
            <summary>
                The in memory policy.
            </summary>
        </member>
        <member name="P:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.MaximumChunkSize">
            <summary>
            Gets the maximum chunk size.
            </summary>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.CreateBuilder``1">
            <summary>
                Creates a builder that can be used to create an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1" />.
            </summary>
            <typeparam name="T">
                The type of the items in the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1" />.
            </typeparam>
            <returns>
                The <see cref="T:ConnectQl.AsyncEnumerablePolicies.IAsyncEnumerableBuilder`1" />.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.SortAsync``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Comparison{``0})">
            <summary>
                Creates a new <see cref="T:ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection`1" /> that contains the sorted elements of the
                <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1" />.
            </summary>
            <param name="source">
                The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1" /> to sort.
            </param>
            <param name="comparison">
                The comparison to use while sorting.
            </param>
            <typeparam name="T">
                The type of the items.
            </typeparam>
            <returns>
                The sorted <see cref="T:ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection`1" />.
            </returns>
        </member>
        <member name="T:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.InMemoryAsyncEnumerableBuilder`1">
            <summary>
                The in-memory asynchronous enumerable builder.
            </summary>
            <typeparam name="T">
                The type of the items.
            </typeparam>
        </member>
        <member name="F:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.InMemoryAsyncEnumerableBuilder`1.MinimumBufferSize">
            <summary>
                The minimum buffer size.
            </summary>
        </member>
        <member name="F:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.InMemoryAsyncEnumerableBuilder`1.policy">
            <summary>
                The policy.
            </summary>
        </member>
        <member name="F:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.InMemoryAsyncEnumerableBuilder`1.array">
            <summary>
                The array.
            </summary>
        </member>
        <member name="F:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.InMemoryAsyncEnumerableBuilder`1.numItems">
            <summary>
                The number of items in the builder.
            </summary>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.InMemoryAsyncEnumerableBuilder`1.#ctor(ConnectQl.AsyncEnumerablePolicies.IMaterializationPolicy)">
            <summary>
                Initializes a new instance of the <see cref="T:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.InMemoryAsyncEnumerableBuilder`1" /> class.
            </summary>
            <param name="policy">
                The policy.
            </param>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.InMemoryAsyncEnumerableBuilder`1.ConnectQl#AsyncEnumerablePolicies#ISynchronousAsyncEnumerableBuilder{T}#Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the specified items.
            </summary>
            <param name="items">The items.</param>
            <returns>
            This builder.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.InMemoryAsyncEnumerableBuilder`1.AddAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Adds items to the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1" />.
            </summary>
            <param name="items">
                The items to add.
            </param>
            <returns>
            This builder.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.InMemoryAsyncEnumerableBuilder`1.BuildAsync">
            <summary>
                Builds the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1" /> from the added items.
            </summary>
            <returns>
                The <see cref="T:System.Threading.Tasks.Task" />.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.InMemoryAsyncEnumerableBuilder`1.Dispose">
            <summary>
            Disposes the builder.
            </summary>
        </member>
        <member name="T:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.InMemoryAsyncReadOnlyCollection`1">
            <summary>
                An <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1" /> that is stored in memory.
            </summary>
            <typeparam name="T">
                The type of the elements.
            </typeparam>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.InMemoryAsyncReadOnlyCollection`1.#ctor(ConnectQl.AsyncEnumerablePolicies.IMaterializationPolicy,`0[])">
            <summary>
                Initializes a new instance of the <see cref="T:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.InMemoryAsyncReadOnlyCollection`1" /> class.
            </summary>
            <param name="policy">
                The policy.
            </param>
            <param name="items">
                The items.
            </param>
        </member>
        <member name="P:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.InMemoryAsyncReadOnlyCollection`1.Count">
            <summary>
                Gets the number of elements in the enumerable.
            </summary>
        </member>
        <member name="P:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.InMemoryAsyncReadOnlyCollection`1.Policy">
            <summary>
                Gets the policy.
            </summary>
        </member>
        <member name="P:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.InMemoryAsyncReadOnlyCollection`1.Items">
            <summary>
                Gets the items for this enumerable.
            </summary>
            <returns>
                The items.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.InMemoryAsyncReadOnlyCollection`1.GetAsyncEnumerator">
            <summary>
                Gets an enumerator that returns batches of elements.
            </summary>
            <returns>
                The enumerator.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.InMemoryAsyncReadOnlyCollection`1.GetAsyncEnumerator(System.Int64)">
            <summary>
                Gets the policy.
            </summary>
            <param name="offset">
                The offset.
            </param>
            <returns>
                The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1" />.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.InMemoryAsyncReadOnlyCollection`1.System#IDisposable#Dispose">
            <summary>
                Disposes the collection.
            </summary>
        </member>
        <member name="T:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.InMemoryAsyncReadOnlyCollection`1.Enumerator">
            <summary>
                The enumerator.
            </summary>
        </member>
        <member name="F:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.InMemoryAsyncReadOnlyCollection`1.Enumerator.enumerator">
            <summary>
                Stores the enumerator.
            </summary>
        </member>
        <member name="F:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.InMemoryAsyncReadOnlyCollection`1.Enumerator.isEnumerating">
            <summary>
                The is enumerating.
            </summary>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.InMemoryAsyncReadOnlyCollection`1.Enumerator.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int64)">
            <summary>
                Initializes a new instance of the <see cref="T:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.InMemoryAsyncReadOnlyCollection`1.Enumerator" /> class.
            </summary>
            <param name="items">
                The items.
            </param>
            <param name="offset">
                The offset to start enumerating from.
            </param>
        </member>
        <member name="P:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.InMemoryAsyncReadOnlyCollection`1.Enumerator.Current">
            <summary>
                Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>
                The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="P:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.InMemoryAsyncReadOnlyCollection`1.Enumerator.IsSynchronous">
            <summary>
                Gets a value indicating whether the enumerator is synchronous.
                When <c>false</c>, <see cref="M:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.InMemoryAsyncReadOnlyCollection`1.Enumerator.NextBatchAsync" /> must be called when <see cref="M:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.InMemoryAsyncReadOnlyCollection`1.Enumerator.MoveNext" /> returns <c>false</c>.
            </summary>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.InMemoryAsyncReadOnlyCollection`1.Enumerator.Dispose">
            <summary>
                Disposes the enumerator.
            </summary>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.InMemoryAsyncReadOnlyCollection`1.Enumerator.MoveNext">
            <summary>
                Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
                True if the enumerator was successfully advanced to the next element; false if the enumerator has passed the
                end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.InMemoryPolicy.InMemoryAsyncReadOnlyCollection`1.Enumerator.NextBatchAsync">
            <summary>
                Moves to the next batch.
            </summary>
            <returns>
                <c>true</c> if another batch is available, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:ConnectQl.AsyncEnumerablePolicies.ISerializer">
            <summary>
            The Serializer interface.
            </summary>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.ISerializer.WriteAsync``1(System.IO.Stream,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes the values to the stream.
            </summary>
            <typeparam name="T">
            The type of the items.
            </typeparam>
            <param name="stream">
            The stream to write to.
            </param>
            <param name="value">
            The items to write.
            </param>
            <returns>
            The number of items written.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.ISerializer.ReadAsync``1(System.IO.Stream,System.Int64)">
            <summary>
            Reads items from the stream.
            </summary>
            <param name="stream">
            The stream.
            </param>
            <param name="count">
            The number of items to read.
            </param>
            <typeparam name="T">
            The type of the items.
            </typeparam>
            <returns>
            The items.
            </returns>
        </member>
        <member name="T:ConnectQl.AsyncEnumerablePolicies.IStorageProvider">
            <summary>
            The StorageProvider interface.
            </summary>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.IStorageProvider.GetFileAsync(System.Int32,ConnectQl.AsyncEnumerablePolicies.FileAccessType)">
            <summary>
            Gets the file by its id. Returns an opened stream.
            </summary>
            <param name="id">
            The id of the file. When this is a new id, the file will be created.
            </param>
            <param name="access">
            The file access. Can be read or write.
            </param>
            <returns>
            The stream.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.IStorageProvider.DeleteFileAsync(System.Int32)">
            <summary>
            Deletes a file by id.
            </summary>
            <param name="id">
            The id.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.AsyncEnumerablePolicies.ISynchronousAsyncEnumerableBuilder`1">
            <summary>
            The <see cref="T:ConnectQl.AsyncEnumerablePolicies.IAsyncEnumerableBuilder`1"/> that supports synchronous adds.
            </summary>
            <typeparam name="T">
            The type of the items.
            </typeparam>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.ISynchronousAsyncEnumerableBuilder`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the specified items.
            </summary>
            <param name="items">The items.</param>
            <returns>This builder.</returns>
        </member>
        <member name="T:ConnectQl.AsyncEnumerablePolicies.ITransform`1">
            <summary>
            Allows transforming non-serializable objects to something that can be serialized.
            </summary>
            <typeparam name="T">
            The type of the items to transform.
            </typeparam>
        </member>
        <member name="P:ConnectQl.AsyncEnumerablePolicies.ITransform`1.TargetType">
            <summary>
                Gets the target type values will be transformed to.
            </summary>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.ITransform`1.CreateContext">
            <summary>
                Creates a transformation context.
                This context will be used in all calls to Serialize and Deserialize.
            </summary>
            <returns>
                The context that will be disposed when the transformation is no longer needed.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.ITransform`1.Serialize(System.IDisposable,`0)">
            <summary>
                Transforms the value to the serializable object.
            </summary>
            <param name="context">
                The context in which this value is transformed.
            </param>
            <param name="value">
                The value to transform.
            </param>
            <returns>
                A serializable version of the value.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.ITransform`1.Deserialize(System.IDisposable,System.Object)">
            <summary>
                Transforms a serializable object to a value.
            </summary>
            <param name="context">
                The context in which this serializable object is transformed.
            </param>
            <param name="value">
                The serializable object to transform.
            </param>
            <returns>
                The value.
            </returns>
        </member>
        <member name="T:ConnectQl.AsyncEnumerablePolicies.MaterializationPolicyExtensions">
            <summary>
            The materialization policy extensions.
            </summary>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.MaterializationPolicyExtensions.CreateAsyncEnumerable``2(ConnectQl.AsyncEnumerablePolicies.IMaterializationPolicy,System.Func{``1},System.Func{``1,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}}},System.Action{``1})">
            <summary>
            Creates an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/> from a generator.
            </summary>
            <param name="policy">
            The policy.
            </param>
            <param name="initialize">
            Initializes the enumerable, and returns the context.
            </param>
            <param name="generateItems">
            Returns a batch of items or <c>null</c> when no more batches are available.
            </param>
            <param name="dispose">
            Function to call when disposing the generator.
            </param>
            <typeparam name="T">
            The type of the items.
            </typeparam>
            <typeparam name="TState">
            The type of the enumerator state.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.MaterializationPolicyExtensions.CreateAsyncEnumerable``1(ConnectQl.AsyncEnumerablePolicies.IMaterializationPolicy,System.Func{System.Threading.Tasks.Task{ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0}}})">
            <summary>
            Creates an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/> from a generator.
            </summary>
            <param name="policy">
            The policy.
            </param>
            <param name="factory">
            The factory.
            </param>
            <typeparam name="T">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.MaterializationPolicyExtensions.CreateAsyncEnumerable``2(ConnectQl.AsyncEnumerablePolicies.IMaterializationPolicy,System.Func{``1,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}}},System.Action{``1})">
            <summary>
            Creates an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/> from a generator.
            </summary>
            <param name="policy">
            The policy.
            </param>
            <param name="generateItems">
            Returns a batch of items or <c>null</c> when no more batches are available.
            </param>
            <param name="dispose">
            Function to call when disposing the generator.
            </param>
            <typeparam name="T">
            The type of the items.
            </typeparam>
            <typeparam name="TState">
            The type of the enumerator state.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.MaterializationPolicyExtensions.CreateAsyncEnumerable``2(ConnectQl.AsyncEnumerablePolicies.IMaterializationPolicy,System.Func{System.Threading.Tasks.Task{``1}},System.Func{``1,System.Threading.Tasks.Task{``0}},System.Action{``1})">
            <summary>
            Creates an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/> from a generator.
            </summary>
            <param name="policy">
            The policy.
            </param>
            <param name="initialize">
            Initializes the enumerable, and returns the context.
            </param>
            <param name="generateItem">
            Returns an item or <c>null</c> when no more items are available.
            </param>
            <param name="dispose">
            Function to call when disposing the generator.
            </param>
            <typeparam name="T">
            The type of the items.
            </typeparam>
            <typeparam name="TState">
            The type of the enumerator state.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.MaterializationPolicyExtensions.CreateAsyncEnumerable``2(ConnectQl.AsyncEnumerablePolicies.IMaterializationPolicy,System.Func{``1},System.Func{``1,System.Threading.Tasks.Task{``0}},System.Action{``1})">
            <summary>
            Creates an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/> from a generator.
            </summary>
            <param name="policy">
            The policy.
            </param>
            <param name="initialize">
            Initializes the enumerable, and returns the context.
            </param>
            <param name="generateItem">
            Returns an item or <c>null</c> when no more items are available.
            </param>
            <param name="dispose">
            Function to call when disposing the generator.
            </param>
            <typeparam name="T">
            The type of the items.
            </typeparam>
            <typeparam name="TState">
            The type of the enumerator state.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.MaterializationPolicyExtensions.CreateAsyncEnumerable``2(ConnectQl.AsyncEnumerablePolicies.IMaterializationPolicy,System.Func{``1,System.Threading.Tasks.Task{``0}},System.Action{``1})">
            <summary>
            Creates an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/> from a generator.
            </summary>
            <param name="policy">
            The policy.
            </param>
            <param name="generateItem">
            The generate Item.
            </param>
            <param name="dispose">
            Function to call when disposing the generator.
            </param>
            <typeparam name="T">
            The type of the items.
            </typeparam>
            <typeparam name="TState">
            The type of the enumerator state.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.MaterializationPolicyExtensions.CreateAsyncEnumerable``2(ConnectQl.AsyncEnumerablePolicies.IMaterializationPolicy,System.Func{System.Threading.Tasks.Task{``1}},System.Func{``1,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}}},System.Action{``1})">
            <summary>
            Creates an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/> from a generator.
            </summary>
            <param name="policy">
            The policy.
            </param>
            <param name="initialize">
            Initializes the enumerable, and returns the context.
            </param>
            <param name="generateItems">
            Returns a batch of items or <c>null</c> when no more batches are available.
            </param>
            <param name="dispose">
            Function to call when disposing the generator.
            </param>
            <typeparam name="T">
            The type of the items.
            </typeparam>
            <typeparam name="TState">
            The type of the enumerator state.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.MaterializationPolicyExtensions.CreateAsyncEnumerable``1(ConnectQl.AsyncEnumerablePolicies.IMaterializationPolicy,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates an asynchronous enumerable from an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="policy">
            The policy.
            </param>
            <param name="enumerable">
            The enumerable.
            </param>
            <typeparam name="T">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.MaterializationPolicyExtensions.CreateAsyncEnumerableAndRunOnce``1(ConnectQl.AsyncEnumerablePolicies.IMaterializationPolicy,System.Func{System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}}})">
            <summary>
            Creates an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/> by calling <paramref name="itemGenerator"/> once.
            </summary>
            <param name="policy">
            The policy.
            </param>
            <param name="itemGenerator">
            The item Generator.
            </param>
            <typeparam name="T">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.MaterializationPolicyExtensions.CreateAsyncEnumerableAndRunOnce``1(ConnectQl.AsyncEnumerablePolicies.IMaterializationPolicy,System.Func{System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}}},System.Action)">
            <summary>
            Creates an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/> by calling <paramref name="itemGenerator"/> once.
            </summary>
            <param name="policy">
            The policy.
            </param>
            <param name="itemGenerator">
            Returns the items.
            </param>
            <param name="dispose">
            Called when the enumerator is disposed.
            </param>
            <typeparam name="T">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.MaterializationPolicyExtensions.CreateAsyncEnumerableAndRunOnce``2(ConnectQl.AsyncEnumerablePolicies.IMaterializationPolicy,System.Func{System.Threading.Tasks.Task{``1}},System.Func{``1,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}}},System.Action{``1})">
            <summary>
            Creates an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/> by calling <paramref name="itemGenerator"/> once.
            </summary>
            <param name="policy">
            The policy.
            </param>
            <param name="initialize">
            The initialize.
            </param>
            <param name="itemGenerator">
            Returns the items.
            </param>
            <param name="dispose">
            Called when the enumerator is disposed.
            </param>
            <typeparam name="T">
            The type of the items.
            </typeparam>
            <typeparam name="TState">
            The type of the enumerator state.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.MaterializationPolicyExtensions.CreateAsyncEnumerableAndRunOnce``2(ConnectQl.AsyncEnumerablePolicies.IMaterializationPolicy,System.Func{System.Threading.Tasks.Task{``1}},System.Func{``1,System.Collections.Generic.IEnumerable{``0}},System.Action{``1})">
            <summary>
            Creates an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/> by calling <paramref name="itemGenerator"/> once.
            </summary>
            <param name="policy">
            The policy.
            </param>
            <param name="initialize">
            The initialize.
            </param>
            <param name="itemGenerator">
            Returns the items.
            </param>
            <param name="dispose">
            Called when the enumerator is disposed.
            </param>
            <typeparam name="T">
            The type of the items.
            </typeparam>
            <typeparam name="TState">
            The type of the enumerator state.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.MaterializationPolicyExtensions.CreateEmptyAsyncEnumerable``1(ConnectQl.AsyncEnumerablePolicies.IMaterializationPolicy)">
            <summary>
            Creates an empty async enumerable.
            </summary>
            <param name="policy">
            The policy.
            </param>
            <typeparam name="T">
            The type of the elements.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.MaterializationPolicyExtensions.MaterializeAsync``1(ConnectQl.AsyncEnumerablePolicies.IMaterializationPolicy,ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0})">
            <summary>
            Retrieves all elements from the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/> from the source and stores them in a persistent
                <see cref="T:ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection`1"/>.
                This means that it can be enumerated multiple times without having to access the source over and over again.
            </summary>
            <typeparam name="T">
            The type of the items.
            </typeparam>
            <param name="policy">
            The materialization policy.
            </param>
            <param name="source">
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/> to materialize.
            </param>
            <returns>
            If <paramref name="source"/> was already a <see cref="T:ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection`1"/>, <paramref name="source"/>,
                otherwise a new
                <see cref="T:ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection`1"/> containing the elements in the sequence.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.MaterializationPolicyExtensions.ToAsyncEnumerable``1(ConnectQl.AsyncEnumerablePolicies.IMaterializationPolicy,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts an enumerable to an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </summary>
            <param name="policy">
            The policy.
            </param>
            <param name="enumerable">
            The enumerable.
            </param>
            <typeparam name="T">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.MaterializationPolicyExtensions.CreateAsyncEnumerable``1(ConnectQl.AsyncEnumerablePolicies.IMaterializationPolicy,System.Func{ConnectQl.AsyncEnumerables.IAsyncEnumerator{``0}})">
            <summary>
            The create.
            </summary>
            <param name="policy">
            The policy.
            </param>
            <param name="factory">
            The factory.
            </param>
            <typeparam name="T">
            The type of the elements.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.MaterializationPolicyExtensions.ToEnumerable``1(``0)">
            <summary>
            Converts an item to an enumerable.
            </summary>
            <param name="item">
            The item.
            </param>
            <typeparam name="T">
            The type of the item.
            </typeparam>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.MaterializationPolicyExtensions.ToEnumerableAsync``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Converts a task to a task of enumerable.
            </summary>
            <param name="item">
            The item.
            </param>
            <typeparam name="T">
            The type of the item.
            </typeparam>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> or <c>null</c> if the item returns <c>null</c>.
            </returns>
        </member>
        <member name="T:ConnectQl.AsyncEnumerablePolicies.MaterializationPolicyExtensions.FactoryEnumerable`1">
            <summary>
            The factory enumerable.
            </summary>
            <typeparam name="TElement">
            The type of the elements.
            </typeparam>
        </member>
        <member name="F:ConnectQl.AsyncEnumerablePolicies.MaterializationPolicyExtensions.FactoryEnumerable`1.factory">
            <summary>
            The factory.
            </summary>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.MaterializationPolicyExtensions.FactoryEnumerable`1.#ctor(ConnectQl.AsyncEnumerablePolicies.IMaterializationPolicy,System.Func{ConnectQl.AsyncEnumerables.IAsyncEnumerator{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.AsyncEnumerablePolicies.MaterializationPolicyExtensions.FactoryEnumerable`1"/> class.
            </summary>
            <param name="policy">
            The policy.
            </param>
            <param name="factory">
            The factory.
            </param>
        </member>
        <member name="P:ConnectQl.AsyncEnumerablePolicies.MaterializationPolicyExtensions.FactoryEnumerable`1.Policy">
            <summary>
            Gets the materialization policy.
            </summary>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.MaterializationPolicyExtensions.FactoryEnumerable`1.GetAsyncEnumerator">
            <summary>
            Gets an enumerator that returns batches of elements.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="T:ConnectQl.AsyncEnumerablePolicies.MaterializationPolicyExtensions.SingleRunContext`1">
            <summary>
            Used to make sure a generator only runs once.
            </summary>
            <typeparam name="TState">
            The type of the inner context.
            </typeparam>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.MaterializationPolicyExtensions.SingleRunContext`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.AsyncEnumerablePolicies.MaterializationPolicyExtensions.SingleRunContext`1"/> class.
            </summary>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.MaterializationPolicyExtensions.SingleRunContext`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.AsyncEnumerablePolicies.MaterializationPolicyExtensions.SingleRunContext`1"/> class.
            </summary>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="P:ConnectQl.AsyncEnumerablePolicies.MaterializationPolicyExtensions.SingleRunContext`1.Context">
            <summary>
            Gets the context.
            </summary>
        </member>
        <member name="P:ConnectQl.AsyncEnumerablePolicies.MaterializationPolicyExtensions.SingleRunContext`1.NumberOfRuns">
            <summary>
            Gets or sets the number of runs.
            </summary>
        </member>
        <member name="T:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy">
            <summary>
                The temporary file policy.
            </summary>
        </member>
        <member name="F:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.memPolicy">
            <summary>
                The memory policy.
            </summary>
        </member>
        <member name="F:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.serializer">
            <summary>
            The serializer.
            </summary>
        </member>
        <member name="F:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.storageProvider">
            <summary>
                Gets or sets the storage provider.
            </summary>
        </member>
        <member name="F:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.registeredTransforms">
            <summary>
            The registered transforms.
            </summary>
        </member>
        <member name="F:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.currentId">
            <summary>
            The current id.
            </summary>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.#ctor(ConnectQl.AsyncEnumerablePolicies.IStorageProvider,ConnectQl.AsyncEnumerablePolicies.ISerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy"/> class.
            </summary>
            <param name="storageProvider">
            The storage provider.
            </param>
            <param name="serializer">
            The serializer.
            </param>
        </member>
        <member name="P:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.MaximumChunkSize">
            <summary>
                Gets the maximum chunk size.
            </summary>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.CreateBuilder``1">
            <summary>
                Creates a builder that can be used to create an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1" />.
            </summary>
            <typeparam name="T">
                The type of the items.
            </typeparam>
            <returns>
                The <see cref="T:ConnectQl.AsyncEnumerablePolicies.IAsyncEnumerableBuilder`1" />.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.RegisterTransform``1(ConnectQl.AsyncEnumerablePolicies.ITransform{``0})">
            <summary>
            Registers a transform that turns items into serializable objects.
            </summary>
            <param name="transform">
            The transform.
            </param>
            <typeparam name="T">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.SortAsync``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Comparison{``0})">
            <summary>
                Creates a new <see cref="T:ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection`1" /> that contains the sorted elements of the
                <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1" />.
            </summary>
            <param name="source">
                The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1" /> to sort.
            </param>
            <param name="comparison">
                The comparison to use while sorting.
            </param>
            <typeparam name="T">
                The type of the items.
            </typeparam>
            <returns>
                The sorted <see cref="T:ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection`1" />.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.TakeItems``1(System.Collections.Generic.List{ConnectQl.AsyncEnumerables.IAsyncEnumerator{``0}},System.Comparison{``0})">
            <summary>
            Takes sorted items from the enumerators while it can be done synchronously.
            </summary>
            <param name="enumerators">
            The enumerators.
            </param>
            <param name="comparison">
            The comparison.
            </param>
            <typeparam name="T">
            The type of the items.
            </typeparam>
            <returns>
            The items that were taken synchronously.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.SortEnumerators``1(System.Collections.Generic.List{ConnectQl.AsyncEnumerables.IAsyncEnumerator{``0}},System.Comparison{``0})">
            <summary>
            Sorts the list of enumerators. The list should be already sorted, except for the first element.
            </summary>
            <param name="enumerators">
            The enumerators.
            </param>
            <param name="comparison">
            The comparison.
            </param>
            <typeparam name="T">
            The type of the items.
            </typeparam>
        </member>
        <member name="T:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Collection`1">
            <summary>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection`1"/> implementation.
            </summary>
            <typeparam name="T">
            The type of the elements.
            </typeparam>
        </member>
        <member name="F:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Collection`1.ReadAndTransformItemsAsyncMethod">
            <summary>
                The <see cref="M:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Collection`1.ReadAndTransformItemsAsync``1(System.IO.Stream)" /> method.
            </summary>
        </member>
        <member name="F:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Collection`1.context">
            <summary>
            The transform context.
            </summary>
        </member>
        <member name="F:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Collection`1.fileId">
            <summary>
            The file id.
            </summary>
        </member>
        <member name="F:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Collection`1.policy">
            <summary>
            The policy that owns this collection.
            </summary>
        </member>
        <member name="F:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Collection`1.transform">
            <summary>
            The transform to use.
            </summary>
        </member>
        <member name="F:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Collection`1.generateItems">
            <summary>
            Generates the items.
            </summary>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Collection`1.#ctor(ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy,System.Int32,System.Int64,ConnectQl.AsyncEnumerablePolicies.ITransform{`0},System.IDisposable)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Collection`1"/> class.
            </summary>
            <param name="policy">
            The policy.
            </param>
            <param name="fileId">
            The file id.
            </param>
            <param name="count">
            The count.
            </param>
            <param name="transform">
            The transform.
            </param>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="P:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Collection`1.Count">
            <summary>
                Gets the number of elements in the enumerable.
            </summary>
        </member>
        <member name="P:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Collection`1.ConnectQl#AsyncEnumerables#IAsyncEnumerable#Policy">
            <summary>
                Gets the materialization policy.
            </summary>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Collection`1.System#IDisposable#Dispose">
            <summary>
                Disposes the collection and deletes the file.
            </summary>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Collection`1.ConnectQl#AsyncEnumerables#IAsyncEnumerable{T}#GetAsyncEnumerator">
            <summary>
                Gets an enumerator that returns batches of elements.
            </summary>
            <returns>
                The enumerator.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Collection`1.ConnectQl#AsyncEnumerables#IAsyncReadOnlyCollection{T}#GetAsyncEnumerator(System.Int64)">
            <summary>
                Gets an enumerator that returns batches of elements and starts at the offset.
            </summary>
            <param name="offset">
                The offset.
            </param>
            <returns>
                The enumerator.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Collection`1.GetAsyncEnumerable">
            <summary>
                Gets the enumerable that enumerates all items in the collection..
            </summary>
            <returns>
                The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1" />.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Collection`1.CreateGenerator">
            <summary>
            Creates the generator.
            </summary>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Collection`1.ReadAndTransformItemsAsync``1(System.IO.Stream)">
            <summary>
                Reads and transform items.
            </summary>
            <param name="stream">
                The stream.
            </param>
            <typeparam name="TItem">
                The type of the items to read.
            </typeparam>
            <returns>
                The <see cref="T:System.Threading.Tasks.Task" />.
            </returns>
        </member>
        <member name="T:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Builder`1">
            <summary>
                The <see cref="T:ConnectQl.AsyncEnumerablePolicies.IAsyncEnumerableBuilder`1"/> implementation.
            </summary>
            <typeparam name="T">
                The type of the items.
            </typeparam>
        </member>
        <member name="F:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Builder`1.WriteItemsAsyncMethod">
            <summary>
                The <see cref="M:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Builder`1.WriteItemsAsync``1(System.Collections.Generic.IEnumerable{`0})" /> method.
            </summary>
        </member>
        <member name="F:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Builder`1.policy">
            <summary>
                The policy.
            </summary>
        </member>
        <member name="F:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Builder`1.context">
            <summary>
                The context.
            </summary>
        </member>
        <member name="F:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Builder`1.addLock">
            <summary>
            Lock for adding items.
            </summary>
        </member>
        <member name="F:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Builder`1.count">
            <summary>
                The count.
            </summary>
        </member>
        <member name="F:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Builder`1.file">
            <summary>
                The file.
            </summary>
        </member>
        <member name="F:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Builder`1.fileId">
            <summary>
                The file id.
            </summary>
        </member>
        <member name="F:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Builder`1.transform">
            <summary>
                The transform.
            </summary>
        </member>
        <member name="F:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Builder`1.writeItemsAsync">
            <summary>
            Writes the items to the file.
            </summary>
        </member>
        <member name="F:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Builder`1.addTask">
            <summary>
            The task that adds items to the builder.
            </summary>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Builder`1.#ctor(ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy)">
            <summary>
                Initializes a new instance of the <see cref="T:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Builder`1" /> class.
            </summary>
            <param name="policy">
                The policy.
            </param>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Builder`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds items to the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </summary>
            <param name="items">
            The items to add.
            </param>
            <returns>
            This builder.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Builder`1.BuildAsync">
            <summary>
                Builds the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1" /> from the added items.
            </summary>
            <returns>
                The <see cref="T:System.Threading.Tasks.Task" />.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Builder`1.AddAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Adds items to the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1" />.
            </summary>
            <param name="items">
                The items to add.
            </param>
            <returns>
                The <see cref="T:System.Threading.Tasks.Task" />.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Builder`1.CreateFileAsync">
            <summary>
            Creates the file.
            </summary>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerablePolicies.TemporaryFilePolicy.Builder`1.WriteItemsAsync``1(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Writes the items to the serializer.
            </summary>
            <typeparam name="TItem">
            The type of the items.
            </typeparam>
            <param name="items">
            The items to write.
            </param>
            <returns>
            The number of items that were written.
            </returns>
        </member>
        <member name="T:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions">
            <summary>
            The async enumerable extensions.
            </summary>
        </member>
        <member name="F:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.ConvertInternalMethod">
            <summary>
            The <see cref="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.ConvertInternal``2(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0})"/> method.
            </summary>s
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.AfterElement``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Int64,System.Action{``0})">
            <summary>
            Performs an action before the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/> is enumerated.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="index">
            The index.
            </param>
            <param name="callback">
            The action to perform.
            </param>
            <typeparam name="T">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.GetElementType(ConnectQl.AsyncEnumerables.IAsyncEnumerable)">
            <summary>
            Gets the element type for the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable"/>.
            </summary>
            <param name="source">
            The source.
            </param>
            <returns>
            The <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.Convert``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable)">
            <summary>
            Converts the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable"/> to a typed <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </summary>
            <param name="source">
            The enumerable to convert.
            </param>
            <typeparam name="T">
            The type of the items to convert to.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.AfterLastElement``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Action{System.Int64})">
            <summary>
            Performs an action when the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/> is enumerated.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="callback">
            The action to perform. The parameter is the number of items in the enumerable.
            </param>
            <typeparam name="T">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.AggregateAsync``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Func{``0,``0,System.Threading.Tasks.Task{``0}})">
            <summary>
            Aggregates an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the enumerable.
            </typeparam>
            <param name="source">
            The source <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </param>
            <param name="func">
            The aggregator.
            </param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.AggregateAsync``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Func{``0,``0,``0})">
            <summary>
            Aggregates an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the enumerable.
            </typeparam>
            <param name="source">
            The source <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </param>
            <param name="func">
            The aggregator.
            </param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.AggregateAsync``2(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            Aggregates an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the enumerable.
            </typeparam>
            <typeparam name="TAccumulate">
            The result type.
            </typeparam>
            <param name="source">
            The source <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </param>
            <param name="seed">
            The initial item.
            </param>
            <param name="func">
            The aggregator.
            </param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.AggregateAsync``2(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},``1,System.Func{``1,``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Aggregates an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the source enumerable.
            </typeparam>
            <typeparam name="TAccumulate">
            The result type.
            </typeparam>
            <param name="source">
            The source <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </param>
            <param name="seed">
            The initial item.
            </param>
            <param name="func">
            The aggregator.
            </param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.ApplyEnumerableFunction``2(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            The apply enumerable function.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="func">
            The enumerable function.
            </param>
            <typeparam name="TItem">
            The type of the items.
            </typeparam>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.AverageAsync(ConnectQl.AsyncEnumerables.IAsyncEnumerable{System.Single})">
            <summary>
            The average async.
            </summary>
            <param name="source">
            The source.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.AverageAsync(ConnectQl.AsyncEnumerables.IAsyncEnumerable{System.Double})">
            <summary>
            The average async.
            </summary>
            <param name="source">
            The source.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.AverageAsync(ConnectQl.AsyncEnumerables.IAsyncEnumerable{System.Int32})">
            <summary>
            The average async.
            </summary>
            <param name="source">
            The source.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.AverageAsync(ConnectQl.AsyncEnumerables.IAsyncEnumerable{System.Int64})">
            <summary>
            The average async.
            </summary>
            <param name="source">
            The source.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.AverageAsync(ConnectQl.AsyncEnumerables.IAsyncEnumerable{System.Nullable{System.Single}})">
            <summary>
            The average async.
            </summary>
            <param name="source">
            The source.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.AverageAsync(ConnectQl.AsyncEnumerables.IAsyncEnumerable{System.Nullable{System.Double}})">
            <summary>
            The average async.
            </summary>
            <param name="source">
            The source.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.AverageAsync(ConnectQl.AsyncEnumerables.IAsyncEnumerable{System.Nullable{System.Int32}})">
            <summary>
            The average async.
            </summary>
            <param name="source">
            The source.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.AverageAsync(ConnectQl.AsyncEnumerables.IAsyncEnumerable{System.Nullable{System.Int64}})">
            <summary>
            The average async.
            </summary>
            <param name="source">
            The source.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.Batch``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Int64)">
            <summary>
            Splits the asynchronous enumerable into batches of <paramref name="batchSize"/> elements.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="batchSize">
            The batch size.
            </param>
            <typeparam name="TSource">
            The type of the elements.
            </typeparam>
            <returns>
            The groupings.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.Batch``2(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Int32,System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Splits the asynchronous enumerable into batches of at most <paramref name="batchSize"/> elements that have the same
                value.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="batchSize">
            The batch size.
            </param>
            <param name="valueSelector">
            A function that returns the value that should be equal over a batch.
            </param>
            <param name="comparer">
            Compares values of batches.
            </param>
            <typeparam name="TSource">
            The type of the elements.
            </typeparam>
            <typeparam name="TValue">
            The type of the values that must be identical.
            </typeparam>
            <returns>
            The groupings.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.BeforeFirstElement``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Action)">
            <summary>
            Performs an action before the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/> is enumerated.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="callback">
            The action to perform.
            </param>
            <typeparam name="T">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.CountAsync``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0})">
            <summary>
            The count async.
            </summary>
            <param name="source">
            The source.
            </param>
            <typeparam name="TSource">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.CountAsync``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Counts the number of items in the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the.
            </typeparam>
            <param name="source">
            The enumerable to count.
            </param>
            <param name="condition">
            The condition.
            </param>
            <returns>
            The number of elements in the enumerable.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.CrossApply``3(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Func{``0,ConnectQl.AsyncEnumerables.IAsyncEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>
            Applies a function to all elements and combines the results.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="function">
            The function.
            </param>
            <param name="resultSelector">
            The result selector.
            </param>
            <typeparam name="TLeft">
            The type of the left items.
            </typeparam>
            <typeparam name="TRight">
            The type of the right items.
            </typeparam>
            <typeparam name="TResult">
            The type of the result items.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.CrossJoin``3(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},ConnectQl.AsyncEnumerables.IAsyncEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Performs a cross join between the two <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>s.
            </summary>
            <param name="left">
            The left.
            </param>
            <param name="right">
            The right.
            </param>
            <param name="resultSelector">
            The result selector.
            </param>
            <typeparam name="TLeft">
            The type of the left enumerable.
            </typeparam>
            <typeparam name="TRight">
            The type of the right enumerable.
            </typeparam>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.Distinct``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0})">
            <summary>
            The distinct.
            </summary>
            <param name="source">
            The source.
            </param>
            <typeparam name="TSource">
            The type of the elements.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.Distinct``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Groups the asynchronous enumerable.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="comparer">
            The comparer.
            </param>
            <typeparam name="TSource">
            The type of the elements.
            </typeparam>
            <returns>
            The groupings.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.FirstAsync``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0})">
            <summary>
            Gets the first element.
            </summary>
            <param name="source">
            The source.
            </param>
            <typeparam name="TItem">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.FirstAsync``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the first item.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="condition">
            The condition.
            </param>
            <typeparam name="TItem">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.FirstOrDefaultAsync``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0})">
            <summary>
            The first or default async.
            </summary>
            <param name="source">
            The source.
            </param>
            <typeparam name="TItem">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.FirstOrDefaultAsync``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the first item for which the <paramref name="condition"/> is <c>true</c>.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="condition">
            The condition that has to be <c>true</c> for the items.
            </param>
            <typeparam name="TItem">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.ForEachAsync``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Action{``0})">
            <summary>
            Executes an action for all items in the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="action">
            The action.
            </param>
            <typeparam name="TItem">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.ForEachAsync``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Executes an action for all items in the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="asyncAction">
            The async action.
            </param>
            <typeparam name="TItem">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.ForEachBatchAsync``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Action{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Executes an action for all items in the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="action">
            The action.
            </param>
            <typeparam name="TItem">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.ForEachBatchAsync``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Func{System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.Task})">
            <summary>
            Executes an action for all items in the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="action">
            The action.
            </param>
            <typeparam name="TItem">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.GroupBy``2(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Groups the asynchronous enumerable.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="keySelector">
            The key selector.
            </param>
            <param name="comparer">
            The comparer.
            </param>
            <typeparam name="TSource">
            The type of the elements.
            </typeparam>
            <typeparam name="TKey">
            The type of the key.
            </typeparam>
            <returns>
            The groupings.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.Join``4(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},ConnectQl.AsyncEnumerables.IAsyncEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IComparer{``2})">
            <summary>
            Joins the two <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>s on a key. When no item is found that matches an item in
                <paramref name="left"/>,
                <paramref name="resultSelector"/> is called with the left item and the default for <typeparamref name="TRight"/>.
            </summary>
            <param name="left">
            The left.
            </param>
            <param name="right">
            The right.
            </param>
            <param name="leftKeySelector">
            The left key selector.
            </param>
            <param name="rightKeySelector">
            The right key selector.
            </param>
            <param name="resultSelector">
            The result selector.
            </param>
            <param name="comparer">
            The key comparer.
            </param>
            <typeparam name="TLeft">
            The type of the left item.
            </typeparam>
            <typeparam name="TRight">
            The type of the right item.
            </typeparam>
            <typeparam name="TKey">
            The type of the key to join on.
            </typeparam>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.Join``4(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},ConnectQl.AsyncEnumerables.IAsyncEnumerable{``1},System.Func{``0,``2},System.Linq.Expressions.ExpressionType,System.Func{``1,``2},System.Func{``0,``1,System.Boolean},System.Func{``0,``1,``3},System.Collections.Generic.IComparer{``2})">
            <summary>
            Joins the two <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>s on a key. When no item is found that matches an item in
                <paramref name="left"/>,
                <paramref name="resultSelector"/> is called with the left item and the default for <typeparamref name="TRight"/>.
            </summary>
            <param name="left">
            The left.
            </param>
            <param name="right">
            The right.
            </param>
            <param name="leftKeySelector">
            The left key selector.
            </param>
            <param name="joinOperator">
            The join operator.
            </param>
            <param name="rightKeySelector">
            The right key selector.
            </param>
            <param name="resultFilter">
            The result filter.
            </param>
            <param name="resultSelector">
            The result selector.
            </param>
            <param name="comparer">
            The key comparer.
            </param>
            <typeparam name="TLeft">
            The type of the left item.
            </typeparam>
            <typeparam name="TRight">
            The type of the right item.
            </typeparam>
            <typeparam name="TKey">
            The type of the key to join on.
            </typeparam>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.LastAsync``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0})">
            <summary>
            The last async.
            </summary>
            <param name="source">
            The source.
            </param>
            <typeparam name="TItem">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.LastAsync``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            The last async.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="condition">
            The condition.
            </param>
            <typeparam name="TItem">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.LastOrDefaultAsync``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0})">
            <summary>
            The last or default async.
            </summary>
            <param name="source">
            The source.
            </param>
            <typeparam name="TItem">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.LastOrDefaultAsync``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            The last or default async.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="condition">
            The condition.
            </param>
            <typeparam name="TItem">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.LeftJoin``4(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},ConnectQl.AsyncEnumerables.IAsyncEnumerable{``1},System.Func{``0,``2},System.Linq.Expressions.ExpressionType,System.Func{``1,``2},System.Func{``0,``1,System.Boolean},System.Func{``0,``1,``3},System.Collections.Generic.IComparer{``2})">
            <summary>
            Joins the two <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>s on a key. When no item is found that matches an item in
                <paramref name="left"/>,
                <paramref name="resultSelector"/> is called with the left item and the default for <typeparamref name="TRight"/>.
                When no element can be matched with an element of <paramref name="left"/>,
                the <paramref name="resultSelector"/> is called with the left element and
                <c>default(<typeparamref name="TRight"/>)</c>.
            </summary>
            <param name="left">
            The left.
            </param>
            <param name="right">
            The right.
            </param>
            <param name="leftKeySelector">
            The left key selector.
            </param>
            <param name="joinOperator">
            The join operator.
            </param>
            <param name="rightKeySelector">
            The right key selector.
            </param>
            <param name="resultFilter">
            The result filter.
            </param>
            <param name="resultSelector">
            The result selector.
            </param>
            <param name="comparer">
            The key comparer.
            </param>
            <typeparam name="TLeft">
            The type of the left item.
            </typeparam>
            <typeparam name="TRight">
            The type of the right item.
            </typeparam>
            <typeparam name="TKey">
            The type of the key to join on.
            </typeparam>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.MaterializeAsync``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0})">
            <summary>
            Retrieves all elements from the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/> from the source and stores them in a persistent
                <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
                This means that it can be enumerated multiple times without having to access the source over and over again.
            </summary>
            <param name="source">
            A sequence of values to materialize.
            </param>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <returns>
            An <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/> with the same elements as <paramref name="source"/> that can be enumerated
                multiple times.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.MaxAsync``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0})">
            <summary>
            The max async.
            </summary>
            <param name="source">
            The source.
            </param>
            <typeparam name="TItem">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.MaxAsync``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            The max async.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="comparer">
            The comparer.
            </param>
            <typeparam name="TItem">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.MinAsync``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0})">
            <summary>
            The min async.
            </summary>
            <param name="source">
            The source.
            </param>
            <typeparam name="TItem">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.MinAsync``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            The min async.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="comparer">
            The comparer.
            </param>
            <typeparam name="TItem">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.OrderBy``2(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
            <param name="source">
            A sequence of values to order.
            </param>
            <param name="keySelector">
            A function to extract a key from an element.
            </param>
            <param name="comparer">
            An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.
            </param>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector"/>.
            </typeparam>
            <returns>
            An <see cref="T:ConnectQl.AsyncEnumerables.IOrderedAsyncEnumerable`1"/> whose elements are sorted according to a key..
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.OrderBy``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Collections.Generic.IEnumerable{ConnectQl.Interfaces.IOrderByExpression})">
            <summary>
            Orders the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/> by the <paramref name="orderByExpressions"/>.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="orderByExpressions">
            The order by expressions.
            </param>
            <typeparam name="T">
            The type of the elements.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.OrderByDescending``2(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
            <param name="source">
            A sequence of values to order.
            </param>
            <param name="keySelector">
            A function to extract a key from an element.
            </param>
            <param name="comparer">
            An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys.
            </param>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector"/>.
            </typeparam>
            <returns>
            An <see cref="T:ConnectQl.AsyncEnumerables.IOrderedAsyncEnumerable`1"/> whose elements are sorted according to a key..
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.OuterApply``3(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Func{``0,ConnectQl.AsyncEnumerables.IAsyncEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>
            Applies a function to all elements and combines the results, when no results are returned, the result selector is
                called with the default value for <typeparamref name="TRight"/>.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="function">
            The function.
            </param>
            <param name="resultSelector">
            The result selector.
            </param>
            <typeparam name="TLeft">
            The type of the left items.
            </typeparam>
            <typeparam name="TRight">
            The type of the right items.
            </typeparam>
            <typeparam name="TResult">
            The type of the result items.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.PreSortedJoin``4(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection{``1},System.Func{``0,``2},System.Linq.Expressions.ExpressionType,System.Func{``1,``2},System.Func{``0,``1,System.Boolean},System.Func{``0,``1,``3},System.Collections.Generic.IComparer{``2})">
            <summary>
            Joins the two <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>s on a key. When no item is found that matches an item in
                <paramref name="left"/>,
                <paramref name="resultSelector"/> is called with the left item and the default for <typeparamref name="TRight"/>.
                Both <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>s
                must be sorted by the keys before calling this method.
            </summary>
            <param name="left">
            The left.
            </param>
            <param name="right">
            The right.
            </param>
            <param name="leftKeySelector">
            The left key selector.
            </param>
            <param name="joinOperator">
            The join operator.
            </param>
            <param name="rightKeySelector">
            The right key selector.
            </param>
            <param name="resultFilter">
            The result filter.
            </param>
            <param name="resultSelector">
            The result selector.
            </param>
            <param name="comparer">
            The key comparer.
            </param>
            <typeparam name="TLeft">
            The type of the left item.
            </typeparam>
            <typeparam name="TRight">
            The type of the right item.
            </typeparam>
            <typeparam name="TKey">
            The type of the key to join on.
            </typeparam>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.PreSortedLeftJoin``4(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection{``1},System.Func{``0,``2},System.Linq.Expressions.ExpressionType,System.Func{``1,``2},System.Func{``0,``1,System.Boolean},System.Func{``0,``1,``3},System.Collections.Generic.IComparer{``2})">
            <summary>
            Joins the two <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>s on a key. When no item is found that matches an item in
                <paramref name="left"/>,
                <paramref name="resultSelector"/> is called with the left item and the default for <typeparamref name="TRight"/>.
                Both <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>s
                must be sorted by the keys before calling this method.
            </summary>
            <param name="left">
            The left.
            </param>
            <param name="right">
            The right.
            </param>
            <param name="leftKeySelector">
            The left key selector.
            </param>
            <param name="joinOperator">
            The join operator.
            </param>
            <param name="rightKeySelector">
            The right key selector.
            </param>
            <param name="resultFilter">
            The result filter.
            </param>
            <param name="resultSelector">
            The result selector.
            </param>
            <param name="comparer">
            The key comparer.
            </param>
            <typeparam name="TLeft">
            The type of the left item.
            </typeparam>
            <typeparam name="TRight">
            The type of the right item.
            </typeparam>
            <typeparam name="TKey">
            The type of the key to join on.
            </typeparam>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.Select``2(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <param name="source">
            A sequence of values to invoke a transform function on.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <typeparam name="TResult">
            The type of the value returned by <paramref name="selector"/>.
            </typeparam>
            <returns>
            An <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/> whose elements are the result of invoking the transform function on each
                element of <paramref name="source"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.Select``2(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <param name="source">
            A sequence of values to invoke a transform function on.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <typeparam name="TResult">
            The type of the value returned by <paramref name="selector"/>.
            </typeparam>
            <returns>
            An <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/> whose elements are the result of invoking the transform function on each
                element of <paramref name="source"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.Skip``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Int64)">
            <summary>
            The skip.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="count">
            The count.
            </param>
            <typeparam name="T">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.SortAsync``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Comparison{``0})">
            <summary>
            Sorts the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/> by using the <paramref name="comparison"/>.
            </summary>
            <param name="source">
            A sequence of values to sort.
            </param>
            <param name="comparison">
            The comparison to use when sorting.
            </param>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <returns>
            The sorted <see cref="T:ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.SumAsync(ConnectQl.AsyncEnumerables.IAsyncEnumerable{System.Single})">
            <summary>
            The sum async.
            </summary>
            <param name="source">
            The source.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.SumAsync(ConnectQl.AsyncEnumerables.IAsyncEnumerable{System.Double})">
            <summary>
            The sum async.
            </summary>
            <param name="source">
            The source.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.SumAsync(ConnectQl.AsyncEnumerables.IAsyncEnumerable{System.Int32})">
            <summary>
            The sum async.
            </summary>
            <param name="source">
            The source.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.SumAsync(ConnectQl.AsyncEnumerables.IAsyncEnumerable{System.Int64})">
            <summary>
            The sum async.
            </summary>
            <param name="source">
            The source.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.SumAsync(ConnectQl.AsyncEnumerables.IAsyncEnumerable{System.Nullable{System.Single}})">
            <summary>
            The sum async.
            </summary>
            <param name="source">
            The source.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.SumAsync(ConnectQl.AsyncEnumerables.IAsyncEnumerable{System.Nullable{System.Double}})">
            <summary>
            The sum async.
            </summary>
            <param name="source">
            The source.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.SumAsync(ConnectQl.AsyncEnumerables.IAsyncEnumerable{System.Nullable{System.Int32}})">
            <summary>
            The sum async.
            </summary>
            <param name="source">
            The source.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.SumAsync(ConnectQl.AsyncEnumerables.IAsyncEnumerable{System.Nullable{System.Int64}})">
            <summary>
            The sum async.
            </summary>
            <param name="source">
            The source.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.Take``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Int64)">
            <summary>
            The take.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="count">
            The count.
            </param>
            <typeparam name="T">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.Take``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Nullable{System.Int64})">
            <summary>
            Takes the number of items of the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>. When <paramref name="count"/> is <c>null</c>,
                all items are returned.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="count">
            The number of items to retrieve.
            </param>
            <typeparam name="T">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.ToArrayAsync``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0})">
            <summary>
            Converts the enumerable to an array.
            </summary>
            <param name="source">
            The source.
            </param>
            <typeparam name="T">
            The type of the items.
            </typeparam>
            <returns>
            The array.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.Union``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Produces the set union of two sequences by using a specified <see cref="T:System.Collections.Generic.IComparer`1"/>.
                The order of the rows is not preserved. Uses the materialization policy of the first sequence.
            </summary>
            <param name="first">
            An <see cref="T:ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection`1"/> whose distinct elements form the first set for the union.
            </param>
            <param name="second">
            An <see cref="T:ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection`1"/> whose distinct elements form the second set for the union.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IComparer`1"/> to compare values.
            </param>
            <typeparam name="TSource">
            The type of the elements of the input sequences.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.Where``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <param name="source">
            An <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/> to filter.
            </param>
            <param name="predicate">
            A function to test each element for a condition. When this is <c>null</c>, <paramref name="source"/> is returned.
            </param>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <returns>
            An <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/> that contains elements from the input sequence that satisfy the condition.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.Zip``3(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},ConnectQl.AsyncEnumerables.IAsyncEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Enumerates the two <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>s and calls a function on each pair.
            </summary>
            <param name="left">
            The left.
            </param>
            <param name="right">
            The right.
            </param>
            <param name="resultSelector">
            The result selector.
            </param>
            <typeparam name="TLeft">
            The type of the left enumerable.
            </typeparam>
            <typeparam name="TRight">
            The type of the right enumerable.
            </typeparam>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.ZipAll``3(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},ConnectQl.AsyncEnumerables.IAsyncEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Enumerates the two <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>s and calls a function on each pair.
                When <paramref name="right"/> has less elements than <paramref name="left"/>, they are padded with the default
                value of <typeparamref name="TRight"/>.
            </summary>
            <param name="left">
            The left.
            </param>
            <param name="right">
            The right.
            </param>
            <param name="resultSelector">
            The result selector.
            </param>
            <typeparam name="TLeft">
            The type of the left enumerable.
            </typeparam>
            <typeparam name="TRight">
            The type of the right enumerable.
            </typeparam>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.ConvertToIEnumerable``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0})">
            <summary>
            Converts an async enumerable into an enumerable. This can lead to deadlocks, so use from
                <see cref="M:System.Threading.Tasks.Task.Run(System.Action)"/>!.
            </summary>
            <typeparam name="T">
            The type of the items.
            </typeparam>
            <param name="source">
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/> to convert.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.FirstInternalAsync``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0})">
            <summary>
            Returns the first item that applies to the condition.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="condition">
            The condition.
            </param>
            <param name="actionWhenNotFound">
            The action When Not Found.
            </param>
            <typeparam name="TItem">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.LastInternalAsync``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0})">
            <summary>
            Returns the first item that applies to the condition.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="condition">
            The condition.
            </param>
            <param name="actionWhenNotFound">
            The action When Not Found.
            </param>
            <typeparam name="TItem">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.ConvertInternal``2(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0})">
            <summary>
            Converts the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable"/> to a typed <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </summary>
            <param name="source">
            The source enumerable.
            </param>
            <typeparam name="TSource">
            The type of the source items.
            </typeparam>
            <typeparam name="TTarget">
            The type of the target items.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable">
            <summary>
            The AsyncEnumerable interface.
            </summary>
        </member>
        <member name="P:ConnectQl.AsyncEnumerables.IAsyncEnumerable.Policy">
            <summary>
            Gets the materialization policy.
            </summary>
        </member>
        <member name="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1">
            <summary>
            The AsyncBatchedEnumerable interface.
            </summary>
            <typeparam name="T">
            The type of the elements.
            </typeparam>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1.GetAsyncEnumerator">
            <summary>
            Gets an enumerator that returns batches of elements.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="T:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1">
            <summary>
            The async enumerator interface.
            </summary>
            <typeparam name="T">
            The type of the elements.
            </typeparam>
        </member>
        <member name="P:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="P:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.IsSynchronous">
            <summary>
            Gets a value indicating whether the enumerator is synchronous.
                When <c>false</c>, <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.NextBatchAsync"/> must be called when <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.MoveNext"/> returns <c>false</c>.
            </summary>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; false if the enumerator has passed the
                end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.NextBatchAsync">
            <summary>
            Advances the enumerator to the next batch of elements of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; false if the enumerator has passed the
                end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="T:ConnectQl.AsyncEnumerables.IAsyncGrouping`2">
            <summary>
            The AsyncGrouping interface.
            </summary>
            <typeparam name="TElement">
            The type of the elements.
            </typeparam>
            <typeparam name="TKey">
            The type of the key.
            </typeparam>
        </member>
        <member name="P:ConnectQl.AsyncEnumerables.IAsyncGrouping`2.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="T:ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection`1">
            <summary>
            The MaterializedAsyncEnumerable interface.
            </summary>
            <typeparam name="T">
            The type of the elements.
            </typeparam>
        </member>
        <member name="P:ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection`1.Count">
            <summary>
            Gets the number of elements in the enumerable.
            </summary>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection`1.GetAsyncEnumerator(System.Int64)">
            <summary>
            Gets an enumerator that returns batches of elements and starts at the offset.
            </summary>
            <param name="offset">
            The offset.
            </param>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="T:ConnectQl.AsyncEnumerables.IOrderedAsyncEnumerable`1">
            <summary>
            The OrderedAsyncEnumerable interface.
            </summary>
            <typeparam name="TElement">
            The type of the elements in the enumerable.
            </typeparam>
        </member>
        <member name="M:ConnectQl.AsyncEnumerables.IOrderedAsyncEnumerable`1.CreateOrderedAsyncEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
            <summary>
            Performs a subsequent ordering on the elements of an <see cref="T:ConnectQl.AsyncEnumerables.IOrderedAsyncEnumerable`1"/> according to a key.
            </summary>
            <typeparam name="TKey">
            The type of the key produced by <paramref name="keySelector"/>.
            </typeparam>
            <param name="keySelector">
            The <see cref="T:System.Func`2"/> used to extract the key for each element.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IComparer`1"/> used to compare keys for placement in the returned sequence.
            </param>
            <param name="descending">
            <c>true</c> to sort the elements in descending order; <c>false</c> to sort the elements in ascending order.
            </param>
            <returns>
            An <see cref="T:ConnectQl.AsyncEnumerables.IOrderedAsyncEnumerable`1"/> whose elements are sorted according to a key.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.TokenScannedEventArgs">
            <summary>
            Event arguments for the <see cref="E:ConnectQl.Internal.Parser.TokenScanned" /> event.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.TokenScannedEventArgs.#ctor(ConnectQl.Internal.Token)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.TokenScannedEventArgs" /> class.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.TokenScannedEventArgs.Token">
            <summary>
            Gets the token.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.Parser">
            <summary>
            The parser.
            </summary>
            <summary>
            The parser.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Parser.EOFSymbol">
            <summary>
            The EOF symbol.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Parser.StringSymbol">
            <summary>
            The String symbol.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Parser.NumberSymbol">
            <summary>
            The Number symbol.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Parser.BracketedidentifierSymbol">
            <summary>
            The Bracketedidentifier symbol.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Parser.IdentifierSymbol">
            <summary>
            The Identifier symbol.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Parser.VariableSymbol">
            <summary>
            The Variable symbol.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Parser.Comment0Symbol">
            <summary>
            The Comment0 symbol.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Parser.Comment1Symbol">
            <summary>
            The Comment1 symbol.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Parser.Comment2Symbol">
            <summary>
            The Comment2 symbol.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Parser.MaxToken">
            <summary>
            The maximum token.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Parser.MinimumErrDistance">
            <summary>
            The minimum distance between two errors.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Parser.data">
            <summary>
            The node data provider.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Parser.scanner">
            <summary>
            The scanner.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Parser.errors">
            <summary>
            The error writer.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Parser.t">
            <summary>
            The last recognized token.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Parser.errDist">
            <summary>
            The distance from the last error.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Parser.#ctor(ConnectQl.Internal.Scanner,ConnectQl.Internal.Interfaces.INodeDataProvider,ConnectQl.Internal.Interfaces.IMessageWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Parser"/> class.
            </summary>
            <param name="scanner">
            The scanner.
            </param>
            <param name="data">
            The data provider.
            </param>
            <param name="messages">
            The message writer.
            </param>
        </member>
        <member name="E:ConnectQl.Internal.Parser.TokenScanned">
            <summary>
            Raised when a token is scanned.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Parser.Tokens">
            <summary>
            Gets the tokens.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Parser.Statements">
            <summary>
            Gets the statements that this parser generated.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Parser.LookAhead">
            <summary>
            Gets the look-ahead token.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Parser.SemErr(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Triggers a semantic error.
            </summary>
            <param name="lineFrom">
            The line number from.
            </param>
            <param name="lineTo">
            The line number to.
            </param>
            <param name="colTo">
            The column number to.
            </param>
            <param name="tokenIndexFrom">
            The token index from.
            </param>
            <param name="tokenIndexTo">
            The token index to.
            </param>
            <param name="colFrom">
            The column number from.
            </param>
            <param name="msg">
            The message.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Parser.SemErr(System.String)">
            <summary>
            Triggers a semantic error.
            </summary>
            <param name="msg">
            The message.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Parser.SynErr(System.Int32)">
            <summary>
            Triggers a syntactic error.
            </summary>
            <param name="n">
            The error number.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Parser.Get">
            <summary>
            Gets the next token.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Parser.Expect(System.Int32)">
            <summary>
            Expects that the next token is the specified token.
            </summary>
            <param name="n">
            The token to expect.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Parser.StartOf(System.Int32)">
            <summary>
            Checks if the next token is the start of the specifed set.
            </summary>
            <param name="s">
            The set number.
            </param>
            <returns>
            <c>true</c> if the token is the start of the set.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Parser.ExpectWeak(System.Int32,System.Int32)">
            <summary>
            Expects that the next token is the specified token but keeps scanning if it wasn't found.
            </summary>
            <param name="n">
            The token to expect.
            </param>
            <param name="follow">
            The token that follows.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Parser.WeakSeparator(System.Int32,System.Int32,System.Int32)">
            <summary>
            Tries to get the next token even if the separator is missing.
            </summary>
            <param name="n">
            The token number that specified the separator.
            </param>
            <param name="syFol">
            The symbol after the separator.
            </param>
            <param name="repFol">
            The symbol that ends the separated symbols.
            </param>
            <returns>
            <c>true</c> if the separator and symbol were found, false otherwise.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Parser.Parse">
            <summary>
            Parses the text.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Parser.Set">
            <summary>
            The initialization set.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Parser.DefaultProvider">
            <summary>
            Gets or sets the default data provider.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Parser.Pos">
            <summary>
            Gets the pos.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Parser.Mark">
            <summary>
            The mark.
            </summary>
            <returns>
            The <see cref="T:ConnectQl.Internal.Interfaces.IParserContext"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Parser.SetContext``1(``0,ConnectQl.Internal.Interfaces.IParserContext)">
            <summary>
            Sets the context for the node.
            </summary>
            <param name="node">
            The node.
            </param>
            <param name="context">
            The context.
            </param>
            <typeparam name="T">
            The type of the node.
            </typeparam>
            <returns>
            The <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Parser.ParseString(System.String)">
            <summary>
            The parse string.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Parser.CatchAll``1(System.Func{``0})">
            <summary>
            Catches exceptions and logs them as semantic errors.
            </summary>
            <param name="func">
            The function to execute and catch exceptions for.
            </param>
            <typeparam name="T">
            The type the function returns.
            </typeparam>
            <returns>
            The <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Parser.ParseNumber(System.String)">
            <summary>
            Parses a number.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The number.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Parser.ParseTimeSpan(System.String,System.Object)">
            <summary>
            The parse time span.
            </summary>
            <param name="unit">
            The unit.
            </param>
            <param name="objectValue">
            The value.
            </param>
            <returns>
            The <see cref="T:System.TimeSpan"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Parser.FrozenContext">
            <summary>
            The frozen context.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Parser.FrozenContext.#ctor(ConnectQl.Results.Position,ConnectQl.Results.Position)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Parser.FrozenContext"/> class.
            </summary>
            <param name="start">
            The start.
            </param>
            <param name="end">
            The end.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Parser.FrozenContext.End">
            <summary>
            Gets the end.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Parser.FrozenContext.Start">
            <summary>
            Gets the start.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Parser.FrozenContext.ToString">
            <summary>
            The to string.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Parser.ParserContext">
            <summary>
            The parser context.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Parser.ParserContext.parent">
            <summary>
            The parent.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Parser.ParserContext.#ctor(ConnectQl.Internal.Parser)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Parser.ParserContext"/> class.
            </summary>
            <param name="parent">
            The parent.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Parser.ParserContext.End">
            <summary>
            Gets the end.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Parser.ParserContext.Start">
            <summary>
            Gets the start.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Parser.ParserContext.Token">
            <summary>
            Gets the token.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Parser.ParserContext.SemErr(System.String)">
            <summary>
            The sem err.
            </summary>
            <param name="msg">
            The msg.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Parser.ParserContext.SemErr(ConnectQl.Results.Position,ConnectQl.Results.Position,System.String)">
            <summary>
            The sem err.
            </summary>
            <param name="start">
            The start.
            </param>
            <param name="end">
            The end.
            </param>
            <param name="msg">
            The msg.
            </param>
        </member>
        <member name="T:ConnectQl.Internal.ErrorWriter">
            <summary>
            The error writer.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.ErrorWriter.result">
            <summary>
            The message writer to write to.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.ErrorWriter.#ctor(ConnectQl.Internal.Interfaces.IMessageWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.ErrorWriter" /> class.
            </summary>
            <param name="result">
            The message writer to write to.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.ErrorWriter.SynErr(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a syntax error to the message writer.
            </summary>
            <param name="line">
            The line number where the error occured.
            </param>
            <param name="col">
            The column number where the error occured.
            </param>
            <param name="index">
            The index of the token.
            </param>
            <param name="n">
            The error number.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.ErrorWriter.SemErr(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Writes a semantic error to the message writer.
            </summary>
            <param name="lineFrom">
            The line number where the error started.
            </param>
            <param name="colFrom">
            The column number where the error started.
            </param>
            <param name="tokenIndexFrom">
            The token index where the error started.
            </param>
            <param name="lineTo">
            The line number where the error ended.
            </param>
            <param name="colTo">
            The column number where the error ended.
            </param>
            <param name="tokenIndexTo">
            The token index where the error ended.
            </param>
            <param name="s">
            The error message.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.ErrorWriter.SemErr(System.String)">
            <summary>
            Writes a semantic error to the message writer without a position.
            </summary>
            <param name="s">
            The error message.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.ErrorWriter.Warning(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Writes a warning to the message writer.
            </summary>
            <param name="lineFrom">
            The line number where the error started.
            </param>
            <param name="colFrom">
            The column number where the error started.
            </param>
            <param name="lineTo">
            The line number where the error ended.
            </param>
            <param name="colTo">
            The column number where the error ended.
            </param>
            <param name="s">
            The warning message.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.ErrorWriter.Warning(System.String)">
            <summary>
            Writes a warning to the message writer without a position.
            </summary>
            <param name="s">
            The warning message.
            </param>
        </member>
        <member name="T:ConnectQl.Internal.FatalError">
            <summary>
            Thrown when a fatal error occurs.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.FatalError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.FatalError" /> class.
            </summary>
            <param name="m">
            The error message.
            </param>
        </member>
        <member name="T:ConnectQl.Internal.Token">
            <summary>
            The token.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Token.IsComment">
            <summary>
            Gets or sets a value indicating whether the token is comment.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Token.Index">
            <summary>
            Gets or sets the tokens index.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Token.Kind">
            <summary>
            Gets or sets the token kind.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Token.Pos">
            <summary>
            Gets or sets the token position in bytes in the source text (starting at 0).
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Token.CharPos">
            <summary>
            Gets or sets the token position in characters in the source text (starting at 0).
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Token.Col">
            <summary>
            Gets or sets the token column (starting at 1).
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Token.Line">
            <summary>
            Gets or sets the token line (starting at 1).
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Token.Val">
            <summary>
            Gets or sets the token value.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Token.Next">
            <summary>
            Gets or sets the ML 2005-03-11 Tokens are kept in linked list.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.Buffer">
            <summary>
            The Buffer.
            This Buffer supports the following cases:
            1) seekable stream (file)
               a) whole stream in Buffer
               b) part of stream in Buffer
            2) non seekable stream (network, console)
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Buffer.Eof">
            <summary>
            The end of file token.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Buffer.MinBufferLength">
            <summary>
            The minimum buffer length.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Buffer.MaxBufferLength">
            <summary>
            The maximum buffer length.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Buffer.byteBuffer">
            <summary>
            The input buffer.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Buffer.firstByte">
            <summary>
            The position of first byte in the buffer relative to input stream.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Buffer.bufferLength">
            <summary>
            The length of the buffer.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Buffer.inputStreamLength">
            <summary>
            The length of input stream (may change if the stream is no file).
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Buffer.currentPosition">
            <summary>
            The current position in the buffer.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Buffer.stream">
            <summary>
            The input stream (seekable).
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Buffer.isUserStream">
            <summary>
            <c>true</c> if the stream was opened by the user.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Buffer.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Buffer" /> class.
            </summary>
            <param name="stream">
            The stream.
            </param>
            <param name="isUserStream">
            <c>true</c> if the stream was opened by the user.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Buffer.#ctor(ConnectQl.Internal.Buffer)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Buffer" /> class.
            Called in UTF8Buffer constructor.
            </summary>
            <param name="b">
            The buffer to base this buffer on.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Buffer.Close">
            <summary>
            Closes the buffer.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Buffer.Read">
            <summary>
            Reads a character from the buffer and moves the buffer pointer.
            </summary>
            <returns>
            The character.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Buffer.Peek">
            <summary>
            Reads a character from the buffer without moving the buffer pointer.
            </summary>
            <returns>
            The character.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Buffer.GetString(System.Int32,System.Int32)">
            <summary>
            Gets a string starting at the beg position until the end position.
            </summary>
            <param name="beg">
            The position of the beginning of the string, zero-based inclusive in bytes.
            </param>
            <param name="end">
            The position of the end of the string, zero-based inclusive in bytes.
            </param>
            <returns>
            The string.
            </returns>
        </member>
        <member name="P:ConnectQl.Internal.Buffer.Pos">
            <summary>
            Gets or sets the position in the buffer.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Buffer.ReadNextStreamChunk">
            <summary>
            Read the next chunk of bytes from the stream, increases the Buffer
            if needed and updates the fields inputStreamLength and bufferLength.
            </summary>
            <returns>
            The number of bytes read.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.UTF8Buffer">
            <summary>
            A buffer that supports UTF-8 encoding.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.UTF8Buffer.#ctor(ConnectQl.Internal.Buffer)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Buffer" /> class.
            </summary>
            <param name="b">
            The buffer to base this UTF-8 Buffer on.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.UTF8Buffer.Read">
            <summary>
            Reads a character from the buffer and moves the buffer pointer.
            </summary>
            <returns>
            The character.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Scanner">
            <summary>
            The scanner.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Scanner.EndOfLine">
            <summary>
            The end-of-line character.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Scanner.EofSymbol">
            <summary>
            The end-of-file symbol.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Scanner.Start">
            <summary>
            Maps first token character to start state.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Scanner.MaxToken">
            <summary>
            The maximum token.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Scanner.NoSymbol">
            <summary>
            The no-symbol token.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Scanner.valCh">
            <summary>
            The current input character (for token.Val).
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Scanner.t">
            <summary>
            The current token.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Scanner.index">
            <summary>
            The token index.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Scanner.ch">
            <summary>
            The current input character.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Scanner.pos">
            <summary>
            The byte position of current character.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Scanner.charPos">
            <summary>
            The position by unicode characters starting with 0.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Scanner.col">
            <summary>
            The column number of current character.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Scanner.line">
            <summary>
            The line number of current character.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Scanner.oldEols">
            <summary>
            EOLs that appeared in a comment.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Scanner.tokens">
            <summary>
            The list of tokens already peeked (first token is a dummy).
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Scanner.pt">
            <summary>
            The current peek token.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Scanner.tval">
            <summary>
            The text of current token.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Scanner.tlen">
            <summary>
            The length of current token.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Scanner.#cctor">
            <summary>
            Initializes the static state of the <see cref="T:ConnectQl.Internal.Scanner" /> class.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Scanner.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Scanner" /> class.
            </summary>
            <param name="s">
            The stream to scan for tokens.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Scanner.Buffer">
            <summary>
            Gets or sets the scanner buffer.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Scanner.EmitComments">
            <summary>
            Gets or sets indicating whether to emit comments.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Scanner.Current">
            <summary>
            Gets the current token.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Scanner.Init">
            <summary>
            Initializes the scanner.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Scanner.NextCh">
            <summary>
            Retrieves the next character.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Scanner.AddCh">
            <summary>
            Adds a character to the current token.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Scanner.CheckLiteral">
            <summary>
            Checks for literals.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Scanner.NextToken">
            <summary>
            Gets the next token.
            </summary>
            <returns>
            The token.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Scanner.SetScannerBehindT">
            <summary>
            Positions the scannert to after the currenttoken.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Scanner.Scan">
            <summary>
            Gets the next token (possibly a token already seen during peeking)
            </summary>
            <returns>
            The token.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Scanner.Peek">
            <summary>
            Peeks for the next token, ignore pragmas.
            </summary>
            <returns>
            The next token.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Scanner.ResetPeek">
            <summary>
            make sure that peeking starts at the current scan position
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.GroupByEnumerator`2">
            <summary>
            Enumerator used by the <see cref="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.GroupBy``2(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})"/> method.
            </summary>
            <typeparam name="TSource">
            The type of the source elements.
            </typeparam>
            <typeparam name="TKey">
            The type of the keys.
            </typeparam>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.GroupByEnumerator`2.comparer">
            <summary>
            The comparer.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.GroupByEnumerator`2.enumerator">
            <summary>
            The enumerator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.GroupByEnumerator`2.keySelector">
            <summary>
            The key selector.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.GroupByEnumerator`2.lastKey">
            <summary>
            The last key.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.GroupByEnumerator`2.lastOffset">
            <summary>
            The last offset.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.GroupByEnumerator`2.offset">
            <summary>
            The offset.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.GroupByEnumerator`2.sorted">
            <summary>
            The sorted.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.GroupByEnumerator`2.source">
            <summary>
            The source.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.GroupByEnumerator`2.state">
            <summary>
            The state.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.GroupByEnumerator`2.#ctor(ConnectQl.AsyncEnumerables.IAsyncEnumerable{`0},System.Func{`0,`1},System.Collections.Generic.IComparer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.GroupByEnumerator`2"/> class.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="keySelector">
            The key selector.
            </param>
            <param name="comparer">
            The comparer.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.Enumerators.GroupByEnumerator`2.IsSynchronous">
            <summary>
            Gets a value indicating whether the enumerator is synchronous.
                When <c>false</c>, <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.NextBatchAsync"/> must be called when
                <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.MoveNext"/> returns <c>false</c>.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.GroupByEnumerator`2.Dispose(System.Boolean)">
            <summary>
            Resets all fields to null, and sets the state to 'disposed'.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.GroupByEnumerator`2.InitialBatch">
            <summary>
            Gets the initial batch.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.GroupByEnumerator`2.OnNextBatchAsync">
            <summary>
            Moves to the next batch. Implemented as a state machine.
            </summary>
            <returns>
            <c>true</c> if another batch is available, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.GroupByEnumerator`2.EnumerateItem(ConnectQl.AsyncEnumerables.IAsyncGrouping{`0,`1})">
            <summary>
            Enumerates the item.
            </summary>
            <param name="asyncGrouping">
            The async grouping.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.GroupByEnumerator`2.EnumerateGroupings">
            <summary>
            Enumerates the groupings in a batch.
            </summary>
            <returns>
            The groupings.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.ApplyEnumerator`3">
            <summary>
            Applies all elements in the left collection to the function in the right collection and returns the results.
            </summary>
            <typeparam name="TLeft">
            The type of the elements in the left collection.
            </typeparam>
            <typeparam name="TRight">
            The type of the elements in the right collection.
            </typeparam>
            <typeparam name="TResult">
            The type of the resulting elements.
            </typeparam>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.ApplyEnumerator`3.isOuterApply">
            <summary>
            True if this is an is OUTER APPY, false for a CROSS APPLY.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.ApplyEnumerator`3.itemsReturned">
            <summary>
            The number of items returned for the current item.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.ApplyEnumerator`3.leftEnumerator">
            <summary>
            The left enumerator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.ApplyEnumerator`3.resultSelector">
            <summary>
            The result selector.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.ApplyEnumerator`3.rightEnumerator">
            <summary>
            The right enumerator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.ApplyEnumerator`3.rightFactory">
            <summary>
            The right factory.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.ApplyEnumerator`3.state">
            <summary>
            The state.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.ApplyEnumerator`3.stillEnumerating">
            <summary>
            True if we're still enumerating, false otherwise.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.ApplyEnumerator`3.#ctor(System.Boolean,ConnectQl.AsyncEnumerables.IAsyncEnumerable{`0},System.Func{`0,ConnectQl.AsyncEnumerables.IAsyncEnumerable{`1}},System.Func{`0,`1,`2})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.ApplyEnumerator`3"/> class.
            </summary>
            <param name="isOuterApply">
            The is outer apply.
            </param>
            <param name="left">
            The left.
            </param>
            <param name="rightFactory">
            The right factory.
            </param>
            <param name="resultSelector">
            The result selector.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.Enumerators.ApplyEnumerator`3.IsSynchronous">
            <summary>
            Gets a value indicating whether the enumerator is synchronous.
                When <c>false</c>, <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.NextBatchAsync"/> must be called when
                <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.MoveNext"/> returns <c>false</c>.
                Since the <see cref="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.ApplyEnumerator`3.rightFactory"/> function can return anything, we can never be sure this is a synchronous
                enumerator.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.ApplyEnumerator`3.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1"/>.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.ApplyEnumerator`3.InitialBatch">
            <summary>
            Gets the initial batch.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.ApplyEnumerator`3.OnNextBatchAsync">
            <summary>
            Gets called when the next batch is needed.
            </summary>
            <returns>
            A task returning an <see cref="T:System.Collections.Generic.IEnumerator`1"/> containing the next batch, of <c>null</c> when all data is
                enumerated.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.ApplyEnumerator`3.EnumerateItem(`2)">
            <summary>
            The enumerate item.
            </summary>
            <param name="result">
            The result.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.ApplyEnumerator`3.EnumerateItems">
            <summary>
            Enumerates the items.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.AsyncEnumeratorBase`1">
            <summary>
            The async enumerator base.
            </summary>
            <typeparam name="T">
            The type of the items.
            </typeparam>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.AsyncEnumeratorBase`1.currentEnumerator">
            <summary>
            The current enumerator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.AsyncEnumeratorBase`1.currentItem">
            <summary>
            Stores the current item.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.AsyncEnumeratorBase`1.currentItemValid">
            <summary>
            Stores a value indicating whether the current item is valid.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.AsyncEnumeratorBase`1.initialized">
            <summary>
            True if the enumerator was initialized.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.AsyncEnumeratorBase`1.isEnumerating">
            <summary>
            Stores a value indicating whether we are enumerating.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.AsyncEnumeratorBase`1.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.AsyncEnumeratorBase`1"/> class.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.Enumerators.AsyncEnumeratorBase`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.Enumerators.AsyncEnumeratorBase`1.IsSynchronous">
            <summary>
            Gets a value indicating whether the enumerator is synchronous.
                When <c>false</c>, <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.NextBatchAsync"/> must be called when
                <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.MoveNext"/> returns <c>false</c>.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.AsyncEnumeratorBase`1.Dispose">
            <summary>
            The dispose.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.AsyncEnumeratorBase`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; false if the enumerator has passed the
                end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.AsyncEnumeratorBase`1.NextBatchAsync">
            <summary>
            Advances the enumerator to the next batch of elements of the collection. Filters out empty batches.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of
                the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.AsyncEnumeratorBase`1.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1"/>.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.AsyncEnumeratorBase`1.InitialBatch">
            <summary>
            Gets the initial batch.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.AsyncEnumeratorBase`1.OnNextBatchAsync">
            <summary>
            Gets called when the next batch is needed.
            </summary>
            <returns>
            A task returning an <see cref="T:System.Collections.Generic.IEnumerator`1"/> containing the next batch, of <c>null</c> when all data is
                enumerated.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.AsyncEnumeratorBase`1.GetInitialBatch">
            <summary>
            Gets the initial batch.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.BatchesEnumerator`1">
            <summary>
            Enumerator used by the <see cref="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.Batch``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Int64)"/> method.
            </summary>
            <typeparam name="TSource">
            The type of the source elements.
            </typeparam>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.BatchesEnumerator`1.batchSize">
            <summary>
            The batch size.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.BatchesEnumerator`1.enumerator">
            <summary>
            The enumerator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.BatchesEnumerator`1.materialized">
            <summary>
            The sorted.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.BatchesEnumerator`1.offset">
            <summary>
            The offset.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.BatchesEnumerator`1.source">
            <summary>
            The source.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.BatchesEnumerator`1.state">
            <summary>
            The state.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.BatchesEnumerator`1.#ctor(ConnectQl.AsyncEnumerables.IAsyncEnumerable{`0},System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.BatchesEnumerator`1"/> class.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="batchSize">
            The batch size.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.Enumerators.BatchesEnumerator`1.IsSynchronous">
            <summary>
            Gets a value indicating whether the enumerator is synchronous.
                When <c>false</c>, <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.NextBatchAsync"/> must be called when
                <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.MoveNext"/> returns <c>false</c>.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.BatchesEnumerator`1.Dispose(System.Boolean)">
            <summary>
            Resets all fields to null, and sets the state to 'disposed'.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.BatchesEnumerator`1.InitialBatch">
            <summary>
            Gets the initial batch.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.BatchesEnumerator`1.OnNextBatchAsync">
            <summary>
            Moves to the next batch. Implemented as a state machine.
            </summary>
            <returns>
            <c>true</c> if another batch is available, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.BatchesEnumerator`1.EnumerateItem(ConnectQl.Internal.AsyncEnumerables.Batch{`0})">
            <summary>
            Enumerates the item.
            </summary>
            <param name="batch">
            The batch.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.BatchesEnumerator`1.EnumerateBatches">
            <summary>
            Enumerates the groupings in a batch.
            </summary>
            <returns>
            The groupings.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.CallbackEnumerator`1">
            <summary>
            Enumerator used by the <see cref="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.Skip``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Int64)"/> method.
            </summary>
            <typeparam name="TSource">
            The type of the source elements.
            </typeparam>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.CallbackEnumerator`1.afterIndex">
            <summary>
            The after index.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.CallbackEnumerator`1.index">
            <summary>
            The index.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.CallbackEnumerator`1.after">
            <summary>
            The action to call after enumeration.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.CallbackEnumerator`1.asyncEnumerator">
            <summary>
            The enumerator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.CallbackEnumerator`1.before">
            <summary>
            The action to call before enumerating.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.CallbackEnumerator`1.count">
            <summary>
            The count.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.CallbackEnumerator`1.state">
            <summary>
            The state.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.CallbackEnumerator`1.#ctor(ConnectQl.AsyncEnumerables.IAsyncEnumerable{`0},System.Action,System.Action{System.Int64},System.Int64,System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.CallbackEnumerator`1"/> class.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="before">
            Called before the enumeration starts.
            </param>
            <param name="after">
            Called when enumeration is complete with the number of items enumerated.
            </param>
            <param name="index">
            The index.
            </param>
            <param name="afterIndex">
            The after Index.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.Enumerators.CallbackEnumerator`1.IsSynchronous">
            <summary>
            Gets a value indicating whether the enumerator is synchronous.
                When <c>false</c>, <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.NextBatchAsync"/> must be called when
                <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.MoveNext"/> returns <c>false</c>.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.CallbackEnumerator`1.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1"/>.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.CallbackEnumerator`1.InitialBatch">
            <summary>
            Gets the initial batch.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.CallbackEnumerator`1.OnNextBatchAsync">
            <summary>
            Gets called when the next batch is needed.
            </summary>
            <returns>
            A task returning an <see cref="T:System.Collections.Generic.IEnumerator`1"/> containing the next batch, of <c>null</c> when all data is
                enumerated.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.CallbackEnumerator`1.EnumerateItems">
            <summary>
            Enumerates the items for the current batch.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.CrossJoinEnumerator`3">
            <summary>
            Enumerator used by the <see cref="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.Skip``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Int64)"/> method.
            </summary>
            <typeparam name="TLeft">
            The type of the left source elements.
            </typeparam>
            <typeparam name="TRight">
            The type of the right source elements.
            </typeparam>
            <typeparam name="TResult">
            The type of the result elements.
            </typeparam>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.CrossJoinEnumerator`3.leftEnumerator">
            <summary>
            The left enumerator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.CrossJoinEnumerator`3.materializedRight">
            <summary>
            The materialized right collection.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.CrossJoinEnumerator`3.resultSelector">
            <summary>
            The result selector.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.CrossJoinEnumerator`3.right">
            <summary>
            The right.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.CrossJoinEnumerator`3.rightEnumerator">
            <summary>
            The right enumerator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.CrossJoinEnumerator`3.state">
            <summary>
            The state.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.CrossJoinEnumerator`3.stillEnumerating">
            <summary>
            The still enumerating.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.CrossJoinEnumerator`3.#ctor(ConnectQl.AsyncEnumerables.IAsyncEnumerable{`0},ConnectQl.AsyncEnumerables.IAsyncEnumerable{`1},System.Func{`0,`1,`2})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.CrossJoinEnumerator`3"/> class.
            </summary>
            <param name="left">
            The left part of the union.
            </param>
            <param name="right">
            The right part of the union.
            </param>
            <param name="resultSelector">
            The result Selector.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.Enumerators.CrossJoinEnumerator`3.IsSynchronous">
            <summary>
            Gets a value indicating whether the enumerator is synchronous.
                When <c>false</c>, <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.NextBatchAsync"/> must be called when
                <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.MoveNext"/> returns <c>false</c>.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.CrossJoinEnumerator`3.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1"/>.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.CrossJoinEnumerator`3.InitialBatch">
            <summary>
            Gets the initial batch.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.CrossJoinEnumerator`3.OnNextBatchAsync">
            <summary>
            Gets called when the next batch is needed.
            </summary>
            <returns>
            A task returning an <see cref="T:System.Collections.Generic.IEnumerator`1"/> containing the next batch, of <c>null</c> when all data is
                enumerated.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.CrossJoinEnumerator`3.EnumerateItems">
            <summary>
            Enumerates the items.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.DistinctEnumerator`1">
            <summary>
            Enumerator used by the <see cref="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.Distinct``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0})"/>
                method.
            </summary>
            <typeparam name="TSource">
            The type of the source elements.
            </typeparam>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.DistinctEnumerator`1.asyncEnumerator">
            <summary>
            The enumerator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.DistinctEnumerator`1.comparer">
            <summary>
            The comparer.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.DistinctEnumerator`1.isFirst">
            <summary>
            The is first.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.DistinctEnumerator`1.lastItem">
            <summary>
            The last item.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.DistinctEnumerator`1.source">
            <summary>
            The source.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.DistinctEnumerator`1.state">
            <summary>
            The state.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.DistinctEnumerator`1.#ctor(ConnectQl.AsyncEnumerables.IAsyncEnumerable{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.DistinctEnumerator`1"/> class.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="comparer">
            The comparer.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.Enumerators.DistinctEnumerator`1.IsSynchronous">
            <summary>
            Gets a value indicating whether the enumerator is synchronous.
                When <c>false</c>, <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.NextBatchAsync"/> must be called when
                <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.MoveNext"/> returns <c>false</c>.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.DistinctEnumerator`1.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1"/>.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.DistinctEnumerator`1.InitialBatch">
            <summary>
            Gets the initial batch.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.DistinctEnumerator`1.OnNextBatchAsync">
            <summary>
            Gets called when the next batch is needed.
            </summary>
            <returns>
            A task returning an <see cref="T:System.Collections.Generic.IEnumerator`1"/> containing the next batch, of <c>null</c> when all data is
                enumerated.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.DistinctEnumerator`1.EnumerateItems">
            <summary>
            Enumerates the items for the current batch.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.EmptyEnumerator`1">
            <summary>
            The empty enumerator.
            </summary>
            <typeparam name="T">
            The type of the items.
            </typeparam>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.Enumerators.EmptyEnumerator`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.Enumerators.EmptyEnumerator`1.IsSynchronous">
            <summary>
            Gets a value indicating whether the enumerator is synchronous.
                When <c>false</c>, <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.NextBatchAsync"/> must be called when
                <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.MoveNext"/> returns <c>false</c>.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.EmptyEnumerator`1.Dispose">
            <summary>
            The dispose.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.EmptyEnumerator`1.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; false if the enumerator has passed the
                end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.EmptyEnumerator`1.NextBatchAsync">
            <summary>
            Advances the enumerator to the next batch of elements of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; false if the enumerator has passed the
                end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.EnumerableEnumerator`1">
            <summary>
            Enumerates an <see cref="T:System.Collections.Generic.IEnumerable`1"/> as an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </summary>
            <typeparam name="T">
            The type of the items.
            </typeparam>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.EnumerableEnumerator`1.enumerator">
            <summary>
            The enumerator.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.EnumerableEnumerator`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.EnumerableEnumerator`1"/> class.
            </summary>
            <param name="enumerable">
            The enumerable.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.Enumerators.EnumerableEnumerator`1.IsSynchronous">
            <summary>
            Gets a value indicating whether the enumerator is synchronous.
                When <c>false</c>, <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.NextBatchAsync"/> must be called when
                <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.MoveNext"/> returns <c>false</c>.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.EnumerableEnumerator`1.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1"/>.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.EnumerableEnumerator`1.InitialBatch">
            <summary>
            Gets the initial batch.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.EnumerableEnumerator`1.OnNextBatchAsync">
            <summary>
            Gets called when the next batch is needed.
            </summary>
            <returns>
            A task returning an <see cref="T:System.Collections.Generic.IEnumerator`1"/> containing the next batch, of <c>null</c> when all data is
                enumerated.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.FactoryEnumerator`1">
            <summary>
            Enumerator that enumerates the items of an asynchronously created <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </summary>
            <typeparam name="T">
            The type of the result elements.
            </typeparam>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.FactoryEnumerator`1.asyncEnumerator">
            <summary>
            The enumerator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.FactoryEnumerator`1.factory">
            <summary>
            The transform.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.FactoryEnumerator`1.state">
            <summary>
            The state.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.FactoryEnumerator`1.#ctor(System.Func{System.Threading.Tasks.Task{ConnectQl.AsyncEnumerables.IAsyncEnumerable{`0}}})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.FactoryEnumerator`1"/> class.
            </summary>
            <param name="factory">
            The factory.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.Enumerators.FactoryEnumerator`1.IsSynchronous">
            <summary>
            Gets a value indicating whether the enumerator is synchronous.
                When <c>false</c>, <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.NextBatchAsync"/> must be called when
                <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.MoveNext"/> returns <c>false</c>.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.FactoryEnumerator`1.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1"/>.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.FactoryEnumerator`1.InitialBatch">
            <summary>
            Gets the initial batch.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.FactoryEnumerator`1.OnNextBatchAsync">
            <summary>
            Gets called when the next batch is needed.
            </summary>
            <returns>
            A task returning an <see cref="T:System.Collections.Generic.IEnumerator`1"/> containing the next batch, of <c>null</c> when all data is
                enumerated.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.GeneratorEnumerable`2">
            <summary>
            Enumerator that creates items using a generator function.
            </summary>
            <typeparam name="TSource">
            The type of the source elements.
            </typeparam>
            <typeparam name="TState">
            The type of the state.
            </typeparam>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.GeneratorEnumerable`2.dispose">
            <summary>
            The dispose.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.GeneratorEnumerable`2.enumeratorState">
            <summary>
            Stores the context.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.GeneratorEnumerable`2.generateItems">
            <summary>
            The get items.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.GeneratorEnumerable`2.initialize">
            <summary>
            The initialize.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.GeneratorEnumerable`2.state">
            <summary>
            The state.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.GeneratorEnumerable`2.#ctor(System.Func{System.Threading.Tasks.Task{`1}},System.Func{`1,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`0}}},System.Action{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.GeneratorEnumerable`2"/> class.
            </summary>
            <param name="initialize">
            The initialize.
            </param>
            <param name="generateItems">
            The get Items.
            </param>
            <param name="dispose">
            The dispose.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.Enumerators.GeneratorEnumerable`2.IsSynchronous">
            <summary>
            Gets a value indicating whether the enumerator is synchronous.
                When <c>false</c>, <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.NextBatchAsync"/> must be called when
                <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.MoveNext"/> returns <c>false</c>.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.GeneratorEnumerable`2.Dispose(System.Boolean)">
            <summary>
            Resets all fields to null, and sets the state to 'disposed'.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.GeneratorEnumerable`2.InitialBatch">
            <summary>
            Gets the initial batch.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.GeneratorEnumerable`2.OnNextBatchAsync">
            <summary>
            Gets called when the next batch is needed.
            </summary>
            <returns>
            A task returning an <see cref="T:System.Collections.Generic.IEnumerator`1"/> containing the next batch, of <c>null</c> when all data is
                enumerated.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.JoinEnumerator`4">
            <summary>
            Joins two sets of items together.
            </summary>
            <typeparam name="TLeft">
            The type of the left items.
            </typeparam>
            <typeparam name="TRight">
            The type of the right items.
            </typeparam>
            <typeparam name="TKey">
            The type of the keys to join on.
            </typeparam>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.JoinEnumerator`4.isLeftJoin">
            <summary>
            The is left join.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.JoinEnumerator`4.joinOperator">
            <summary>
            The operator to use when joining.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.JoinEnumerator`4.itemsReturned">
            <summary>
            The items returned.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.JoinEnumerator`4.keyComparison">
            <summary>
            The key comparison.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.JoinEnumerator`4.left">
            <summary>
            The left.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.JoinEnumerator`4.leftEnumerator">
            <summary>
            The left enumerator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.JoinEnumerator`4.leftKey">
            <summary>
            The left key.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.JoinEnumerator`4.materializedRight">
            <summary>
            The materialized right.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.JoinEnumerator`4.resultFilter">
            <summary>
            The result filter.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.JoinEnumerator`4.resultSelector">
            <summary>
            The result selector.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.JoinEnumerator`4.right">
            <summary>
            The right.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.JoinEnumerator`4.rightEnumerator">
            <summary>
            The right enumerator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.JoinEnumerator`4.rightIndex">
            <summary>
            The right index.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.JoinEnumerator`4.rightKey">
            <summary>
            The right key.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.JoinEnumerator`4.state">
            <summary>
            The state.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.JoinEnumerator`4.stillEnumerating">
            <summary>
            The still enumerating.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.JoinEnumerator`4.#ctor(System.Boolean,System.Boolean,ConnectQl.AsyncEnumerables.IAsyncEnumerable{`0},ConnectQl.AsyncEnumerables.IAsyncEnumerable{`1},System.Func{`0,`2},System.Linq.Expressions.ExpressionType,System.Func{`1,`2},System.Func{`0,`1,System.Boolean},System.Func{`0,`1,`3},System.Collections.Generic.IComparer{`2})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.JoinEnumerator`4"/> class.
            </summary>
            <param name="isLeftJoin">
            The is left join.
            </param>
            <param name="isPreSorted">
            True if both <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>s are already sorted.
            </param>
            <param name="left">
            The left.
            </param>
            <param name="right">
            The right.
            </param>
            <param name="leftKey">
            The left key.
            </param>
            <param name="joinOperator">
            The operator to use when joining.
            </param>
            <param name="rightKey">
            The right key.
            </param>
            <param name="resultFilter">
            The result filter.
            </param>
            <param name="resultSelector">
            The result selector.
            </param>
            <param name="keyComparer">
            The key comparer.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.Enumerators.JoinEnumerator`4.IsSynchronous">
            <summary>
            Gets a value indicating whether the enumerator is synchronous.
                When <c>false</c>, <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.NextBatchAsync"/> must be called when
                <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.MoveNext"/> returns <c>false</c>.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.JoinEnumerator`4.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1"/>.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.JoinEnumerator`4.InitialBatch">
            <summary>
            Gets the initial batch.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.JoinEnumerator`4.OnNextBatchAsync">
            <summary>
            Gets called when the next batch is needed.
            </summary>
            <returns>
            A task returning an <see cref="T:System.Collections.Generic.IEnumerator`1"/> containing the next batch, of <c>null</c> when all data is
                enumerated.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.JoinEnumerator`4.EnumerateItem(`3)">
            <summary>
            The enumerate item.
            </summary>
            <param name="result">
            The result.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.JoinEnumerator`4.EnumerateItems">
            <summary>
            Enumerates the items.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.JoinEnumerator`4.ResetRight">
            <summary>
            The reset right.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.LessThanJoinEnumerator`4">
            <summary>
            The join enumerator.
            </summary>
            <typeparam name="TLeft">
            The type of the left items.
            </typeparam>
            <typeparam name="TRight">
            The type of the right items.
            </typeparam>
            <typeparam name="TKey">
            The type of the keys to join on.
            </typeparam>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.LessThanJoinEnumerator`4.includeEqual">
            <summary>
            The include equal.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.LessThanJoinEnumerator`4.isLeftJoin">
            <summary>
            The is left join.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.LessThanJoinEnumerator`4.itemsReturned">
            <summary>
            The items returned.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.LessThanJoinEnumerator`4.keyComparer">
            <summary>
            The key comparer.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.LessThanJoinEnumerator`4.left">
            <summary>
            The left.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.LessThanJoinEnumerator`4.leftEnumerator">
            <summary>
            The left enumerator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.LessThanJoinEnumerator`4.leftKey">
            <summary>
            The left key.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.LessThanJoinEnumerator`4.materializedRight">
            <summary>
            The materialized right.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.LessThanJoinEnumerator`4.resultFilter">
            <summary>
            The result filter.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.LessThanJoinEnumerator`4.resultSelector">
            <summary>
            The result selector.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.LessThanJoinEnumerator`4.right">
            <summary>
            The right.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.LessThanJoinEnumerator`4.rightEnumerator">
            <summary>
            The right enumerator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.LessThanJoinEnumerator`4.rightIndex">
            <summary>
            The right index.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.LessThanJoinEnumerator`4.rightKey">
            <summary>
            The right key.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.LessThanJoinEnumerator`4.state">
            <summary>
            The state.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.LessThanJoinEnumerator`4.stillEnumerating">
            <summary>
            The still enumerating.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.LessThanJoinEnumerator`4.#ctor(System.Boolean,ConnectQl.AsyncEnumerables.IAsyncEnumerable{`0},ConnectQl.AsyncEnumerables.IAsyncEnumerable{`1},System.Func{`0,`2},System.Func{`1,`2},System.Func{`0,`1,`3},System.Func{`0,`1,System.Boolean},System.Collections.Generic.IComparer{`2},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.LessThanJoinEnumerator`4"/> class.
                Initializes a new instance of the <see cref="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.JoinEnumerator`4"/> class.
            </summary>
            <param name="isLeftJoin">
            The is left join.
            </param>
            <param name="left">
            The left.
            </param>
            <param name="right">
            The right.
            </param>
            <param name="leftKey">
            The left key.
            </param>
            <param name="rightKey">
            The right key.
            </param>
            <param name="resultSelector">
            The result selector.
            </param>
            <param name="resultFilter">
            The result filter.
            </param>
            <param name="keyComparer">
            The key comparer.
            </param>
            <param name="includeEqual">
            <c>true</c> to include equal keys, <c>false</c> to only include items with keys greater than the left side.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.Enumerators.LessThanJoinEnumerator`4.IsSynchronous">
            <summary>
            Gets a value indicating whether the enumerator is synchronous.
                When <c>false</c>, <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.NextBatchAsync"/> must be called when
                <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.MoveNext"/> returns <c>false</c>.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.LessThanJoinEnumerator`4.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1"/>.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.LessThanJoinEnumerator`4.InitialBatch">
            <summary>
            Gets the initial batch.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.LessThanJoinEnumerator`4.OnNextBatchAsync">
            <summary>
            Gets called when the next batch is needed.
            </summary>
            <returns>
            A task returning an <see cref="T:System.Collections.Generic.IEnumerator`1"/> containing the next batch, of <c>null</c> when all data is
                enumerated.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.LessThanJoinEnumerator`4.EnumerateItem(`3)">
            <summary>
            The enumerate item.
            </summary>
            <param name="result">
            The result.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.LessThanJoinEnumerator`4.EnumerateItems">
            <summary>
            Enumerates the items.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.LessThanJoinEnumerator`4.ResetRight">
            <summary>
            The reset right.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.OrderedEnumerator`1">
            <summary>
            Enumerator used by the <see cref="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.OrderBy``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Collections.Generic.IEnumerable{ConnectQl.Interfaces.IOrderByExpression})"/> method.
            </summary>
            <typeparam name="TSource">
            The type of the source elements.
            </typeparam>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.OrderedEnumerator`1.asyncEnumerator">
            <summary>
            The enumerator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.OrderedEnumerator`1.comparison">
            <summary>
            The comparison.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.OrderedEnumerator`1.source">
            <summary>
            The source.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.OrderedEnumerator`1.state">
            <summary>
            The state.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.OrderedEnumerator`1.#ctor(ConnectQl.AsyncEnumerables.IAsyncEnumerable{`0},System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.OrderedEnumerator`1"/> class.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="comparison">
            The comparison.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.Enumerators.OrderedEnumerator`1.IsSynchronous">
            <summary>
            Gets a value indicating whether the enumerator is synchronous.
                When <c>false</c>, <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.NextBatchAsync"/> must be called when
                <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.MoveNext"/> returns <c>false</c>.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.OrderedEnumerator`1.Dispose(System.Boolean)">
            <summary>
            Resets all fields to null, and sets the state to 'disposed'.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.OrderedEnumerator`1.InitialBatch">
            <summary>
            Gets the initial batch.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.OrderedEnumerator`1.OnNextBatchAsync">
            <summary>
            Gets called when the next batch is needed.
            </summary>
            <returns>
            A task returning an <see cref="T:System.Collections.Generic.IEnumerator`1"/> containing the next batch, of <c>null</c> when all data is
                enumerated.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.OrderedEnumerator`1.EnumerateItems">
            <summary>
            Enumerates the items.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.SelectAsyncEnumerator`2">
            <summary>
            Enumerator used by the <see cref="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.Skip``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Int64)"/> method.
            </summary>
            <typeparam name="TSource">
            The type of the source elements.
            </typeparam>
            <typeparam name="TResult">
            The type of the result elements.
            </typeparam>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.SelectAsyncEnumerator`2.asyncEnumerator">
            <summary>
            The enumerator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.SelectAsyncEnumerator`2.state">
            <summary>
            The state.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.SelectAsyncEnumerator`2.transform">
            <summary>
            The transform.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.SelectAsyncEnumerator`2.#ctor(ConnectQl.AsyncEnumerables.IAsyncEnumerable{`0},System.Func{`0,System.Threading.Tasks.Task{`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.SelectAsyncEnumerator`2"/> class.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="transform">
            The transform.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.Enumerators.SelectAsyncEnumerator`2.IsSynchronous">
            <summary>
            Gets a value indicating whether the enumerator is synchronous.
                When <c>false</c>, <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.NextBatchAsync"/> must be called when
                <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.MoveNext"/> returns <c>false</c>.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.SelectAsyncEnumerator`2.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1"/>.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.SelectAsyncEnumerator`2.InitialBatch">
            <summary>
            Gets the initial batch.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.SelectAsyncEnumerator`2.OnNextBatchAsync">
            <summary>
            Gets called when the next batch is needed.
            </summary>
            <returns>
            A task returning an <see cref="T:System.Collections.Generic.IEnumerator`1"/> containing the next batch, of <c>null</c> when all data is
                enumerated.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.SelectAsyncEnumerator`2.EnumerateItem(`1)">
            <summary>
            Enumerates the items for the current batch.
            </summary>
            <param name="item">
            The item.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.SelectEnumerator`2">
            <summary>
            Enumerator used by the <see cref="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.Skip``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Int64)"/> method.
            </summary>
            <typeparam name="TSource">
            The type of the source elements.
            </typeparam>
            <typeparam name="TResult">
            The type of the result elements.
            </typeparam>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.SelectEnumerator`2.asyncEnumerator">
            <summary>
            The enumerator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.SelectEnumerator`2.state">
            <summary>
            The state.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.SelectEnumerator`2.transform">
            <summary>
            The transform.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.SelectEnumerator`2.#ctor(ConnectQl.AsyncEnumerables.IAsyncEnumerable{`0},System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.SelectEnumerator`2"/> class.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="transform">
            The transform.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.Enumerators.SelectEnumerator`2.IsSynchronous">
            <summary>
            Gets a value indicating whether the enumerator is synchronous.
                When <c>false</c>, <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.NextBatchAsync"/> must be called when
                <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.MoveNext"/> returns <c>false</c>.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.SelectEnumerator`2.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1"/>.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.SelectEnumerator`2.InitialBatch">
            <summary>
            Gets the initial batch.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.SelectEnumerator`2.OnNextBatchAsync">
            <summary>
            Gets called when the next batch is needed.
            </summary>
            <returns>
            A task returning an <see cref="T:System.Collections.Generic.IEnumerator`1"/> containing the next batch, of <c>null</c> when all data is
                enumerated.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.SelectEnumerator`2.EnumerateItems">
            <summary>
            Enumerates the items for the current batch.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.SkipEnumerator`1">
            <summary>
            Enumerator used by the <see cref="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.Skip``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Int64)"/> method.
            </summary>
            <typeparam name="TSource">
            The type of the source elements.
            </typeparam>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.SkipEnumerator`1.asyncEnumerator">
            <summary>
            The enumerator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.SkipEnumerator`1.skipCount">
            <summary>
            The skip count.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.SkipEnumerator`1.source">
            <summary>
            The source.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.SkipEnumerator`1.state">
            <summary>
            The state.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.SkipEnumerator`1.#ctor(ConnectQl.AsyncEnumerables.IAsyncEnumerable{`0},System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.SkipEnumerator`1"/> class.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="skipCount">
            The number of items to skip.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.Enumerators.SkipEnumerator`1.IsSynchronous">
            <summary>
            Gets a value indicating whether the enumerator is synchronous.
                When <c>false</c>, <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.NextBatchAsync"/> must be called when
                <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.MoveNext"/> returns <c>false</c>.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.SkipEnumerator`1.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1"/>.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.SkipEnumerator`1.InitialBatch">
            <summary>
            Gets the initial batch.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.SkipEnumerator`1.OnNextBatchAsync">
            <summary>
            Gets called when the next batch is needed.
            </summary>
            <returns>
            A task returning an <see cref="T:System.Collections.Generic.IEnumerator`1"/> containing the next batch, of <c>null</c> when all data is
                enumerated.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.SkipEnumerator`1.EnumerateItems">
            <summary>
            Skips the items until the <see cref="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.SkipEnumerator`1.skipCount"/> is 0.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.SourceKey`2">
            <summary>
            The source key.
            </summary>
            <typeparam name="TSource">
            The type of the source elements.
            </typeparam>
            <typeparam name="TKey">
            The type of the key.
            </typeparam>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.SourceKey`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.SourceKey`2"/> class.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="key">
            The key.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.Enumerators.SourceKey`2.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.Enumerators.SourceKey`2.Source">
            <summary>
            Gets the source.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.TakeEnumerator`1">
            <summary>
            Enumerator used by the
                <see cref="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.Take``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Int64)"/> method.
            </summary>
            <typeparam name="TSource">
            The type of the source elements.
            </typeparam>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.TakeEnumerator`1.asyncEnumerator">
            <summary>
            The enumerator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.TakeEnumerator`1.state">
            <summary>
            The state.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.TakeEnumerator`1.takeCount">
            <summary>
            The skip count.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.TakeEnumerator`1.#ctor(ConnectQl.AsyncEnumerables.IAsyncEnumerable{`0},System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.TakeEnumerator`1"/> class.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="takeCount">
            The number of items to take.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.TakeEnumerator`1.#ctor(ConnectQl.AsyncEnumerables.IAsyncEnumerator{`0},System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.TakeEnumerator`1"/> class.
            </summary>
            <param name="asyncEnumerator">
            The async enumerator.
            </param>
            <param name="takeCount">
            The number of items to take.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.Enumerators.TakeEnumerator`1.IsSynchronous">
            <summary>
            Gets a value indicating whether the enumerator is synchronous.
                When <c>false</c>, <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.NextBatchAsync"/> must be called when
                <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.MoveNext"/> returns <c>false</c>.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.TakeEnumerator`1.Dispose(System.Boolean)">
            <summary>
            Resets all fields to null, and sets the state to 'disposed'.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.TakeEnumerator`1.InitialBatch">
            <summary>
            Gets the initial batch.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.TakeEnumerator`1.OnNextBatchAsync">
            <summary>
            Gets called when the next batch is needed.
            </summary>
            <returns>
            A task returning an <see cref="T:System.Collections.Generic.IEnumerator`1"/> containing the next batch, of <c>null</c> when all data is
                enumerated.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.TakeEnumerator`1.EnumerateItems">
            <summary>
            Enumerates the items until the <see cref="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.TakeEnumerator`1.takeCount"/> is 0.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnequalJoinEnumerator`4">
            <summary>
            The join enumerator.
            </summary>
            <typeparam name="TLeft">
            The type of the left items.
            </typeparam>
            <typeparam name="TRight">
            The type of the right items.
            </typeparam>
            <typeparam name="TKey">
            The type of the keys to join on.
            </typeparam>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnequalJoinEnumerator`4.isLeftJoin">
            <summary>
            The is left join.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnequalJoinEnumerator`4.itemsReturned">
            <summary>
            The items returned.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnequalJoinEnumerator`4.keyComparer">
            <summary>
            The key comparer.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnequalJoinEnumerator`4.left">
            <summary>
            The left.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnequalJoinEnumerator`4.leftEnumerator">
            <summary>
            The left enumerator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnequalJoinEnumerator`4.leftKey">
            <summary>
            The left key.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnequalJoinEnumerator`4.materializedRight">
            <summary>
            The materialized right.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnequalJoinEnumerator`4.resultFilter">
            <summary>
            The result filter.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnequalJoinEnumerator`4.resultSelector">
            <summary>
            The result selector.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnequalJoinEnumerator`4.right">
            <summary>
            The right.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnequalJoinEnumerator`4.rightEnumerator">
            <summary>
            The right enumerator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnequalJoinEnumerator`4.rightKey">
            <summary>
            The right key.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnequalJoinEnumerator`4.state">
            <summary>
            The state.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnequalJoinEnumerator`4.stillEnumerating">
            <summary>
            The still enumerating.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnequalJoinEnumerator`4.#ctor(System.Boolean,ConnectQl.AsyncEnumerables.IAsyncEnumerable{`0},ConnectQl.AsyncEnumerables.IAsyncEnumerable{`1},System.Func{`0,`2},System.Func{`1,`2},System.Func{`0,`1,`3},System.Func{`0,`1,System.Boolean},System.Collections.Generic.IComparer{`2})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnequalJoinEnumerator`4"/> class.
            </summary>
            <param name="isLeftJoin">
            The is left join.
            </param>
            <param name="left">
            The left.
            </param>
            <param name="right">
            The right.
            </param>
            <param name="leftKey">
            The left key.
            </param>
            <param name="rightKey">
            The right key.
            </param>
            <param name="resultSelector">
            The result selector.
            </param>
            <param name="resultFilter">
            The result filter.
            </param>
            <param name="keyComparer">
            The key comparer.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnequalJoinEnumerator`4.IsSynchronous">
            <summary>
            Gets a value indicating whether the enumerator is synchronous.
                When <c>false</c>, <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.NextBatchAsync"/> must be called when
                <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.MoveNext"/> returns <c>false</c>.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnequalJoinEnumerator`4.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1"/>.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnequalJoinEnumerator`4.InitialBatch">
            <summary>
            Gets the initial batch.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnequalJoinEnumerator`4.OnNextBatchAsync">
            <summary>
            Gets called when the next batch is needed.
            </summary>
            <returns>
            A task returning an <see cref="T:System.Collections.Generic.IEnumerator`1"/> containing the next batch, of <c>null</c> when all data is
                enumerated.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnequalJoinEnumerator`4.EnumerateItem(`3)">
            <summary>
            The enumerate item.
            </summary>
            <param name="result">
            The result.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnequalJoinEnumerator`4.EnumerateItems">
            <summary>
            Enumerates the items.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnequalJoinEnumerator`4.ResetRight">
            <summary>
            The reset right.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnionEnumerator`1">
            <summary>
            Enumerator used by the <see cref="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.Skip``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Int64)"/> method.
            </summary>
            <typeparam name="TSource">
            The type of the source elements.
            </typeparam>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnionEnumerator`1.comparer">
            <summary>
            The comparer.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnionEnumerator`1.lastItem">
            <summary>
            The last item.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnionEnumerator`1.lastItemInvalid">
            <summary>
            Indicates whether the last item is invalid.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnionEnumerator`1.left">
            <summary>
            The left.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnionEnumerator`1.leftEnumerator">
            <summary>
            The left enumerator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnionEnumerator`1.right">
            <summary>
            The right.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnionEnumerator`1.rightEnumerator">
            <summary>
            The right enumerator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnionEnumerator`1.state">
            <summary>
            The state.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnionEnumerator`1.#ctor(ConnectQl.AsyncEnumerables.IAsyncEnumerable{`0},ConnectQl.AsyncEnumerables.IAsyncEnumerable{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnionEnumerator`1"/> class.
            </summary>
            <param name="left">
            The left part of the union.
            </param>
            <param name="right">
            The right part of the union.
            </param>
            <param name="comparer">
            The comparer.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnionEnumerator`1.IsSynchronous">
            <summary>
            Gets a value indicating whether the enumerator is synchronous.
                When <c>false</c>, <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.NextBatchAsync"/> must be called when
                <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.MoveNext"/> returns <c>false</c>.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnionEnumerator`1.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1"/>.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnionEnumerator`1.InitialBatch">
            <summary>
            Gets the initial batch.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnionEnumerator`1.OnNextBatchAsync">
            <summary>
            Gets called when the next batch is needed.
            </summary>
            <returns>
            A task returning an <see cref="T:System.Collections.Generic.IEnumerator`1"/> containing the next batch, of <c>null</c> when all data is
                enumerated.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnionEnumerator`1.Enumerate(ConnectQl.AsyncEnumerables.IAsyncEnumerator{`0})">
            <summary>
            Enumerates the enumerator, leaving out duplicate records.
            </summary>
            <param name="enumerator">
            The enumerator.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.UnionEnumerator`1.EnumerateItems">
            <summary>
            Enumerates the items for the current batch.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.ValueBatchesEnumerator`2">
            <summary>
            Enumerator used by the <see cref="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.Batch``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Int64)"/> method.
            </summary>
            <typeparam name="TSource">
            The type of the source elements.
            </typeparam>
            <typeparam name="TValue">
            The type of the values that should be the same in a batch.
            </typeparam>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.ValueBatchesEnumerator`2.batchSize">
            <summary>
            The batch size.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.ValueBatchesEnumerator`2.comparer">
            <summary>
            The comparer.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.ValueBatchesEnumerator`2.valueSelector">
            <summary>
            The value selector.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.ValueBatchesEnumerator`2.enumerator">
            <summary>
            The enumerator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.ValueBatchesEnumerator`2.lastOffset">
            <summary>
            The last offset.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.ValueBatchesEnumerator`2.lastValue">
            <summary>
            The last value.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.ValueBatchesEnumerator`2.materialized">
            <summary>
            The sorted.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.ValueBatchesEnumerator`2.offset">
            <summary>
            The offset.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.ValueBatchesEnumerator`2.policy">
            <summary>
            The policy.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.ValueBatchesEnumerator`2.source">
            <summary>
            The source.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.ValueBatchesEnumerator`2.state">
            <summary>
            The state.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.ValueBatchesEnumerator`2.#ctor(ConnectQl.AsyncEnumerables.IAsyncEnumerable{`0},ConnectQl.AsyncEnumerablePolicies.IMaterializationPolicy,System.Int64,System.Func{`0,`1},System.Collections.Generic.IComparer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.ValueBatchesEnumerator`2"/> class.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="policy">
            The policy.
            </param>
            <param name="batchSize">
            The batch Size.
            </param>
            <param name="valueSelector">
            The value Selector.
            </param>
            <param name="comparer">
            The comparer.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.Enumerators.ValueBatchesEnumerator`2.IsSynchronous">
            <summary>
            Gets a value indicating whether the enumerator is synchronous.
                When <c>false</c>, <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.NextBatchAsync"/> must be called when
                <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.MoveNext"/> returns <c>false</c>.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.ValueBatchesEnumerator`2.Dispose(System.Boolean)">
            <summary>
            Resets all fields to null, and sets the state to 'disposed'.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.ValueBatchesEnumerator`2.InitialBatch">
            <summary>
            Gets the initial batch.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.ValueBatchesEnumerator`2.OnNextBatchAsync">
            <summary>
            Moves to the next batch. Implemented as a state machine.
            </summary>
            <returns>
            <c>true</c> if another batch is available, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.ValueBatchesEnumerator`2.EnumerateItem(ConnectQl.AsyncEnumerables.IAsyncEnumerable{`0})">
            <summary>
            Enumerates the item.
            </summary>
            <param name="batch">
            The batch.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.ValueBatchesEnumerator`2.EnumerateBatches">
            <summary>
            Enumerates the groupings in a batch.
            </summary>
            <returns>
            The groupings.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.WhereEnumerator`1">
            <summary>
            Enumerator used by the <see cref="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.Skip``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Int64)"/> method.
            </summary>
            <typeparam name="TSource">
            The type of the source elements.
            </typeparam>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.WhereEnumerator`1.asyncEnumerator">
            <summary>
            The enumerator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.WhereEnumerator`1.filter">
            <summary>
            The transform.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.WhereEnumerator`1.state">
            <summary>
            The state.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.WhereEnumerator`1.#ctor(ConnectQl.AsyncEnumerables.IAsyncEnumerable{`0},System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.WhereEnumerator`1"/> class.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="filter">
            The filter.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.Enumerators.WhereEnumerator`1.IsSynchronous">
            <summary>
            Gets a value indicating whether the enumerator is synchronous.
                When <c>false</c>, <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.NextBatchAsync"/> must be called when
                <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.MoveNext"/> returns <c>false</c>.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.WhereEnumerator`1.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1"/>.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.WhereEnumerator`1.InitialBatch">
            <summary>
            Gets the initial batch.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.WhereEnumerator`1.OnNextBatchAsync">
            <summary>
            Gets called when the next batch is needed.
            </summary>
            <returns>
            A task returning an <see cref="T:System.Collections.Generic.IEnumerator`1"/> containing the next batch, of <c>null</c> when all data is
                enumerated.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.WhereEnumerator`1.EnumerateItems">
            <summary>
            Enumerates the items for the current batch.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.ZipEnumerator`3">
            <summary>
            Enumerator used by the <see cref="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.Zip``3(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},ConnectQl.AsyncEnumerables.IAsyncEnumerable{``1},System.Func{``0,``1,``2})"/> method.
            </summary>
            <typeparam name="TLeft">
            The type of the left source elements.
            </typeparam>
            <typeparam name="TRight">
            The type of the right source elements.
            </typeparam>
            <typeparam name="TResult">
            The type of the result elements.
            </typeparam>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.ZipEnumerator`3.isZipAll">
            <summary>
            True if we need to return everything, not only elements that can be joined with the rights side.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.ZipEnumerator`3.leftEnumerator">
            <summary>
            The left enumerator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.ZipEnumerator`3.resultSelector">
            <summary>
            The result selector.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.ZipEnumerator`3.rightEnumerator">
            <summary>
            The right enumerator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Enumerators.ZipEnumerator`3.state">
            <summary>
            The state.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.ZipEnumerator`3.#ctor(ConnectQl.AsyncEnumerables.IAsyncEnumerable{`0},ConnectQl.AsyncEnumerables.IAsyncEnumerable{`1},System.Func{`0,`1,`2},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.AsyncEnumerables.Enumerators.ZipEnumerator`3"/> class.
            </summary>
            <param name="left">
            The left part of the union.
            </param>
            <param name="right">
            The right part of the union.
            </param>
            <param name="resultSelector">
            The result Selector.
            </param>
            <param name="isZipAll">
            The is Zip All.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.Enumerators.ZipEnumerator`3.IsSynchronous">
            <summary>
            Gets a value indicating whether the enumerator is synchronous.
                When <c>false</c>, <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.NextBatchAsync"/> must be called when
                <see cref="M:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1.MoveNext"/> returns <c>false</c>.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.ZipEnumerator`3.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1"/>.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.ZipEnumerator`3.InitialBatch">
            <summary>
            Gets the initial batch.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.ZipEnumerator`3.OnNextBatchAsync">
            <summary>
            Gets called when the next batch is needed.
            </summary>
            <returns>
            A task returning an <see cref="T:System.Collections.Generic.IEnumerator`1"/> containing the next batch, of <c>null</c> when all data is
                enumerated.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.ZipEnumerator`3.EnumerateItems(System.Boolean)">
            <summary>
            The enumerate items.
            </summary>
            <param name="rightNeededNewBatch">
            The right needed new batch.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Enumerators.ZipEnumerator`3.EnumerateLeft">
            <summary>
            Enumerates the items in the right <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1"/> and combines them with the left item.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.AsyncEnumerables.AsyncEnumeratorExtensions">
            <summary>
            The async enumerator extensions.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.AsyncEnumeratorExtensions.CurrentBatchToEnumerable``1(ConnectQl.AsyncEnumerables.IAsyncEnumerator{``0})">
            <summary>
            Converts the current batch of the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1"/> to an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="asyncEnumerator">
            The async enumerator.
            </param>
            <typeparam name="T">
            The type of the items.
            </typeparam>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the <paramref name="asyncEnumerator"/> was moved to another batch.
            </exception>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.AsyncEnumeratorExtensions.CurrentBatchToArray``1(ConnectQl.AsyncEnumerables.IAsyncEnumerator{``0})">
            <summary>
            Converts the current batch of the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1"/> to an array.
            </summary>
            <param name="asyncEnumerator">
            The async enumerator.
            </param>
            <typeparam name="T">
            The type of the items.
            </typeparam>
            <returns>
            The array.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.AsyncEnumeratorExtensions.CurrentBatchToEnumerator``1(ConnectQl.AsyncEnumerables.IAsyncEnumerator{``0})">
            <summary>
            Converts the current batch of the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerator`1"/> to an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </summary>
            <param name="asyncEnumerator">
            The async enumerator.
            </param>
            <typeparam name="T">
            The type of the elements.
            </typeparam>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.AsyncEnumerables.AsyncGrouping`2">
            <summary>
            The async grouping.
            </summary>
            <typeparam name="TSource">
            The type of the elements.
            </typeparam>
            <typeparam name="TKey">
            The type of the key.
            </typeparam>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.AsyncGrouping`2.#ctor(`1,ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection{ConnectQl.Internal.AsyncEnumerables.Enumerators.SourceKey{`0,`1}},System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.AsyncEnumerables.AsyncGrouping`2"/> class.
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="items">
            The inner.
            </param>
            <param name="start">
            The offset.
            </param>
            <param name="count">
            The number of inner.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.AsyncGrouping`2.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.AsyncGrouping`2.System#IDisposable#Dispose">
            <summary>
            Disposes the grouping.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.AsyncEnumerables.AsyncGrouping`2.SourceKeyAdapter">
            <summary>
            The source key adapter.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.AsyncGrouping`2.SourceKeyAdapter.inner">
            <summary>
            The inner collection.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.AsyncGrouping`2.SourceKeyAdapter.#ctor(ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection{ConnectQl.Internal.AsyncEnumerables.Enumerators.SourceKey{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.AsyncEnumerables.AsyncGrouping`2.SourceKeyAdapter"/> class.
            </summary>
            <param name="inner">
            The inner collection.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.AsyncGrouping`2.SourceKeyAdapter.Count">
            <summary>
            Gets the number of elements in the enumerable.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.AsyncGrouping`2.SourceKeyAdapter.Policy">
            <summary>
            Gets the materialization policy.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.AsyncGrouping`2.SourceKeyAdapter.GetAsyncEnumerator">
            <summary>
            Gets an enumerator that returns batches of elements.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.AsyncGrouping`2.SourceKeyAdapter.GetAsyncEnumerator(System.Int64)">
            <summary>
            Gets an enumerator that returns batches of elements and starts at the offset.
            </summary>
            <param name="offset">
            The offset.
            </param>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.AsyncGrouping`2.SourceKeyAdapter.System#IDisposable#Dispose">
            <summary>
            Disposes the collection.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.AsyncEnumerables.AsyncGrouping`2.SourceKeyAdapter.EnumeratorWrapper">
            <summary>
            The enumerator wrapper.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.AsyncGrouping`2.SourceKeyAdapter.EnumeratorWrapper.asyncEnumerator">
            <summary>
            The asynchronous enumerator.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.AsyncGrouping`2.SourceKeyAdapter.EnumeratorWrapper.#ctor(ConnectQl.AsyncEnumerables.IAsyncEnumerator{ConnectQl.Internal.AsyncEnumerables.Enumerators.SourceKey{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.AsyncEnumerables.AsyncGrouping`2.SourceKeyAdapter.EnumeratorWrapper"/> class.
            </summary>
            <param name="asyncEnumerator">
            The async enumerator.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.AsyncGrouping`2.SourceKeyAdapter.EnumeratorWrapper.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.AsyncGrouping`2.SourceKeyAdapter.EnumeratorWrapper.IsSynchronous">
            <summary>
            Gets a value indicating whether the enumerator is synchronous.
                When <c>false</c>, <see cref="M:ConnectQl.Internal.AsyncEnumerables.AsyncGrouping`2.SourceKeyAdapter.EnumeratorWrapper.NextBatchAsync"/> must be called when <see cref="M:ConnectQl.Internal.AsyncEnumerables.AsyncGrouping`2.SourceKeyAdapter.EnumeratorWrapper.MoveNext"/> returns <c>false</c>.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.AsyncGrouping`2.SourceKeyAdapter.EnumeratorWrapper.Dispose">
            <summary>
            Disposes the enumerator.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.AsyncGrouping`2.SourceKeyAdapter.EnumeratorWrapper.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; false if the enumerator has passed the
                end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.AsyncGrouping`2.SourceKeyAdapter.EnumeratorWrapper.NextBatchAsync">
            <summary>
            Advances the enumerator to the next batch of elements of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; false if the enumerator has passed the
                end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="T:ConnectQl.Internal.AsyncEnumerables.Batch`1">
            <summary>
            The batch.
            </summary>
            <typeparam name="T">
            The type of the items.
            </typeparam>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Batch`1.materialized">
            <summary>
            Stores the materialized enumerable this enumerable uses.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Batch`1.start">
            <summary>
            Stores the start position of the batch.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Batch`1.#ctor(ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection{`0},System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.AsyncEnumerables.Batch`1"/> class.
            </summary>
            <param name="materialized">
            The materialized.
            </param>
            <param name="start">
            The start.
            </param>
            <param name="count">
            The count.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.Batch`1.Count">
            <summary>
            Gets the number of elements in the enumerable.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.Batch`1.Policy">
            <summary>
            Gets the materialization policy.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Batch`1.ConnectQl#AsyncEnumerables#IAsyncEnumerable{T}#GetAsyncEnumerator">
            <summary>
            Gets an enumerator that returns batches of elements.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Batch`1.ConnectQl#AsyncEnumerables#IAsyncReadOnlyCollection{T}#GetAsyncEnumerator(System.Int64)">
            <summary>
            Gets an enumerator that returns batches of elements and starts at the offset.
            </summary>
            <param name="offset">
            The offset.
            </param>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Batch`1.System#IDisposable#Dispose">
            <summary>
            The dispose.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.AsyncEnumerables.OrderedAsyncEnumerable`1">
            <summary>
            The ordered async enumerable.
            </summary>
            <typeparam name="T">
            The type of the elements.
            </typeparam>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.OrderedAsyncEnumerable`1.comparison">
            <summary>
            The lambda used to compare two items.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.OrderedAsyncEnumerable`1.source">
            <summary>
            The source enumerable.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.OrderedAsyncEnumerable`1.#ctor(ConnectQl.AsyncEnumerables.IAsyncEnumerable{`0},System.Comparison{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.AsyncEnumerables.OrderedAsyncEnumerable`1"/> class.
            </summary>
            <param name="source">
            The async enumerable.
            </param>
            <param name="comparison">
            The compare lambda.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.OrderedAsyncEnumerable`1.Policy">
            <summary>
            Gets the materialization policy.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.OrderedAsyncEnumerable`1.CreateOrderedAsyncEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
            <summary>
            Performs a subsequent ordering on the elements of an <see cref="T:ConnectQl.AsyncEnumerables.IOrderedAsyncEnumerable`1"/> according to a key.
            </summary>
            <typeparam name="TKey">
            The type of the key produced by <paramref name="keySelector"/>.
            </typeparam>
            <param name="keySelector">
            The <see cref="T:System.Func`2"/> used to extract the key for each element.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IComparer`1"/> used to compare keys for placement in the returned sequence.
            </param>
            <param name="descending">
            <c>true</c> to sort the elements in descending order; <c>false</c> to sort the elements in ascending order.
            </param>
            <returns>
            An <see cref="T:ConnectQl.AsyncEnumerables.IOrderedAsyncEnumerable`1"/> whose elements are sorted according to a key.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.OrderedAsyncEnumerable`1.GetAsyncEnumerator">
            <summary>
            Gets an enumerator that returns batches of elements.
            </summary>
            <returns>
            The enumerator.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.AsyncEnumerables.Visualizers.AsyncEnumerableVisualizer`1">
            <summary>
            The async enumerable visualizer.
            </summary>
            <typeparam name="T">
            The type of the elements.
            </typeparam>
        </member>
        <member name="F:ConnectQl.Internal.AsyncEnumerables.Visualizers.AsyncEnumerableVisualizer`1.readOnlyCollection">
            <summary>
            The enumerable.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Visualizers.AsyncEnumerableVisualizer`1.#ctor(ConnectQl.AsyncEnumerables.IAsyncEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.AsyncEnumerables.Visualizers.AsyncEnumerableVisualizer`1"/> class.
            </summary>
            <param name="readOnlyCollection">
            The enumerable.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.Visualizers.AsyncEnumerableVisualizer`1.Values">
            <summary>
            Gets the values.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.AsyncEnumerables.Visualizers.MaterializedAsyncEnumerableVisualizer`1">
            <summary>
            The async enumerable visualizer.
            </summary>
            <typeparam name="T">
            The type of the elements.
            </typeparam>
        </member>
        <member name="M:ConnectQl.Internal.AsyncEnumerables.Visualizers.MaterializedAsyncEnumerableVisualizer`1.#ctor(ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.AsyncEnumerables.Visualizers.MaterializedAsyncEnumerableVisualizer`1"/> class.
            </summary>
            <param name="readOnlyCollection">
            The enumerable.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.Visualizers.MaterializedAsyncEnumerableVisualizer`1.Count">
            <summary>
            Gets the number of elements in the enumerable.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.AsyncEnumerables.Visualizers.MaterializedAsyncEnumerableVisualizer`1.Policy">
            <summary>
            Gets the materialization policy.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.ActionOnDispose">
            <summary>
            The action on dispose.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.ActionOnDispose.action">
            <summary>
            The action.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.ActionOnDispose.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.ActionOnDispose"/> class.
            </summary>
            <param name="action">
            The action.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.ActionOnDispose.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:ConnectQl.Internal.ActionOnDispose"/> class.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.ActionOnDispose.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.ArgumentDescriptor">
            <summary>
            The argument descriptor.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.ArgumentDescriptor.#ctor(System.String,ConnectQl.Internal.TypeDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.ArgumentDescriptor"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="type">
            The type.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.ArgumentDescriptor.Description">
            <summary>
            Gets the description.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.ArgumentDescriptor.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.ArgumentDescriptor.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.ArgumentDescriptor.SetDescription(System.String)">
            <summary>
            The set description.
            </summary>
            <param name="description">
            The description.
            </param>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Expressions.AliasedSqlExpression">
            <summary>
            The aliased expression.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.AliasedSqlExpression.#ctor(ConnectQl.Internal.Ast.Expressions.SqlExpressionBase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Ast.Expressions.AliasedSqlExpression"/> class.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <param name="alias">
            The alias.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Expressions.AliasedSqlExpression.Alias">
            <summary>
            Gets the alias.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Expressions.AliasedSqlExpression.Children">
            <summary>
            Gets the children of this node.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Expressions.AliasedSqlExpression.Expression">
            <summary>
            Gets the expression.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.AliasedSqlExpression.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
            <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.
            </returns>
            <param name="obj">
            The object to compare with the current object.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.AliasedSqlExpression.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>
            A hash code for the current object.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.AliasedSqlExpression.ToString">
            <summary>
            The to string.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.AliasedSqlExpression.Accept(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Dispatches the visitor to the correct visit-method.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.AliasedSqlExpression.VisitChildren(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Visits the children of this node.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Expressions.BinarySqlExpression">
            <summary>
            The binary expression.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.BinarySqlExpression.#ctor(ConnectQl.Internal.Ast.Expressions.SqlExpressionBase,System.String,ConnectQl.Internal.Ast.Expressions.SqlExpressionBase)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Ast.Expressions.BinarySqlExpression"/> class.
            </summary>
            <param name="first">
            The first operand.
            </param>
            <param name="op">
            The operator.
            </param>
            <param name="second">
            The second operand.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Expressions.BinarySqlExpression.Children">
            <summary>
            Gets the children of this node.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Expressions.BinarySqlExpression.First">
            <summary>
            Gets the first operand.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Expressions.BinarySqlExpression.Op">
            <summary>
            Gets the operator.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Expressions.BinarySqlExpression.Second">
            <summary>
            Gets the second operand.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.BinarySqlExpression.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
            <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.
            </returns>
            <param name="obj">
            The object to compare with the current object.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.BinarySqlExpression.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>
            A hash code for the current object.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.BinarySqlExpression.ToString">
            <summary>
            The to string.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.BinarySqlExpression.Accept(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Dispatches the visitor to the correct visit-method.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.BinarySqlExpression.VisitChildren(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Visits the children of this node.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Expressions.ConstSqlExpression">
            <summary>
            The constant.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.ConstSqlExpression.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Ast.Expressions.ConstSqlExpression"/> class.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Expressions.ConstSqlExpression.Children">
            <summary>
            Gets the children.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Expressions.ConstSqlExpression.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.ConstSqlExpression.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
            True if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">
            The object to compare with the current object.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.ConstSqlExpression.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>
            A hash code for the current object.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.ConstSqlExpression.ToString">
            <summary>
            The to string.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.ConstSqlExpression.Accept(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Dispatches the visitor to the correct visit-method.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.ConstSqlExpression.VisitChildren(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Visits the children of this node.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Expressions.FieldReferenceSqlExpression">
            <summary>
            The field reference.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.FieldReferenceSqlExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Ast.Expressions.FieldReferenceSqlExpression"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.FieldReferenceSqlExpression.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Ast.Expressions.FieldReferenceSqlExpression"/> class.
            </summary>
            <param name="source">
            The table.
            </param>
            <param name="name">
            The name.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Expressions.FieldReferenceSqlExpression.Children">
            <summary>
            Gets the children of this node.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Expressions.FieldReferenceSqlExpression.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Expressions.FieldReferenceSqlExpression.Source">
            <summary>
            Gets the table.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.FieldReferenceSqlExpression.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
            True if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">
            The object to compare with the current object.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.FieldReferenceSqlExpression.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>
            A hash code for the current object.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.FieldReferenceSqlExpression.ToString">
            <summary>
            The to string.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.FieldReferenceSqlExpression.Accept(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Dispatches the visitor to the correct visit-method.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.FieldReferenceSqlExpression.VisitChildren(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Visits the children of this node.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Expressions.FunctionCallSqlExpression">
            <summary>
            The function call.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.FunctionCallSqlExpression.#ctor(System.String,System.Collections.ObjectModel.ReadOnlyCollection{ConnectQl.Internal.Ast.Expressions.SqlExpressionBase})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Ast.Expressions.FunctionCallSqlExpression"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="arguments">
            The arguments.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Expressions.FunctionCallSqlExpression.Arguments">
            <summary>
            Gets the arguments.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Expressions.FunctionCallSqlExpression.Children">
            <summary>
            Gets the children of this node.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Expressions.FunctionCallSqlExpression.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.FunctionCallSqlExpression.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
            True if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">
            The object to compare with the current object.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.FunctionCallSqlExpression.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>
            A hash code for the current object.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.FunctionCallSqlExpression.ToString">
            <summary>
            The to string.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.FunctionCallSqlExpression.Accept(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Dispatches the visitor to the correct visit-method.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.FunctionCallSqlExpression.VisitChildren(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Visits the children of this node.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.FunctionCallSqlExpression.Equals(ConnectQl.Internal.Ast.Expressions.FunctionCallSqlExpression)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
            True if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="other">
            The other.
            </param>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Expressions.OrderBySqlExpression">
            <summary>
            The order by.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.OrderBySqlExpression.#ctor(ConnectQl.Internal.Ast.Expressions.SqlExpressionBase,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Ast.Expressions.OrderBySqlExpression"/> class.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <param name="ascending">
            <c>true</c> to sort ascending, <c>false</c> otherwise.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Expressions.OrderBySqlExpression.Ascending">
            <summary>
            Gets a value indicating whether ascending.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Expressions.OrderBySqlExpression.Children">
            <summary>
            Gets the children of this node.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Expressions.OrderBySqlExpression.Expression">
            <summary>
            Gets the expression.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.OrderBySqlExpression.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
            True if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">
            The object to compare with the current object.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.OrderBySqlExpression.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>
            A hash code for the current object.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.OrderBySqlExpression.ToString">
            <summary>
            The to string.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.OrderBySqlExpression.Accept(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Dispatches the visitor to the correct visit-method.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.OrderBySqlExpression.VisitChildren(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Visits the children of this node.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Expressions.SqlExpressionBase">
            <summary>
            Base class for expressions.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Expressions.UnarySqlExpression">
            <summary>
            The unary expression.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.UnarySqlExpression.#ctor(System.String,ConnectQl.Internal.Ast.Expressions.SqlExpressionBase)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Ast.Expressions.UnarySqlExpression"/> class.
            </summary>
            <param name="op">
            The op.
            </param>
            <param name="expression">
            The expression.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Expressions.UnarySqlExpression.Children">
            <summary>
            Gets the children of this node.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Expressions.UnarySqlExpression.Expression">
            <summary>
            Gets the expression.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Expressions.UnarySqlExpression.Op">
            <summary>
            Gets the op.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.UnarySqlExpression.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
            <c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.
            </returns>
            <param name="obj">
            The object to compare with the current object.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.UnarySqlExpression.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>
            A hash code for the current object.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.UnarySqlExpression.ToString">
            <summary>
            The to string.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.UnarySqlExpression.Accept(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Dispatches the visitor to the correct visit-method.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.UnarySqlExpression.VisitChildren(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Visits the children of this node.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Expressions.VariableSqlExpression">
            <summary>
            The variable.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.VariableSqlExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Ast.Expressions.VariableSqlExpression"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Expressions.VariableSqlExpression.Children">
            <summary>
            Gets the children of this node.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Expressions.VariableSqlExpression.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.VariableSqlExpression.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
            True if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">
            The object to compare with the current object.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.VariableSqlExpression.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>
            A hash code for the current object.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.VariableSqlExpression.ToString">
            <summary>
            The to string.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.VariableSqlExpression.Accept(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Dispatches the visitor to the correct visit-method.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.VariableSqlExpression.VisitChildren(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Visits the children of this node.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Expressions.WildcardSqlExpression">
            <summary>
            The wildcard expression.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.WildcardSqlExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Ast.Expressions.WildcardSqlExpression"/> class.
            </summary>
            <param name="source">
            The table.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Expressions.WildcardSqlExpression.Children">
            <summary>
            Gets the children of this node.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Expressions.WildcardSqlExpression.Source">
            <summary>
            Gets the table.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.WildcardSqlExpression.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <returns>
            True if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">
            The object to compare with the current object.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.WildcardSqlExpression.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>
            A hash code for the current object.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.WildcardSqlExpression.ToString">
            <summary>
            The to string.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.WildcardSqlExpression.Accept(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Dispatches the visitor to the correct visit-method.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Expressions.WildcardSqlExpression.VisitChildren(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Visits the children of this node.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Node">
            <summary>
            The node.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Node.Children">
            <summary>
            Gets the children of this node.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Node.Accept(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Dispatches the visitor to the correct visit-method.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Node.VisitChildren(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Visits the children of this node.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Sources.ApplySource">
            <summary>
            The apply source.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Sources.ApplySource.#ctor(ConnectQl.Internal.Ast.Sources.SourceBase,ConnectQl.Internal.Ast.Sources.SourceBase,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Ast.Sources.ApplySource"/> class.
            </summary>
            <param name="left">
            The source.
            </param>
            <param name="right">
            The right.
            </param>
            <param name="isOuterApply">
            <c>true</c> if this is an OUTER APPLY, false if this is a CROSS APPLY.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Sources.ApplySource.Children">
            <summary>
            Gets the children of this node.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Sources.ApplySource.IsOuterApply">
            <summary>
            Gets a value indicating whether this is an OUTER APPLY or a CROSS APPLY.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Sources.ApplySource.Left">
            <summary>
            Gets the left source.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Sources.ApplySource.Right">
            <summary>
            Gets the right source.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Sources.ApplySource.Accept(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Dispatches the visitor to the correct visit-method.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Sources.ApplySource.VisitChildren(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Visits the children of this node.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Sources.FunctionSource">
            <summary>
            The function source.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Sources.FunctionSource.#ctor(ConnectQl.Internal.Ast.Expressions.FunctionCallSqlExpression,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Ast.Sources.FunctionSource"/> class.
            </summary>
            <param name="function">
            The function.
            </param>
            <param name="alias">
            The alias.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Sources.FunctionSource.Alias">
            <summary>
            Gets the alias.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Sources.FunctionSource.Children">
            <summary>
            Gets the children of this node.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Sources.FunctionSource.Function">
            <summary>
            Gets the function expression.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Sources.FunctionSource.Accept(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Dispatches the visitor to the correct visit-method.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Sources.FunctionSource.VisitChildren(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Visits the children of this node.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Sources.JoinSource">
            <summary>
            The inner join source.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Sources.JoinSource.#ctor(ConnectQl.Internal.Ast.Sources.JoinType,ConnectQl.Internal.Ast.Sources.SourceBase,ConnectQl.Internal.Ast.Sources.SourceBase,ConnectQl.Internal.Ast.Expressions.SqlExpressionBase)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Ast.Sources.JoinSource"/> class.
            </summary>
            <param name="joinType">
            The join type.
            </param>
            <param name="first">
            The first.
            </param>
            <param name="second">
            The second.
            </param>
            <param name="expression">
            The expression.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Sources.JoinSource.Children">
            <summary>
            Gets the children.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Sources.JoinSource.Expression">
            <summary>
            Gets the expression.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Sources.JoinSource.First">
            <summary>
            Gets the first joined source.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Sources.JoinSource.JoinType">
            <summary>
            Gets the join type.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Sources.JoinSource.Second">
            <summary>
            Gets the second joined source.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Sources.JoinSource.Accept(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Dispatches the visitor to the correct visit-method.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Sources.JoinSource.VisitChildren(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Visits the children of this node.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Sources.JoinType">
            <summary>
            The join type.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Ast.Sources.JoinType.Inner">
            <summary>
            The inner.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Ast.Sources.JoinType.Left">
            <summary>
            The left.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Ast.Sources.JoinType.SequentialInner">
            <summary>
            The sequential inner join.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Ast.Sources.JoinType.SequentialLeft">
            <summary>
            The sequential left join.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Ast.Sources.JoinType.NearestInner">
            <summary>
            The nearest inner join.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Ast.Sources.JoinType.NearestLeft">
            <summary>
            The nearest left join.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Ast.Sources.JoinType.Cross">
            <summary>
            The cross.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Sources.SelectSource">
            <summary>
            The select source.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Sources.SelectSource.#ctor(ConnectQl.Internal.Ast.Statements.SelectStatement,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Ast.Sources.SelectSource"/> class.
            </summary>
            <param name="select">
            The select.
            </param>
            <param name="alias">
            The alias.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Sources.SelectSource.Alias">
            <summary>
            Gets the alias.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Sources.SelectSource.Children">
            <summary>
            Gets the children of this node.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Sources.SelectSource.Select">
            <summary>
            Gets the select.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Sources.SelectSource.Accept(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Dispatches the visitor to the correct visit-method.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Sources.SelectSource.VisitChildren(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Visits the children of this node.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Sources.SourceBase">
            <summary>
            The source.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Sources.VariableSource">
            <summary>
            The function source.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Sources.VariableSource.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Ast.Sources.VariableSource"/> class.
            </summary>
            <param name="variable">
            The variable.
            </param>
            <param name="alias">
            The alias.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Sources.VariableSource.Alias">
            <summary>
            Gets the alias.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Sources.VariableSource.Children">
            <summary>
            Gets the children of this node.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Sources.VariableSource.Variable">
            <summary>
            Gets the function expression.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Sources.VariableSource.Accept(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Dispatches the visitor to the correct visit-method.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Sources.VariableSource.VisitChildren(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Visits the children of this node.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Statements.Block">
            <summary>
            The script.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Statements.Block.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{ConnectQl.Internal.Ast.Statements.StatementBase})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Ast.Statements.Block"/> class.
            </summary>
            <param name="statements">
            The statements.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Statements.Block.Children">
            <summary>
            Gets the children.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Statements.Block.Statements">
            <summary>
            Gets the statements.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Statements.Block.Accept(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Dispatches the visitor to the correct visit-method.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Statements.Block.VisitChildren(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Visits the children of this node.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Statements.DeclareJobStatement">
            <summary>
            The declare job statement.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Statements.DeclareJobStatement.#ctor(System.String,System.Collections.ObjectModel.ReadOnlyCollection{ConnectQl.Internal.Ast.Statements.StatementBase},System.Collections.ObjectModel.ReadOnlyCollection{ConnectQl.Internal.Ast.Trigger})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Ast.Statements.DeclareJobStatement"/> class.
            </summary>
            <param name="name">
            The job Uri.
            </param>
            <param name="statements">
            The statements.
            </param>
            <param name="triggers">
            The triggers.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Statements.DeclareJobStatement.Children">
            <summary>
            Gets the children.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Statements.DeclareJobStatement.Name">
            <summary>
            Gets the job name.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Statements.DeclareJobStatement.Statements">
            <summary>
            Gets the statements.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Statements.DeclareJobStatement.Triggers">
            <summary>
            Gets the triggers.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Statements.DeclareJobStatement.Accept(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Dispatches the visitor to the correct visit-method.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Statements.DeclareJobStatement.VisitChildren(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Visits the children of this node.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Statements.DeclareStatement">
            <summary>
            The declare statement.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Statements.DeclareStatement.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{ConnectQl.Internal.Ast.VariableDeclaration})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Ast.Statements.DeclareStatement"/> class.
            </summary>
            <param name="declarations">
            The declarations.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Statements.DeclareStatement.Children">
            <summary>
            Gets the children of this node.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Statements.DeclareStatement.Declarations">
            <summary>
            Gets the declarations.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Statements.DeclareStatement.Accept(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Dispatches the visitor to the correct visit-method.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Statements.DeclareStatement.VisitChildren(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Visits the children of this node.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Statements.ImportPluginStatement">
            <summary>
            The import assembly statement.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Statements.ImportPluginStatement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Ast.Statements.ImportPluginStatement"/> class.
            </summary>
            <param name="plugin">
            The plugin.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Statements.ImportPluginStatement.Children">
            <summary>
            Gets the children of this node.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Statements.ImportPluginStatement.Plugin">
            <summary>
            Gets the plugin.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Statements.ImportPluginStatement.Accept(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Dispatches the visitor to the correct visit-method.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Statements.ImportPluginStatement.VisitChildren(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Visits the children of this node.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Statements.ImportStatement">
            <summary>
            The import statement.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Statements.ImportStatement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Ast.Statements.ImportStatement"/> class.
            </summary>
            <param name="uri">
            The uri.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Statements.ImportStatement.Children">
            <summary>
            Gets the children of this node.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Statements.ImportStatement.Uri">
            <summary>
            Gets the uri.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Statements.ImportStatement.Accept(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Dispatches the visitor to the correct visit-method.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Statements.ImportStatement.VisitChildren(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Visits the children of this node.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Statements.InsertStatement">
            <summary>
            The insert statement.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Statements.InsertStatement.#ctor(ConnectQl.Internal.Ast.Targets.TargetBase,System.Boolean,ConnectQl.Internal.Ast.Statements.SelectStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Ast.Statements.InsertStatement"/> class.
            </summary>
            <param name="target">
            The target.
            </param>
            <param name="upsert">
            True if this is an upsert statement.
            </param>
            <param name="select">
            The select.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Statements.InsertStatement.Children">
            <summary>
            Gets the children.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Statements.InsertStatement.Select">
            <summary>
            Gets or sets the select.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Statements.InsertStatement.Target">
            <summary>
            Gets the target.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Statements.InsertStatement.Upsert">
            <summary>
            Gets a value indicating whether this is an upsert statement.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Statements.InsertStatement.Accept(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Dispatches the visitor to the correct visit-method.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Statements.InsertStatement.VisitChildren(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Visits the children of this node.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Statements.SelectFromStatement">
            <summary>
            The select from statement.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Statements.SelectFromStatement.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{ConnectQl.Internal.Ast.Expressions.AliasedSqlExpression},ConnectQl.Internal.Ast.Sources.SourceBase,ConnectQl.Internal.Ast.Expressions.SqlExpressionBase,System.Collections.ObjectModel.ReadOnlyCollection{ConnectQl.Internal.Ast.Expressions.SqlExpressionBase},ConnectQl.Internal.Ast.Expressions.SqlExpressionBase,System.Collections.ObjectModel.ReadOnlyCollection{ConnectQl.Internal.Ast.Expressions.OrderBySqlExpression})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Ast.Statements.SelectFromStatement"/> class.
            </summary>
            <param name="expressions">
            The expressions.
            </param>
            <param name="source">
            The source.
            </param>
            <param name="where">
            The where.
            </param>
            <param name="groupings">
            The groupings.
            </param>
            <param name="having">
            The having.
            </param>
            <param name="orders">
            The orders.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Statements.SelectFromStatement.Children">
            <summary>
            Gets the children of this node.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Statements.SelectFromStatement.Expressions">
            <summary>
            Gets the expressions.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Statements.SelectFromStatement.Groupings">
            <summary>
            Gets the groupings.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Statements.SelectFromStatement.Having">
            <summary>
            Gets the having.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Statements.SelectFromStatement.Orders">
            <summary>
            Gets the orders.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Statements.SelectFromStatement.Source">
            <summary>
            Gets the sources.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Statements.SelectFromStatement.Where">
            <summary>
            Gets the where.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Statements.SelectFromStatement.Accept(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Dispatches the visitor to the correct visit-method.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Statements.SelectFromStatement.VisitChildren(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Visits the children of this node.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Statements.SelectStatement">
            <summary>
            The select statement.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Statements.SelectUnionStatement">
            <summary>
            The select union statement.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Statements.SelectUnionStatement.#ctor(ConnectQl.Internal.Ast.Statements.SelectStatement,ConnectQl.Internal.Ast.Statements.SelectStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Ast.Statements.SelectUnionStatement"/> class.
            </summary>
            <param name="first">
            The first.
            </param>
            <param name="second">
            The second.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Statements.SelectUnionStatement.Children">
            <summary>
            Gets the children.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Statements.SelectUnionStatement.First">
            <summary>
            Gets the first.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Statements.SelectUnionStatement.Second">
            <summary>
            Gets the second.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Statements.SelectUnionStatement.Accept(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Dispatches the visitor to the correct visit-method.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Statements.SelectUnionStatement.VisitChildren(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Visits the children of this node.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Statements.StatementBase">
            <summary>
            The statement.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Statements.TriggerStatement">
            <summary>
            The trigger statement.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Statements.TriggerStatement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Ast.Statements.TriggerStatement"/> class.
            </summary>
            <param name="jobName">
            The job name.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Statements.TriggerStatement.Children">
            <summary>
            Gets the children.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Statements.TriggerStatement.JobName">
            <summary>
            Gets the job name.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Statements.TriggerStatement.Accept(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Dispatches the visitor to the correct visit-method.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Statements.TriggerStatement.VisitChildren(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Visits the children of this node.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Statements.UseStatement">
            <summary>
            The use statement.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Statements.UseStatement.#ctor(ConnectQl.Internal.Ast.Expressions.FunctionCallSqlExpression,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Ast.Statements.UseStatement"/> class.
            </summary>
            <param name="settingFunction">
            The expression.
            </param>
            <param name="functionName">
            The function Uri.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Statements.UseStatement.Children">
            <summary>
            Gets the children.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Statements.UseStatement.FunctionName">
            <summary>
            Gets the function name.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Statements.UseStatement.SettingFunction">
            <summary>
            Gets the expression.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Statements.UseStatement.Accept(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Dispatches the visitor to the correct visit-method.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Statements.UseStatement.VisitChildren(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Visits the children of this node.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Targets.FunctionTarget">
            <summary>
            The target.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Targets.FunctionTarget.#ctor(ConnectQl.Internal.Ast.Expressions.FunctionCallSqlExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Ast.Targets.FunctionTarget"/> class.
            </summary>
            <param name="function">
            The function.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Targets.FunctionTarget.Children">
            <summary>
            Gets the children of this node.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Targets.FunctionTarget.Function">
            <summary>
            Gets the function.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Targets.FunctionTarget.Accept(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Dispatches the visitor to the correct visit-method.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Targets.FunctionTarget.VisitChildren(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Visits the children of this node.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Targets.TargetBase">
            <summary>
            The target base.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Targets.VariableTarget">
            <summary>
            The target.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Targets.VariableTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Ast.Targets.VariableTarget"/> class.
            </summary>
            <param name="variable">
            The variable.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Targets.VariableTarget.Children">
            <summary>
            Gets the children of this node.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Targets.VariableTarget.Variable">
            <summary>
            Gets the function.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Targets.VariableTarget.Accept(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Dispatches the visitor to the correct visit-method.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Targets.VariableTarget.VisitChildren(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Visits the children of this node.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Trigger">
            <summary>
            The trigger.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Trigger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Ast.Trigger"/> class.
            </summary>
            <param name="after">
            The after.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Trigger.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Ast.Trigger"/> class.
            </summary>
            <param name="interval">
            The interval.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Trigger.#ctor(ConnectQl.Internal.Ast.Expressions.FunctionCallSqlExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Ast.Trigger"/> class.
            </summary>
            <param name="function">
            The function.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Trigger.Children">
            <summary>
            Gets the children of this node.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.Trigger.Function">
            <summary>
            Gets the function.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Trigger.Accept(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Dispatches the visitor to the correct visit-method.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Trigger.VisitChildren(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Visits the children of this node.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Ast.VariableDeclaration">
            <summary>
            The variable declaration.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.VariableDeclaration.#ctor(System.String,ConnectQl.Internal.Ast.Expressions.SqlExpressionBase)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Ast.VariableDeclaration"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="expression">
            The expression.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Ast.VariableDeclaration.Children">
            <summary>
            Gets the children of this node.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.VariableDeclaration.Expression">
            <summary>
            Gets the expression.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Ast.VariableDeclaration.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.VariableDeclaration.Accept(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Dispatches the visitor to the correct visit-method.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.VariableDeclaration.VisitChildren(ConnectQl.Internal.Ast.Visitors.NodeVisitor)">
            <summary>
            Visits the children of this node.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Ast.Visitors.NodeVisitor">
            <summary>
            The node visitor.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Visitors.NodeVisitor.Visit``1(``0)">
            <summary>
            Visits the node and ensures the result is of type <typeparamref name="T"/>. When node is <c>null</c>, returns
                <c>null</c>.
            </summary>
            <typeparam name="T">
            The type of the result.
            </typeparam>
            <param name="node">
            The node.
            </param>
            <returns>
            The <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Visitors.NodeVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0})">
            <summary>
            Visits a collection of nodes.
            </summary>
            <param name="list">
            The list to visit.
            </param>
            <typeparam name="T">
            The type of the nodes.
            </typeparam>
            <returns>
            The list, or a copy of the list if any of the elements was changed.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown when a visitor doesn't return the correct type.
            </exception>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Visitors.NodeVisitor.VisitAliasedSqlExpression(ConnectQl.Internal.Ast.Expressions.AliasedSqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.AliasedSqlExpression"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Visitors.NodeVisitor.VisitApplySource(ConnectQl.Internal.Ast.Sources.ApplySource)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Sources.ApplySource"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Visitors.NodeVisitor.VisitBinarySqlExpression(ConnectQl.Internal.Ast.Expressions.BinarySqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.BinarySqlExpression"/> expression.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Visitors.NodeVisitor.VisitBlock(ConnectQl.Internal.Ast.Statements.Block)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Statements.Block"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Visitors.NodeVisitor.VisitConstSqlExpression(ConnectQl.Internal.Ast.Expressions.ConstSqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.ConstSqlExpression"/> expression.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Visitors.NodeVisitor.VisitDeclareJobStatement(ConnectQl.Internal.Ast.Statements.DeclareJobStatement)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Statements.DeclareJobStatement"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Visitors.NodeVisitor.VisitDeclareStatement(ConnectQl.Internal.Ast.Statements.DeclareStatement)">
            <summary>
            Visits a declare statement.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Visitors.NodeVisitor.VisitFieldReferenceSqlExpression(ConnectQl.Internal.Ast.Expressions.FieldReferenceSqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.FieldReferenceSqlExpression"/> expression.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Visitors.NodeVisitor.VisitFunctionCallSqlExpression(ConnectQl.Internal.Ast.Expressions.FunctionCallSqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.FunctionCallSqlExpression"/> expression.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Visitors.NodeVisitor.VisitFunctionSource(ConnectQl.Internal.Ast.Sources.FunctionSource)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Sources.FunctionSource"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Visitors.NodeVisitor.VisitFunctionTarget(ConnectQl.Internal.Ast.Targets.FunctionTarget)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Targets.FunctionTarget"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Visitors.NodeVisitor.VisitImportPluginStatement(ConnectQl.Internal.Ast.Statements.ImportPluginStatement)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Statements.ImportPluginStatement"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Visitors.NodeVisitor.VisitImportStatement(ConnectQl.Internal.Ast.Statements.ImportStatement)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Statements.ImportStatement"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Visitors.NodeVisitor.VisitInsertStatement(ConnectQl.Internal.Ast.Statements.InsertStatement)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Statements.InsertStatement"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Visitors.NodeVisitor.VisitJoinSource(ConnectQl.Internal.Ast.Sources.JoinSource)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Sources.JoinSource"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Visitors.NodeVisitor.VisitOrderBySqlExpression(ConnectQl.Internal.Ast.Expressions.OrderBySqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.OrderBySqlExpression"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Visitors.NodeVisitor.VisitSelectFromStatement(ConnectQl.Internal.Ast.Statements.SelectFromStatement)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Statements.SelectFromStatement"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Visitors.NodeVisitor.VisitSelectSource(ConnectQl.Internal.Ast.Sources.SelectSource)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Sources.SelectSource"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Visitors.NodeVisitor.VisitSelectUnionStatement(ConnectQl.Internal.Ast.Statements.SelectUnionStatement)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Statements.SelectUnionStatement"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Visitors.NodeVisitor.VisitTrigger(ConnectQl.Internal.Ast.Trigger)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Trigger"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Visitors.NodeVisitor.VisitTriggerStatement(ConnectQl.Internal.Ast.Statements.TriggerStatement)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Statements.TriggerStatement"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Visitors.NodeVisitor.VisitUnarySqlExpression(ConnectQl.Internal.Ast.Expressions.UnarySqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.UnarySqlExpression"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Visitors.NodeVisitor.VisitUseStatement(ConnectQl.Internal.Ast.Statements.UseStatement)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Statements.UseStatement"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Visitors.NodeVisitor.VisitVariableDeclaration(ConnectQl.Internal.Ast.VariableDeclaration)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.VariableDeclaration"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Visitors.NodeVisitor.VisitVariableSource(ConnectQl.Internal.Ast.Sources.VariableSource)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Sources.VariableSource"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Visitors.NodeVisitor.VisitVariableSqlExpression(ConnectQl.Internal.Ast.Expressions.VariableSqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.VariableSqlExpression"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Visitors.NodeVisitor.VisitVariableTarget(ConnectQl.Internal.Ast.Targets.VariableTarget)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Targets.VariableTarget"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Ast.Visitors.NodeVisitor.VisitWildCardSqlExpression(ConnectQl.Internal.Ast.Expressions.WildcardSqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.WildcardSqlExpression"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.ColumnDescriptor">
            <summary>
            The column descriptor.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.ColumnDescriptor.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.ColumnDescriptor"/> class.
            </summary>
            <param name="type">
            The type.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="description">
            The description.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.ColumnDescriptor.Description">
            <summary>
            Gets the description.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.ColumnDescriptor.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.ColumnDescriptor.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.Comparers.ArrayOfObjectComparer">
            <summary>
            The array of object comparer.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Comparers.ArrayOfObjectComparer.Default">
            <summary>
            The default comparer.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Comparers.ArrayOfObjectComparer.Comparer">
            <summary>
            The comparer.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Comparers.ArrayOfObjectComparer.Compare(System.Object[],System.Object[])">
            <summary>
            The compare.
            </summary>
            <param name="x">
            The x.
            </param>
            <param name="y">
            The y.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Comparers.ExpressionComparer">
            <summary>
            The expression comparer.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Comparers.ExpressionComparer.Default">
            <summary>
            The default.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Comparers.ExpressionComparer.ignoreVariableNames">
            <summary>
            The ignore variable names.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Comparers.ExpressionComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Comparers.ExpressionComparer"/> class.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Comparers.ExpressionComparer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Comparers.ExpressionComparer"/> class.
            </summary>
            <param name="ignoreVariableNames">
            The ignore variable names.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Comparers.ExpressionComparer.Equals(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            The equals.
            </summary>
            <param name="x">
            The x.
            </param>
            <param name="y">
            The y.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Comparers.ExpressionComparer.GetHashCode(System.Linq.Expressions.Expression)">
            <summary>
            The get hash code.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Comparers.ExpressionComparer.Compare``1(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Func{``0,``0,System.Boolean})">
            <summary>
            The compare.
            </summary>
            <param name="x">
            The x.
            </param>
            <param name="y">
            The y.
            </param>
            <param name="comparison">
            The comparison.
            </param>
            <typeparam name="T">
            The type of the items to compare.
            </typeparam>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Comparers.MostSpecificComparer">
            <summary>
            Uses to sort comparers to get the most specific comparer first.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Comparers.MostSpecificComparer.Default">
            <summary>
            The default.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Comparers.MostSpecificComparer.Compare(ConnectQl.Expressions.CompareExpression,ConnectQl.Expressions.CompareExpression)">
            <summary>
            Compares the two <see cref="T:ConnectQl.Expressions.CompareExpression"/>s.
            </summary>
            <param name="x">
            The first expression.
            </param>
            <param name="y">
            The second expression.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Comparers.MostSpecificComparer.SortOrder(ConnectQl.Expressions.CompareExpression)">
            <summary>
            Converts a <see cref="T:ConnectQl.Expressions.CompareExpression"/> to a sort order.
            </summary>
            <param name="x">
            The expression.
            </param>
            <returns>
            The sort order.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Comparers.ReferenceEqualityComparer`1">
            <summary>
            A generic object comparerer that would only use object's reference,
                ignoring any <see cref="T:System.IEquatable`1"/> or <see cref="M:System.Object.Equals(System.Object)"/>  overrides.
            </summary>
            <typeparam name="T">
            The type of the items to compare.
            </typeparam>
        </member>
        <member name="F:ConnectQl.Internal.Comparers.ReferenceEqualityComparer`1.Default">
            <summary>
            The default comparer.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Comparers.ReferenceEqualityComparer`1.Equals(`0,`0)">
            <summary>
            The equals.
            </summary>
            <param name="x">
            The x.
            </param>
            <param name="y">
            The y.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Comparers.ReferenceEqualityComparer`1.GetHashCode(`0)">
            <summary>
            The get hash code.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Comparers.RowIdComparer">
            <summary>
            The row comparer.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Comparers.RowIdComparer.Default">
            <summary>
            The default.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Comparers.RowIdComparer.Compare(ConnectQl.Results.Row,ConnectQl.Results.Row)">
            <summary>
            Compares two rows using their unique id's.
            </summary>
            <param name="x">
            The first row.
            </param>
            <param name="y">
            The second row.
            </param>
            <returns>
            Returns a negative number if x is less than y, zero if they are equal, and a positive number if x is greater than
                y.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Comparers.RowUniqueIdComparer">
            <summary>
            The row unique id comparer.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Comparers.RowUniqueIdComparer.Default">
            <summary>
            The default.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Comparers.RowUniqueIdComparer.Compare(ConnectQl.Results.Row,ConnectQl.Results.Row)">
            <summary>
            The compare.
            </summary>
            <param name="x">
            The x.
            </param>
            <param name="y">
            The y.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Comparers.RowUniqueIdComparer.Equals(ConnectQl.Results.Row,ConnectQl.Results.Row)">
            <summary>
            The equals.
            </summary>
            <param name="x">
            The x.
            </param>
            <param name="y">
            The y.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Comparers.RowUniqueIdComparer.GetHashCode(ConnectQl.Results.Row)">
            <summary>
            The get hash code.
            </summary>
            <param name="obj">
            The object.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.ConnectQlFunctions">
            <summary>
            The ConnectQl functions.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.ConnectQlFunctions.dictionary">
            <summary>
            The dictionary.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.ConnectQlFunctions.logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.ConnectQlFunctions.#ctor(System.Collections.Generic.Dictionary{System.String,ConnectQl.Interfaces.IFunctionDescriptor},System.Func{ConnectQl.Interfaces.ILog})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.ConnectQlFunctions"/> class.
            </summary>
            <param name="dictionary">
            The dictionary.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.ConnectQlFunctions.Log">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.ConnectQlFunctions.ConnectQl#Internal#Interfaces#IFunctionDictionary#Dictionary">
            <summary>
            Gets the dictionary.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.ConnectQlFunctions.AddFunction(System.String,ConnectQl.Interfaces.IFunctionDescriptor)">
            <summary>
            Adds a key/value pair of key'1 =&gt; function to the dictionary.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="function">
            The function.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown when a lambda with the specified number of parameters is already in the dictionary.
            </exception>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.DataSourceDescriptor">
            <summary>
            Describes a data source.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.DataSourceDescriptor.#ctor(System.String,System.Collections.Generic.IEnumerable{ConnectQl.Interfaces.IColumnDescriptor},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.DataSourceDescriptor"/> class.
            </summary>
            <param name="alias">
            The alias.
            </param>
            <param name="columns">
            The columns.
            </param>
            <param name="allowsAnyColumnName">
            The allows any column name.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.DataSourceDescriptor.Alias">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.DataSourceDescriptor.AllowsAnyColumnName">
            <summary>
            Gets a value indicating whether the data source allows any column name, or only the columns returned by
                <see cref="P:ConnectQl.Internal.DataSourceDescriptor.Columns"/>.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.DataSourceDescriptor.Columns">
            <summary>
            Gets the columns for this data source.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.DataSources.DataSource">
            <summary>
            The data source.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.DataSource.#ctor(System.Collections.Generic.HashSet{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.DataSources.DataSource"/> class.
            </summary>
            <param name="aliases">
            The aliases.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.DataSources.DataSource.Aliases">
            <summary>
            Gets the aliases for this data source.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.DataSource.GetDataParts(ConnectQl.Interfaces.IExecutionContext,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{ConnectQl.Internal.Query.OrderByExpression},System.Func{System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{ConnectQl.Internal.Query.OrderByExpression},ConnectQl.AsyncEnumerables.IAsyncEnumerable{ConnectQl.Results.Row}})">
            <summary>
            When a query contains Or/OrElse, we retrieve the results for each part and UNION the result.
            </summary>
            <param name="context">
            The execution context.
            </param>
            <param name="filter">
            The filter to split into Or/OrElse parts.
            </param>
            <param name="orderByExpressions">
            When the parts are UNIONed, they need to be resorted by these expressions. This only happens if the filter contains
                Or/OrElse expressions.
            </param>
            <param name="retrieveSubQuery">
            A function that retrieves the data from a data source.
            </param>
            <returns>
            A data set containing the UNION of all parts.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.DataSource.GetRows(ConnectQl.Internal.Interfaces.IInternalExecutionContext,ConnectQl.Internal.Interfaces.IMultiPartQuery)">
            <summary>
            The get data async.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.DataSource.GetDataSourceDescriptorsAsync(ConnectQl.Interfaces.IExecutionContext)">
            <summary>
            Gets the descriptors for this data source.
            </summary>
            <param name="context">
            The execution context.
            </param>
            <returns>
            All data sources inside this data source.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.DataSources.DataTarget">
            <summary>
            The data target.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.DataSources.DataTarget.target">
            <summary>
            The target.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.DataTarget.#ctor(ConnectQl.Interfaces.IDataTarget)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.DataSources.DataTarget"/> class.
            </summary>
            <param name="target">
            The target.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.DataTarget.WriteRowsAsync(ConnectQl.Internal.Interfaces.IInternalExecutionContext,ConnectQl.AsyncEnumerables.IAsyncEnumerable{ConnectQl.Results.Row},System.Boolean)">
            <summary>
            The write rows async.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="rows">
            The rows.
            </param>
            <param name="upsert">
            The upsert.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.DataSources.DCastFunction">
            <summary>
            The DCAST function.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.DataSources.DCastFunction.First">
            <summary>
            Gets the first value in case of duplicates.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.DataSources.DCastFunction.Last">
            <summary>
            Gets the last value in case of duplicates
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.DataSources.DCastFunction.Min">
            <summary>
            Gets the minimum value in case of duplicates
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.DataSources.DCastFunction.Max">
            <summary>
            Gets the maximum value in case of duplicates
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.DataSources.DCastFunction.Avg">
            <summary>
            Gets the average value in case of duplicates
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.DataSources.DCastFunction.Concat">
            <summary>
            Concatenates all values.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.DataSources.DCast">
            <summary>
            The d cast.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.DataSources.DCast.columnName">
            <summary>
            The column name.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.DataSources.DCast.columnValue">
            <summary>
            The column value.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.DataSources.DCast.source">
            <summary>
            The source.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.DCast.#ctor(ConnectQl.AsyncEnumerables.IAsyncEnumerable{ConnectQl.Results.Row},System.String,System.String,ConnectQl.Internal.DataSources.DCastFunction)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.DataSources.DCast"/> class.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="columnName">
            The column name.
            </param>
            <param name="columnValue">
            The column value.
            </param>
            <param name="function">
            The function.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.DCast.GetRows(ConnectQl.Interfaces.IExecutionContext,ConnectQl.Interfaces.IRowBuilder,ConnectQl.Interfaces.IQuery)">
            <summary>
                Retrieves the data from the source as an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1" />.
            </summary>
            <param name="context">
                The context.
            </param>
            <param name="rowBuilder">
                The row builder.
            </param>
            <param name="query">
                The query expression. Can be <c>null</c>.
            </param>
            <returns>
                A task returning the data set.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.DCast.ToDouble(System.Object)">
            <summary>
            Converts the value to a double.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.Nullable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.DCast.GetRowsAsync(ConnectQl.Interfaces.IExecutionContext,ConnectQl.Interfaces.IRowBuilder)">
            <summary>
                Gets the rows asynchronously.
            </summary>
            <param name="context">
                The context.
            </param>
            <param name="rowBuilder">
                The row builder.
            </param>
            <returns>
                The <see cref="T:System.Threading.Tasks.Task" />.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.DataSources.ExternalDataSource">
            <summary>
            The external data source.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.DataSources.ExternalDataSource.alias">
            <summary>
            The alias.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.DataSources.ExternalDataSource.dataSource">
            <summary>
            The data source.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.ExternalDataSource.#ctor(ConnectQl.Interfaces.IDataSource,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.DataSources.ExternalDataSource"/> class.
            </summary>
            <param name="dataSource">
            The data source.
            </param>
            <param name="aliases">
            The aliases.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.ExternalDataSource.GetRows(ConnectQl.Internal.Interfaces.IInternalExecutionContext,ConnectQl.Internal.Interfaces.IMultiPartQuery)">
            <summary>
            The get rows.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="multiPartQuery">
            The multi-part query.
            </param>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.ExternalDataSource.GetDataSourceDescriptorsAsync(ConnectQl.Interfaces.IExecutionContext)">
            <summary>
            Gets the descriptors for this data source.
            </summary>
            <param name="context">
            The execution context.
            </param>
            <returns>
            All data sources inside this data source.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.DataSources.Joins.ApplyBase">
            <summary>
            The base class for CROSS APPLY and OUTER APPLY.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.DataSources.Joins.ApplyBase.extraFields">
            <summary>
            Gets the extra fields.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.DataSources.Joins.ApplyBase.left">
            <summary>
            Gets the left.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.DataSources.Joins.ApplyBase.right">
            <summary>
            Gets the right.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.ApplyBase.#ctor(ConnectQl.Internal.DataSources.DataSource,ConnectQl.Internal.DataSources.DataSource,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.DataSources.Joins.ApplyBase"/> class.
            </summary>
            <param name="left">
            The left.
            </param>
            <param name="right">
            The right.
            </param>
            <param name="rightFactory">
            The right Factory.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.DataSources.Joins.ApplyBase.RightFactory">
            <summary>
            Gets the right factory.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.ApplyBase.GetRows(ConnectQl.Internal.Interfaces.IInternalExecutionContext,ConnectQl.Internal.Interfaces.IMultiPartQuery)">
            <summary>
            Gets the rows for the join.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="multiPartQuery">
            The multi part query.
            </param>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.ApplyBase.GetDataSourceDescriptorsAsync(ConnectQl.Interfaces.IExecutionContext)">
            <summary>
            Gets the descriptors for this data source.
            </summary>
            <param name="context">
            The execution context.
            </param>
            <returns>
            All data sources inside this data source.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.ApplyBase.CombineResults(ConnectQl.Internal.Interfaces.IInternalExecutionContext,ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection{ConnectQl.Results.Row},ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection{ConnectQl.Results.Row},ConnectQl.Internal.DataSources.Joins.MultiPartQuery,ConnectQl.Internal.Results.RowBuilder)">
            <summary>
            Combines the left and right result sets.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="leftData">
            The left result set.
            </param>
            <param name="rightData">
            The right result set.
            </param>
            <param name="rightQuery">
            The query for the right side.
            </param>
            <param name="rowBuilder">
            The row builder.
            </param>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.ApplyBase.RangesToJoinFilter(System.Linq.Expressions.Expression)">
            <summary>
            The ranges to join filter.
            </summary>
            <param name="filter">
            The filter.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.ApplyBase.FindRangesAsync(ConnectQl.Interfaces.IExecutionContext,System.Linq.Expressions.Expression,ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection{ConnectQl.Results.Row})">
            <summary>
            Finds the ranges in an expression using the already retrieved rows.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="expression">
            The expression.
            </param>
            <param name="rows">
            The rows.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> returning the <see cref="T:System.Linq.Expressions.Expression"/> containing ranges.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.DataSources.Joins.CrossApply">
            <summary>
            The cross apply.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.CrossApply.#ctor(ConnectQl.Internal.DataSources.DataSource,ConnectQl.Internal.DataSources.DataSource,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.DataSources.Joins.CrossApply"/> class.
            </summary>
            <param name="left">
            The left data source.
            </param>
            <param name="right">
            The right data source.
            </param>
            <param name="rightFactory">
            The right factory.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.CrossApply.CombineResults(ConnectQl.Internal.Interfaces.IInternalExecutionContext,ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection{ConnectQl.Results.Row},ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection{ConnectQl.Results.Row},ConnectQl.Internal.DataSources.Joins.MultiPartQuery,ConnectQl.Internal.Results.RowBuilder)">
            <summary>
            Combines the left and right result sets.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="leftData">
            The left result set.
            </param>
            <param name="rightData">
            The right result set.
            </param>
            <param name="rightQuery">
            The query for the right side.
            </param>
            <param name="rowBuilder">
            The row builder.
            </param>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.DataSources.Joins.CrossJoin">
            <summary>
            The CROSS JOIN.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.CrossJoin.#ctor(ConnectQl.Internal.DataSources.DataSource,ConnectQl.Internal.DataSources.DataSource)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.DataSources.Joins.CrossJoin"/> class.
            </summary>
            <param name="left">
            The left.
            </param>
            <param name="right">
            The right.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.DataSources.Joins.CrossJoin.Left">
            <summary>
            Gets the left.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.DataSources.Joins.CrossJoin.Right">
            <summary>
            Gets the right.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.CrossJoin.GetRows(ConnectQl.Internal.Interfaces.IInternalExecutionContext,ConnectQl.Internal.Interfaces.IMultiPartQuery)">
            <summary>
            Gets the rows for the join.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="multiPartQuery">
            The multi part query.
            </param>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.CrossJoin.GetDataSourceDescriptorsAsync(ConnectQl.Interfaces.IExecutionContext)">
            <summary>
            Gets the descriptors for this data source.
            </summary>
            <param name="context">
            The execution context.
            </param>
            <returns>
            All data sources inside this data source.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.CrossJoin.RangesToJoinFilter(System.Linq.Expressions.Expression)">
            <summary>
            The ranges to join filter.
            </summary>
            <param name="filter">
            The filter.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.CrossJoin.FindRangesAsync(ConnectQl.Interfaces.IExecutionContext,System.Linq.Expressions.Expression,ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection{ConnectQl.Results.Row})">
            <summary>
            Finds the ranges in an expression using the already retrieved rows.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="expression">
            The expression.
            </param>
            <param name="rows">
            The rows.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> returning the <see cref="T:System.Linq.Expressions.Expression"/> containing ranges.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.DataSources.Joins.CrossJoinSource">
            <summary>
            The cross join source.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.CrossJoinSource.#ctor(ConnectQl.Internal.DataSources.DataSource,ConnectQl.Internal.DataSources.DataSource)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.DataSources.Joins.CrossJoinSource"/> class.
            </summary>
            <param name="left">
            The left <see cref="T:ConnectQl.Internal.DataSources.DataSource"/>.
            </param>
            <param name="right">
            The right <see cref="T:ConnectQl.Internal.DataSources.DataSource"/>.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.CrossJoinSource.GetRows(ConnectQl.Internal.Interfaces.IInternalExecutionContext,ConnectQl.Internal.DataSources.Joins.JoinSourceBase.JoinQuery)">
            <summary>
            Retrieves the data from the source as an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="query">
            The query expression.
            </param>
            <returns>
            A task returning the rows.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.DataSources.Joins.FilteredJoinSourceBase">
            <summary>
            Base class for a filtered join.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.FilteredJoinSourceBase.#ctor(ConnectQl.Internal.DataSources.DataSource,ConnectQl.Internal.DataSources.DataSource,System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.DataSources.Joins.FilteredJoinSourceBase"/> class.
            </summary>
            <param name="left">
            The left data source.
            </param>
            <param name="right">
            The right data source.
            </param>
            <param name="filterExpression">
            The filter.
            </param>
            <param name="isInnerJoin">
            True if this is an inner join, false if it's a left join.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.DataSources.Joins.FilteredJoinSourceBase.FilterExpression">
            <summary>
            Gets the filter expression.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.DataSources.Joins.FilteredJoinSourceBase.IsInnerJoin">
            <summary>
            Gets a value indicating whether this is an inner join.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.DataSources.Joins.FilteredJoinSourceBase.Left">
            <summary>
            Gets the left side of the join.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.DataSources.Joins.FilteredJoinSourceBase.Right">
            <summary>
            Gets the right side of the join.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.FilteredJoinSourceBase.GetRows(ConnectQl.Internal.Interfaces.IInternalExecutionContext,ConnectQl.Internal.Interfaces.IMultiPartQuery)">
            <summary>
            Retrieves the data from the source as an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="multiPartQuery">
            The query expression.
            </param>
            <returns>
            A task returning the data set.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.FilteredJoinSourceBase.CreateJoinQuery(ConnectQl.Interfaces.IExecutionContext,ConnectQl.Internal.Interfaces.IMultiPartQuery,System.Linq.Expressions.Expression)">
            <summary>
            Splits the query into queries for the left and right side of the join, a join filter, a result filter and the ORDER
                BY expressions.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="query">
            The query.
            </param>
            <param name="joinFilter">
            The join Filter.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.DataSources.Joins.FilteredJoinSourceBase.JoinQuery"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.FilteredJoinSourceBase.GetRows(ConnectQl.Internal.Interfaces.IInternalExecutionContext,ConnectQl.Internal.DataSources.Joins.FilteredJoinSourceBase.JoinQuery)">
            <summary>
            Gets the joined data.
            </summary>
            <param name="context">
            The execution context.
            </param>
            <param name="query">
            The query.
            </param>
            <returns>
            A data set containing the rows retrieved from the source.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.DataSources.Joins.FilteredJoinSourceBase.JoinQuery">
            <summary>
            The query parts.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.FilteredJoinSourceBase.JoinQuery.#ctor(ConnectQl.Internal.Interfaces.IMultiPartQuery,ConnectQl.Internal.Interfaces.IMultiPartQuery,System.Func{ConnectQl.Results.Row,System.Object},System.Linq.Expressions.ExpressionType,System.Func{ConnectQl.Results.Row,System.Object},System.Linq.Expressions.Expression,System.Func{ConnectQl.Results.Row,ConnectQl.Results.Row,System.Boolean},System.Collections.Generic.IEnumerable{ConnectQl.Interfaces.IOrderByExpression},System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.DataSources.Joins.FilteredJoinSourceBase.JoinQuery"/> class.
            </summary>
            <param name="leftQuery">
            The left query.
            </param>
            <param name="rightQuery">
            The right query.
            </param>
            <param name="leftKey">
            The left Key.
            </param>
            <param name="joinType">
            The join Type.
            </param>
            <param name="rightKey">
            The right Key.
            </param>
            <param name="joinExpression">
            The join Expression.
            </param>
            <param name="joinFilter">
            The join filter.
            </param>
            <param name="orderBy">
            The order by.
            </param>
            <param name="resultFilter">
            The filter.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.DataSources.Joins.FilteredJoinSourceBase.JoinQuery.JoinExpression">
            <summary>
            Gets the join filter.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.DataSources.Joins.FilteredJoinSourceBase.JoinQuery.JoinFilter">
            <summary>
            Gets the join filter.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.DataSources.Joins.FilteredJoinSourceBase.JoinQuery.JoinType">
            <summary>
            Gets the join type.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.DataSources.Joins.FilteredJoinSourceBase.JoinQuery.LeftKey">
            <summary>
            Gets the left key.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.DataSources.Joins.FilteredJoinSourceBase.JoinQuery.LeftQuery">
            <summary>
            Gets the left query.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.DataSources.Joins.FilteredJoinSourceBase.JoinQuery.OrderBy">
            <summary>
            Gets the order by.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.DataSources.Joins.FilteredJoinSourceBase.JoinQuery.ResultFilter">
            <summary>
            Gets the filter for the join result.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.DataSources.Joins.FilteredJoinSourceBase.JoinQuery.RightKey">
            <summary>
            Gets the right key.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.DataSources.Joins.FilteredJoinSourceBase.JoinQuery.RightQuery">
            <summary>
            Gets the right query.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.DataSources.Joins.IMultiPartSource">
            <summary>
            The data source that contains multiple <see cref="T:ConnectQl.Interfaces.IDataSource"/>s.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.IMultiPartSource.GetRows(ConnectQl.Internal.Interfaces.IInternalExecutionContext,ConnectQl.Internal.Interfaces.IMultiPartQuery)">
            <summary>
            Retrieves the data from the source as an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="multiPartQuery">
            The query expression. Can be <c>null</c>.
            </param>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.DataSources.Joins.InnerJoin">
            <summary>
            The inner join source.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.InnerJoin.#ctor(ConnectQl.Internal.DataSources.DataSource,ConnectQl.Internal.DataSources.DataSource,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.DataSources.Joins.InnerJoin"/> class.
            </summary>
            <param name="left">
            The left data source.
            </param>
            <param name="right">
            The right data source.
            </param>
            <param name="filter">
            The join filter.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.InnerJoin.CombineResults(ConnectQl.Expressions.CompareExpression[][],ConnectQl.Internal.Results.RowBuilder,ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection{ConnectQl.Results.Row},ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection{ConnectQl.Results.Row})">
            <summary>
            Combines the results of the left and right parts into the query result.
            </summary>
            <param name="joinsParts">
            An array of array of compare expressions.
            </param>
            <param name="rowBuilder">
            The row builder.
            </param>
            <param name="leftData">
            The left data.
            </param>
            <param name="rightData">
            The right data.
            </param>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.DataSources.Joins.InnerSequentialJoin">
            <summary>
            The INNER SEQUENTIAL JOIN.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.DataSources.Joins.InnerSequentialJoin.left">
            <summary>
            Gets the left.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.DataSources.Joins.InnerSequentialJoin.right">
            <summary>
            Gets the right.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.InnerSequentialJoin.#ctor(ConnectQl.Internal.DataSources.DataSource,ConnectQl.Internal.DataSources.DataSource)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.DataSources.Joins.InnerSequentialJoin"/> class.
            </summary>
            <param name="left">
            The left data set.
            </param>
            <param name="right">
            The right data set.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.InnerSequentialJoin.GetRows(ConnectQl.Internal.Interfaces.IInternalExecutionContext,ConnectQl.Internal.Interfaces.IMultiPartQuery)">
            <summary>
            Gets the rows for the join.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="multiPartQuery">
            The multi part query.
            </param>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.InnerSequentialJoin.GetDataSourceDescriptorsAsync(ConnectQl.Interfaces.IExecutionContext)">
            <summary>
            Gets the descriptors for this data source.
            </summary>
            <param name="context">
            The execution context.
            </param>
            <returns>
            All data sources inside this data source.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.DataSources.Joins.JoinBase">
            <summary>
            The join base.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.JoinBase.#ctor(ConnectQl.Internal.DataSources.DataSource,ConnectQl.Internal.DataSources.DataSource,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.DataSources.Joins.JoinBase"/> class.
            </summary>
            <param name="left">
            The left.
            </param>
            <param name="right">
            The right.
            </param>
            <param name="filter">
            The filter.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.DataSources.Joins.JoinBase.Filter">
            <summary>
            Gets the filter.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.DataSources.Joins.JoinBase.Left">
            <summary>
            Gets the left.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.DataSources.Joins.JoinBase.Right">
            <summary>
            Gets the right.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.JoinBase.GetRows(ConnectQl.Internal.Interfaces.IInternalExecutionContext,ConnectQl.Internal.Interfaces.IMultiPartQuery)">
            <summary>
            Gets the rows for the join.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="multiPartQuery">
            The multi part query.
            </param>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.JoinBase.GetDataSourceDescriptorsAsync(ConnectQl.Interfaces.IExecutionContext)">
            <summary>
            Gets the descriptors for this data source.
            </summary>
            <param name="context">
            The execution context.
            </param>
            <returns>
            All data sources inside this data source.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.JoinBase.CombineResults(ConnectQl.Expressions.CompareExpression[][],ConnectQl.Internal.Results.RowBuilder,ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection{ConnectQl.Results.Row},ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection{ConnectQl.Results.Row})">
            <summary>
            Combines the results of the left and right parts into the query result.
            </summary>
            <param name="joinsParts">
            An array of array of compare expressions.
            </param>
            <param name="rowBuilder">
            The row builder.
            </param>
            <param name="leftData">
            The left data.
            </param>
            <param name="rightData">
            The right data.
            </param>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.JoinBase.RangesToJoinFilter(System.Linq.Expressions.Expression)">
            <summary>
            The ranges to join filter.
            </summary>
            <param name="filter">
            The filter.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.JoinBase.FindRangesAsync(ConnectQl.Interfaces.IExecutionContext,System.Linq.Expressions.Expression,ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection{ConnectQl.Results.Row})">
            <summary>
            Finds the ranges in an expression using the already retrieved rows.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="expression">
            The expression.
            </param>
            <param name="rows">
            The rows.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> returning the <see cref="T:System.Linq.Expressions.Expression"/> containing ranges.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.DataSources.Joins.JoinSource">
            <summary>
            The inner join source.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.JoinSource.#ctor(ConnectQl.Internal.DataSources.DataSource,ConnectQl.Internal.DataSources.DataSource,System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.DataSources.Joins.JoinSource"/> class.
            </summary>
            <param name="left">
            The first.
            </param>
            <param name="right">
            The second.
            </param>
            <param name="filter">
            The filter.
            </param>
            <param name="isInnerJoin">
            <c>false</c> if this is a left join, <c>true</c> if this is an inner join.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.JoinSource.GetRows(ConnectQl.Internal.Interfaces.IInternalExecutionContext,ConnectQl.Internal.DataSources.Joins.FilteredJoinSourceBase.JoinQuery)">
            <summary>
            Retrieves records for the join.
            </summary>
            <param name="context">
            The execution context.
            </param>
            <param name="query">
            The query.
            </param>
            <returns>
            A data set containing the rows retrieved from the source.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.JoinSource.RangesToJoinFilter(System.Linq.Expressions.Expression)">
            <summary>
            The ranges to join filter.
            </summary>
            <param name="filter">
            The filter.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.DataSources.Joins.JoinSourceBase">
            <summary>
            The join source base.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.DataSources.Joins.JoinSourceBase.ExpressionComparer">
            <summary>
            A comparer that compares expressions by their string representation.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.JoinSourceBase.#ctor(ConnectQl.Internal.DataSources.DataSource,ConnectQl.Internal.DataSources.DataSource)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.DataSources.Joins.JoinSourceBase"/> class.
            </summary>
            <param name="left">
            The left.
            </param>
            <param name="right">
            The right.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.DataSources.Joins.JoinSourceBase.Left">
            <summary>
            Gets the left part of the join.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.DataSources.Joins.JoinSourceBase.Right">
            <summary>
            Gets the right part of the join.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.JoinSourceBase.GetRows(ConnectQl.Internal.Interfaces.IInternalExecutionContext,ConnectQl.Internal.Interfaces.IMultiPartQuery)">
            <summary>
            Retrieves the data from the source as an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="multiPartQuery">
            The query expression. Can be <c>null</c>.
            </param>
            <returns>
            A task returning the data set.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.JoinSourceBase.CreateJoinQuery(ConnectQl.Interfaces.IExecutionContext,ConnectQl.Internal.Interfaces.IMultiPartQuery)">
            <summary>
            Splits the query into queries for the left and right side of the join, a filter and the ORDER BY expressions.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="query">
            The query to split.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.DataSources.Joins.JoinSourceBase.JoinQuery"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.JoinSourceBase.GetRows(ConnectQl.Internal.Interfaces.IInternalExecutionContext,ConnectQl.Internal.DataSources.Joins.JoinSourceBase.JoinQuery)">
            <summary>
            Retrieves the data from the source as an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="query">
            The query expression.
            </param>
            <returns>
            A task returning the rows.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.DataSources.Joins.JoinSourceBase.JoinQuery">
            <summary>
            The query parts.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.JoinSourceBase.JoinQuery.#ctor(ConnectQl.Internal.Interfaces.IMultiPartQuery,ConnectQl.Internal.Interfaces.IMultiPartQuery,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{ConnectQl.Interfaces.IOrderByExpression})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.DataSources.Joins.JoinSourceBase.JoinQuery"/> class.
            </summary>
            <param name="leftQuery">
            The left query.
            </param>
            <param name="rightQuery">
            The right query.
            </param>
            <param name="resultFilter">
            The filter.
            </param>
            <param name="orderBy">
            The order by.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.DataSources.Joins.JoinSourceBase.JoinQuery.LeftQuery">
            <summary>
            Gets the left query.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.DataSources.Joins.JoinSourceBase.JoinQuery.OrderBy">
            <summary>
            Gets the order by.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.DataSources.Joins.JoinSourceBase.JoinQuery.ResultFilter">
            <summary>
            Gets the filter.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.DataSources.Joins.JoinSourceBase.JoinQuery.RightQuery">
            <summary>
            Gets the right query.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.DataSources.Joins.LeftJoin">
            <summary>
            The left join source.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.LeftJoin.#ctor(ConnectQl.Internal.DataSources.DataSource,ConnectQl.Internal.DataSources.DataSource,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.DataSources.Joins.LeftJoin"/> class.
            </summary>
            <param name="left">
            The left data source.
            </param>
            <param name="right">
            The right data source.
            </param>
            <param name="filter">
            The join filter.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.LeftJoin.CombineResults(ConnectQl.Expressions.CompareExpression[][],ConnectQl.Internal.Results.RowBuilder,ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection{ConnectQl.Results.Row},ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection{ConnectQl.Results.Row})">
            <summary>
            Combines the results of the left and right parts into the query result.
            </summary>
            <param name="joinsParts">
            An array of array of compare expressions.
            </param>
            <param name="rowBuilder">
            The row builder.
            </param>
            <param name="leftData">
            The left data.
            </param>
            <param name="rightData">
            The right data.
            </param>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.DataSources.Joins.LeftSequentialJoin">
            <summary>
            The LEFT SEQUENTIAL JOIN.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.DataSources.Joins.LeftSequentialJoin.left">
            <summary>
            Gets the left.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.DataSources.Joins.LeftSequentialJoin.right">
            <summary>
            Gets the right.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.LeftSequentialJoin.#ctor(ConnectQl.Internal.DataSources.DataSource,ConnectQl.Internal.DataSources.DataSource)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.DataSources.Joins.LeftSequentialJoin"/> class.
            </summary>
            <param name="left">
            The left data set.
            </param>
            <param name="right">
            The right data set.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.LeftSequentialJoin.GetRows(ConnectQl.Internal.Interfaces.IInternalExecutionContext,ConnectQl.Internal.Interfaces.IMultiPartQuery)">
            <summary>
            Gets the rows for the join.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="multiPartQuery">
            The multi part query.
            </param>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.LeftSequentialJoin.GetDataSourceDescriptorsAsync(ConnectQl.Interfaces.IExecutionContext)">
            <summary>
            Gets the descriptors for this data source.
            </summary>
            <param name="context">
            The execution context.
            </param>
            <returns>
            All data sources inside this data source.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.DataSources.Joins.MultiPartQuery">
            <summary>
            The multi part query.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.DataSources.Joins.MultiPartQuery.Count">
            <summary>
            Gets or sets the count.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.DataSources.Joins.MultiPartQuery.Fields">
            <summary>
            Gets or sets the fields.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.DataSources.Joins.MultiPartQuery.FilterExpression">
            <summary>
            Gets or sets the filter expression.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.DataSources.Joins.MultiPartQuery.OrderByExpressions">
            <summary>
            Gets or sets the order by expressions.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.DataSources.Joins.MultiPartQuery.WildcardAliases">
            <summary>
            Gets or sets the wildcard aliases.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.DataSources.Joins.NearestJoinSource">
            <summary>
            The nearest inner join source.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.NearestJoinSource.#ctor(ConnectQl.Internal.DataSources.DataSource,ConnectQl.Internal.DataSources.DataSource,System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.DataSources.Joins.NearestJoinSource"/> class.
            </summary>
            <param name="left">
            The first.
            </param>
            <param name="right">
            The second.
            </param>
            <param name="filter">
            The filter.
            </param>
            <param name="isInnerJoin">
            <c>false</c> if this is a left join, <c>true</c> if this is an inner join.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.NearestJoinSource.GetRows(ConnectQl.Internal.Interfaces.IInternalExecutionContext,ConnectQl.Internal.DataSources.Joins.FilteredJoinSourceBase.JoinQuery)">
            <summary>
            Gets the joined data.
            </summary>
            <param name="context">
            The execution context.
            </param>
            <param name="query">
            The query.
            </param>
            <returns>
            A data set containing the rows retrieved from the source.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.NearestJoinSource.CreateJoinFilterAsync(ConnectQl.Interfaces.IExecutionContext,ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection{ConnectQl.Results.Row},System.Collections.Generic.ICollection{ConnectQl.Internal.Query.OrderByExpression})">
            <summary>
            Creates the join filter.
            </summary>
            <param name="context">
            The execution context.
            </param>
            <param name="leftRows">
            The left rows.
            </param>
            <param name="sortOrders">
            Will be filled with the sort orders for this join.
            </param>
            <returns>
            A task containing the the filter expression.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.DataSources.Joins.OuterApply">
            <summary>
            The cross apply.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.OuterApply.#ctor(ConnectQl.Internal.DataSources.DataSource,ConnectQl.Internal.DataSources.DataSource,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.DataSources.Joins.OuterApply"/> class.
            </summary>
            <param name="left">
            The left.
            </param>
            <param name="right">
            The right.
            </param>
            <param name="rightFactory">
            The right Factory.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.OuterApply.CombineResults(ConnectQl.Internal.Interfaces.IInternalExecutionContext,ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection{ConnectQl.Results.Row},ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection{ConnectQl.Results.Row},ConnectQl.Internal.DataSources.Joins.MultiPartQuery,ConnectQl.Internal.Results.RowBuilder)">
            <summary>
            The cross apply.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="leftData">
            The left data.
            </param>
            <param name="rightData">
            The right data.
            </param>
            <param name="rightQuery">
            The right query.
            </param>
            <param name="rowBuilder">
            The row builder.
            </param>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.DataSources.Joins.SequentialJoinSource">
            <summary>
            The sequential left join source.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.DataSources.Joins.SequentialJoinSource.isInnerJoin">
            <summary>
            Indicates whether the join is an inner join or an outer join.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.SequentialJoinSource.#ctor(ConnectQl.Internal.DataSources.DataSource,ConnectQl.Internal.DataSources.DataSource,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.DataSources.Joins.SequentialJoinSource"/> class.
            </summary>
            <param name="left">
            The first.
            </param>
            <param name="right">
            The second.
            </param>
            <param name="isInnerJoin">
            <c>false</c> if this is a left join, <c>true</c> if this is an inner join.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.SequentialJoinSource.CreateJoinQuery(ConnectQl.Interfaces.IExecutionContext,ConnectQl.Internal.Interfaces.IMultiPartQuery)">
            <summary>
            Splits the query into queries for the left and right side of the join, a filter and the ORDER BY expressions.
                Removes filters from the left and right side, so all records will be retrieved. Filters the data afterwards.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="query">
            The query to split.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.DataSources.Joins.JoinSourceBase.JoinQuery"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.SequentialJoinSource.GetRows(ConnectQl.Internal.Interfaces.IInternalExecutionContext,ConnectQl.Internal.DataSources.Joins.JoinSourceBase.JoinQuery)">
            <summary>
            Retrieves the data from the source as an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="query">
            The query expression.
            </param>
            <returns>
            A task returning the rows.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.DataSources.Joins.MultiPartQueryExtensions">
            <summary>
            The multi part query extensions.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.MultiPartQueryExtensions.GetFilter(ConnectQl.Internal.Interfaces.IMultiPartQuery,ConnectQl.Interfaces.IExecutionContext)">
            <summary>
            The get filter.
            </summary>
            <param name="query">
            The query.
            </param>
            <param name="context">
            The context.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.MultiPartQueryExtensions.GetUsedFields(ConnectQl.Interfaces.IQuery,System.Object,System.Object)">
            <summary>
            The get used fields.
            </summary>
            <param name="query">
            The query.
            </param>
            <param name="left">
            The left.
            </param>
            <param name="filter">
            The filter.
            </param>
            <returns>
            The <see cref="T:System.Collections.IEnumerable"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.MultiPartQueryExtensions.GetUsedFields(ConnectQl.Internal.Interfaces.IMultiPartQuery,System.Object,System.Object)">
            <summary>
            The get used fields.
            </summary>
            <param name="query">
            The query.
            </param>
            <param name="left">
            The left.
            </param>
            <param name="filter">
            The filter.
            </param>
            <returns>
            The <see cref="T:System.Collections.IEnumerable"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.MultiPartQueryExtensions.ReplaceFilter(ConnectQl.Internal.Interfaces.IMultiPartQuery,System.Linq.Expressions.Expression)">
            <summary>
            The replace filter.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <param name="filter">
            The filter.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Interfaces.IMultiPartQuery"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.Joins.MultiPartQueryExtensions.ReplaceOrderBy(ConnectQl.Internal.Interfaces.IMultiPartQuery,System.Collections.Generic.IEnumerable{ConnectQl.Interfaces.IOrderByExpression})">
            <summary>
            The replace order by.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <param name="orderby">
            The orderby.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Interfaces.IMultiPartQuery"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.DataSources.SelectDataSource">
            <summary>
            The select data source.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.DataSources.SelectDataSource.selectPlan">
            <summary>
            The select plan.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.DataSources.SelectDataSource.alias">
            <summary>
            The sourceAlias.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.SelectDataSource.#ctor(ConnectQl.Internal.Interfaces.IQueryPlan,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.DataSources.SelectDataSource"/> class.
            </summary>
            <param name="selectPlan">
            The select query plan.
            </param>
            <param name="aliases">
            The aliases.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.SelectDataSource.GetRows(ConnectQl.Internal.Interfaces.IInternalExecutionContext,ConnectQl.Internal.Interfaces.IMultiPartQuery)">
            <summary>
            The get data async.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="multiPartQuery">
            The multi part query.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.DataSources.SelectDataSource.GetDataSourceDescriptorsAsync(ConnectQl.Interfaces.IExecutionContext)">
            <summary>
            Gets the descriptor for this data source.
            </summary>
            <param name="context">
            The execution context.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.ExecutionContextImplementation">
            <summary>
            The execution context implementation.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.ExecutionContextImplementation.defaults">
            <summary>
            The defaults.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.ExecutionContextImplementation.fileFormats">
            <summary>
            The file formats.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.ExecutionContextImplementation.functionNames">
            <summary>
            The function names.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.ExecutionContextImplementation.displayNames">
            <summary>
            The function names.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.ExecutionContextImplementation.values">
            <summary>
            The values.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.ExecutionContextImplementation.plugins">
            <summary>
            The plugins.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.ExecutionContextImplementation.#ctor(ConnectQl.ConnectQlContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.ExecutionContextImplementation"/> class.
            </summary>
            <param name="parentContext">
            The parent context.
            </param>
            <param name="filename">
            The filename.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.ExecutionContextImplementation.Filename">
            <summary>
            Gets the filename.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.ExecutionContextImplementation.MaxRowsToScan">
            <summary>
            Gets the maximum rows to scan when determining the columns in a source.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.ExecutionContextImplementation.WriteProgressInterval">
            <summary>
            Gets the write progress interval.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.ExecutionContextImplementation.Log">
            <summary>
            Gets the log.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.ExecutionContextImplementation.Messages">
            <summary>
            Gets the message writer.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.ExecutionContextImplementation.NodeData">
            <summary>
            Gets the node data.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.ExecutionContextImplementation.ParentContext">
            <summary>
            Gets the parent context.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.ExecutionContextImplementation.ConnectQl#Internal#Interfaces#IValidationContext#FileFormats">
            <summary>
            Gets the file formats.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.ExecutionContextImplementation.ConnectQl#Interfaces#IExecutionContext#FileFormats">
            <summary>
            Gets the file formats.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.ExecutionContextImplementation.MaximumChunkSize">
            <summary>
            Gets the maximum chunk size.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.ExecutionContextImplementation.CreateBuilder``1">
            <summary>
            Creates a builder that can be used to create an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </summary>
            <typeparam name="T">
            The type of the items in the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerablePolicies.IAsyncEnumerableBuilder`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.ExecutionContextImplementation.GetDefault(System.String,ConnectQl.Interfaces.IDataAccess,System.Boolean)">
            <summary>
            Gets the default setting for a data source. A 'USE DEFAULT' statement can be used to set a default value for a
                function.
            </summary>
            <param name="setting">
            The default setting get the value for.
            </param>
            <param name="source">
            The data source to get the value for.
            </param>
            <param name="throwOnError">
            <c>true</c>to throw an exception when an error occurs.
            </param>
            <returns>
            The value for the function for the specified source.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.ExecutionContextImplementation.GetPlugins">
            <summary>
            Gets the plugins.
            </summary>
            <returns>
            The plugin, or <c>null</c> if it wasn't found.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.ExecutionContextImplementation.GetVariable``1(System.String)">
            <summary>
            Gets the value for the specified variable.
            </summary>
            <typeparam name="T">
            The type to retrieve.
            </typeparam>
            <param name="variable">
            The name of the variable, including the '@'.
            </param>
            <returns>
            The value of the variable.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.ExecutionContextImplementation.OpenStreamAsync(System.String,ConnectQl.UriResolveMode)">
            <summary>
            Opens a file.
            </summary>
            <param name="uri">
            The uri of the file.
            </param>
            <param name="mode">
            The file mode.
            </param>
            <returns>
            The stream containing the data of the file.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.ExecutionContextImplementation.SetDisplayName(ConnectQl.Interfaces.IDataAccess,System.String)">
            <summary>
            Sets the display name.
            </summary>
            <param name="access">
            The access.
            </param>
            <param name="displayName">
            The display name.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.ExecutionContextImplementation.RegisterDefault(System.String,System.String,System.Object)">
            <summary>
            Registers a default value for the specified target function and function name.
            </summary>
            <param name="setting">
            The target function.
            </param>
            <param name="functionName">
            The function name.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.ExecutionContextImplementation.GetDisplayName(ConnectQl.Interfaces.IDataAccess)">
            <summary>
            Gets the display name for the specified access.
            </summary>
            <param name="access">
            The access.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.ExecutionContextImplementation.SetFunctionName(ConnectQl.Interfaces.IDataAccess,System.String)">
            <summary>
            Sets the function name for the specified data target.
            </summary>
            <param name="access">
            The access.
            </param>
            <param name="functionName">
            The function name.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.ExecutionContextImplementation.SetVariable``1(System.String,``0)">
            <summary>
            Sets the variable to the specified value.
            </summary>
            <typeparam name="T">
            The type of the value.
            </typeparam>
            <param name="variable">
            The name of the variable, including the '@'.
            </param>
            <param name="value">
            The value of the variable.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.ExecutionContextImplementation.ConnectQl#AsyncEnumerablePolicies#IMaterializationPolicy#SortAsync``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Comparison{``0})">
            <summary>
            Sorts the elements in an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection`1"/>.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="comparison">
            The <see cref="T:System.Comparison`1"/> to use when comparing elements.
            </param>
            <typeparam name="T">
            The type of the elements of the <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </typeparam>
            <returns>
            A sorted and materialized <see cref="T:ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection`1"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Expressions.RangeExpression">
            <summary>
            The range expression.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Expressions.RangeExpression.#ctor(System.Object,System.Object,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Expressions.RangeExpression"/> class.
            </summary>
            <param name="min">
            The smallest item in the range.
            </param>
            <param name="max">
            The largest item in the range.
            </param>
            <param name="type">
            The type of the range.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Expressions.RangeExpression.Max">
            <summary>
            Gets the max.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Expressions.RangeExpression.MaxExpression">
            <summary>
            Gets the maximum value as constant expression.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Expressions.RangeExpression.Min">
            <summary>
            Gets the min.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Expressions.RangeExpression.MinExpression">
            <summary>
            Gets the minimum value as constant expression.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Expressions.RangeExpression.ToString">
            <summary>
            Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>
            A textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Expressions.RangeExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <summary>
            Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception
                if the node is not reducible.
            </summary>
            <returns>
            The expression being visited, or an expression which should replace it in the tree.
            </returns>
            <param name="visitor">
            An instance of <see cref="T:System.Func`2"/>.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Expressions.RangeExpression.Quote(System.Object)">
            <summary>
            Quotes a value if it's a string.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Expressions.SourceFieldExpression">
            <summary>
            Represents an expression that is a reference to a field.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Expressions.SourceFieldExpression.RowGetByInternalNameMethod">
            <summary>
            The row get by internal name method.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Expressions.SourceFieldExpression.RowGetMethod">
            <summary>
            The <see cref="M:ConnectQl.Results.Row.Get``1(System.String)"/> method.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Expressions.SourceFieldExpression.SelectMethod">
            <summary>
            The select method for an async readonly collection.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Expressions.SourceFieldExpression.#ctor(System.String,System.String,System.Boolean,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Expressions.SourceFieldExpression"/> class.
            </summary>
            <param name="sourceName">
            The name of the source.
            </param>
            <param name="fieldName">
            The name of the field.
            </param>
            <param name="useInternalName">
            <c>true</c> to use the internal name of the field, <c>false</c> otherwise.
            </param>
            <param name="type">
            The type of the field.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Expressions.SourceFieldExpression.FieldName">
            <summary>
            Gets the name of the field.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Expressions.SourceFieldExpression.SourceName">
            <summary>
            Gets the name of the source.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Expressions.SourceFieldExpression.UseInternalName">
            <summary>
            Gets a value indicating whether to use the internal name.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Expressions.SourceFieldExpression.CreateGetter(System.Linq.Expressions.ParameterExpression,System.Type)">
            <summary>
            Creates a method call that gets the value from the specified parameter.
            </summary>
            <param name="row">
            The parameter to get the field from.
            </param>
            <param name="type">
            The type to return (when omitted, the node's type will be returned).
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Expressions.SourceFieldExpression.CreateGroupGetter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Creates a method call that gets the values from the specified parameter for grouping.
            </summary>
            <param name="rows">
            The parameter to get the fields from.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Expressions.SourceFieldExpression.ToString">
            <summary>
            Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>
            A textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Expressions.SourceFieldExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <summary>
            Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception
                if the node is not reducible.
            </summary>
            <returns>
            The expression being visited, or an expression which should replace it in the tree.
            </returns>
            <param name="visitor">
            An instance of <see cref="T:System.Func`2"/>.
            </param>
        </member>
        <member name="T:ConnectQl.Internal.Expressions.Visitors.Simplifier">
            <summary>
            The simplifier.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Expressions.Visitors.Simplifier.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            The visit binary.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Expressions.Visitors.Simplifier.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            The visit conditional.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Expressions.Visitors.Simplifier.VisitIndex(System.Linq.Expressions.IndexExpression)">
            <summary>
            The visit index.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Expressions.Visitors.Simplifier.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            The visit member.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Expressions.Visitors.Simplifier.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            The visit method call.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Expressions.Visitors.Simplifier.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            The visit unary.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Expressions.Visitors.Simplifier.Evaluate(System.Linq.Expressions.Expression)">
            <summary>
            The evaluate.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.ConstantExpression"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Extensions.InternalExpressionExtensions">
            <summary>
            Internal extensions for expressions.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Extensions.InternalExpressionExtensions.GetDataSourceFields(System.Linq.Expressions.Expression,ConnectQl.Internal.DataSources.DataSource)">
            <summary>
            Gets the fields of the <paramref name="dataSource"/> that are used in the expression.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <param name="dataSource">
            The data source.
            </param>
            <returns>
            An enumerable of fields that were used.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Extensions.InternalExpressionExtensions.GetJoinFunction(System.Linq.Expressions.Expression,ConnectQl.Internal.DataSources.DataSource)">
            <summary>
            Gets a function that takes two rows and returns true if the rows should be joined.
            </summary>
            <param name="expression">
            The expression to create the function from.
            </param>
            <param name="leftSource">
            The source that will be the first argument in the returned function.
            </param>
            <returns>
            A function that takes two rows and returns true if the rows should be joined.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Extensions.InternalExpressionExtensions.MoveFieldsToTheLeft``1(``0,ConnectQl.Internal.DataSources.DataSource)">
            <summary>
            Moves field expressions in comparisons to the left.
            </summary>
            <typeparam name="T">
            The type of the expression.
            </typeparam>
            <param name="expression">
            The expression.
            </param>
            <param name="source">
            The source for which the fields should be moved to the left.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Extensions.InternalExpressionExtensions.RemoveAllPartsThatAreNotInSource(System.Linq.Expressions.Expression,ConnectQl.Internal.DataSources.DataSource)">
            <summary>
            Creates a new <see cref="T:System.Linq.Expressions.Expression"/> that only contains comparisons with fields from the specified source.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <param name="source">
            The source to filter by.
            </param>
            <returns>
            A new <see cref="T:System.Linq.Expressions.Expression"/> without the parts containing fields that are not in the source.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Extensions.TypeExtensions">
            <summary>
            The type extensions.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Extensions.TypeExtensions.GetGenericMethod(System.Type,System.String,System.Type[])">
            <summary>
            Gets a generic method on a type.
            </summary>
            <param name="type">
            The type.
            </param>
            <param name="name">
            The name of the method.
            </param>
            <param name="parameters">
            The types of the parameters.
            </param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Extensions.TypeExtensions.GetInterface(System.Type,System.Type)">
            <summary>
            Gets the interface if the <paramref name="type"/> implements it. When <paramref name="interfaceType"/> is a generic type definition,
            the constructed generic interface is returned.
            </summary>
            <param name="type">
            The type.
            </param>
            <param name="interfaceType">
            The interface type.
            </param>
            <returns>
            The <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Extensions.TypeExtensions.GetBaseType(System.Type,System.Type)">
            <summary>
            Gets the base type if the <paramref name="type"/> implements it. When <paramref name="baseType"/> is a generic type definition,
            the constructed generic interface is returned.
            </summary>
            <param name="type">
            The type.
            </param>
            <param name="baseType">
            The base type.
            </param>
            <returns>
            The <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Extensions.TypeExtensions.GetMethod(System.Type,System.String,System.Type[])">
            <summary>
            Gets a generic method on a type.
            </summary>
            <param name="type">
            The type.
            </param>
            <param name="name">
            The name of the method.
            </param>
            <param name="parameters">
            The types of the parameters.
            </param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Extensions.TypeExtensions.HasInterface(System.Type,System.Type)">
            <summary>
            The has interface.
            </summary>
            <param name="type">
            The type.
            </param>
            <param name="interfaceType">
            The interface type.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Field">
            <summary>
            The field.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Field.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Field"/> class.
            </summary>
            <param name="sourceAlias">
            The source alias.
            </param>
            <param name="fieldName">
            The field name.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Field.FieldName">
            <summary>
            Gets the field name.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Field.SourceAlias">
            <summary>
            Gets the source alias.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Field.Equals(System.Object)">
            <summary>
            Compares this object to <paramref name="obj"/>.
            </summary>
            <param name="obj">
            The object to compare to.
            </param>
            <returns>
            <c>true</c> if the objects are equals, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Field.GetHashCode">
            <summary>
            Gets the hash code for this field.
            </summary>
            <returns>
            The hash code.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Field.ToString">
            <summary>
            Converts the field to a string.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.FileFormatsImplementation">
            <summary>
            The file formats implementation.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.FileFormatsImplementation.formats">
            <summary>
            The formats.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.FileFormatsImplementation.AddFileAccess(ConnectQl.Interfaces.IFileAccess)">
            <summary>
            Adds a file access method to the file formats.
            </summary>
            <param name="access">
            The file access to add.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IFileFormats"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.FileFormatsImplementation.GetEnumerator">
            <summary>
            The get enumerator.
            </summary>
            <returns>
            The <see cref="T:System.Collections.IEnumerator"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.FileFormatsImplementation.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            The get enumerator.
            </summary>
            <returns>
            The <see cref="T:System.Collections.IEnumerator"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.FileFormats.CsvFileFormat">
            <summary>
                The CSV file reader.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.FileFormats.CsvFileFormat.EscapedString">
            <summary>
                The escaped string.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.FileFormats.CsvFileFormat.ShouldMaterialize">
            <summary>
                Gets a value indicating whether the collection of rows should be materialized when
                calling this writer.
                When all columns are needed in the header (e.g. for CSV or Excel), you should return <c>true</c>
                here. Other formats that use the columns per object (like JSON) can return <c>false</c>.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.FileFormats.CsvFileFormat.CanReadThisFile(ConnectQl.Interfaces.IFileFormatExecutionContext,System.String,System.Byte[])">
            <summary>
                Checks if the file reader can read this file.
            </summary>
            <param name="context">
                The context.
            </param>
            <param name="fileName">
                The file name.
            </param>
            <param name="firstBytes">
                The first bytes of the file.
            </param>
            <returns>
                <c>true</c> if this reader can read the file, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.FileFormats.CsvFileFormat.CanWriteThisFile(System.String)">
            <summary>
                Checks if the file writer can write this file.
            </summary>
            <param name="fileName">
                The file name.
            </param>
            <returns>
                <c>true</c> if this reader can write the file, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.FileFormats.CsvFileFormat.GetDataSourceDescriptorAsync(System.String,ConnectQl.Interfaces.IFileFormatExecutionContext,System.IO.StreamReader)">
            <summary>
                Gets the descriptor for this data source.
            </summary>
            <param name="alias">
                The alias.
            </param>
            <param name="context">
                The execution context.
            </param>
            <param name="reader">
                The reader.
            </param>
            <returns>
                The <see cref="T:System.Threading.Tasks.Task" />.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.FileFormats.CsvFileFormat.Read(ConnectQl.Interfaces.IFileFormatExecutionContext,ConnectQl.Interfaces.IRowBuilder,System.IO.StreamReader,System.Collections.Generic.HashSet{System.String})">
            <summary>
                Reads a reader as comma separated values.
            </summary>
            <param name="context">
                The context.
            </param>
            <param name="rowBuilder">
                The data Set.
            </param>
            <param name="reader">
                The stream.
            </param>
            <param name="fields">
                The fields, or <c>null</c> to retrieve all fields.
            </param>
            <returns>
                The rows.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.FileFormats.CsvFileFormat.WriteFooter(ConnectQl.Interfaces.IFileFormatExecutionContext,System.IO.StreamWriter)">
            <summary>
                Writes the footer to the file.
            </summary>
            <param name="context">
                The context.
            </param>
            <param name="writer">
                The reader.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.FileFormats.CsvFileFormat.WriteHeader(ConnectQl.Interfaces.IFileFormatExecutionContext,System.IO.StreamWriter,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Writes the header to the file.
            </summary>
            <param name="context">
                The context.
            </param>
            <param name="writer">
                The stream.
            </param>
            <param name="fields">
                The fields.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.FileFormats.CsvFileFormat.WriteRows(ConnectQl.Interfaces.IFileFormatExecutionContext,System.IO.StreamWriter,System.Collections.Generic.IEnumerable{ConnectQl.Results.Row},System.Boolean)">
            <summary>
                Writes rows to the file.
            </summary>
            <param name="context">
                The context.
            </param>
            <param name="writer">
                The stream.
            </param>
            <param name="rows">
                The rows to write.
            </param>
            <param name="upsert">
                True to upsert, false to insert.
            </param>
            <returns>
                The number of rows that were written.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.FileFormats.CsvFileFormat.Escape(System.Object)">
            <summary>
                Escapes a value.
            </summary>
            <param name="o">
                The o.
            </param>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.FileFormats.CsvFileFormat.GetHeaders(System.Text.RegularExpressions.Regex,System.IO.TextReader,System.String)">
            <summary>
            Gets the headers from the reader.
            </summary>
            <param name="splitter">
            The splitter.
            </param>
            <param name="reader">
            The reader.
            </param>
            <param name="separator">
            The separator.
            </param>
            <returns>
            The <see cref="T:string[]"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.FileFormats.CsvFileFormat.GetSplitter(System.String)">
            <summary>
                Gets the splitter based on the current default separator.
            </summary>
            <param name="separator">
                The separator.
            </param>
            <returns>
                The <see cref="T:System.Text.RegularExpressions.Regex" />.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.FunctionDescriptor">
            <summary>
            The function descriptor.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.FunctionDescriptor.arguments">
            <summary>
            The arguments.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.FunctionDescriptor.lambda">
            <summary>
            The lambda.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.FunctionDescriptor.#ctor(System.String,System.Boolean,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.FunctionDescriptor"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="hasSideEffects">
            <c>true</c> if the function has side effects and should not be evaluated for intellisense.
            </param>
            <param name="lambda">
            The lambda.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.FunctionDescriptor.Arguments">
            <summary>
            Gets the arguments.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.FunctionDescriptor.Description">
            <summary>
            Gets the description.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.FunctionDescriptor.IsAggregateFunction">
            <summary>
            Gets a value indicating whether this function is an aggregate function.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.FunctionDescriptor.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.FunctionDescriptor.HasSideEffects">
            <summary>
            Gets a value indicating whether the function has side effects and should not be evaluated for IntelliSense.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.FunctionDescriptor.ReturnType">
            <summary>
            Gets the return type.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.FunctionDescriptor.GetExpression">
            <summary>
            Gets the lambda expression.
            </summary>
            <returns>
            The lambda expression, or <c>null</c> if it's not supported.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.FunctionDescriptor.SetArgumentDescription(System.Int32,System.String)">
            <summary>
            The set argument description.
            </summary>
            <param name="index">
            The index.
            </param>
            <param name="description">
            The description.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.FunctionDescriptor.SetDescription(System.String)">
            <summary>
            The set description.
            </summary>
            <param name="description">
            The description.
            </param>
        </member>
        <member name="T:ConnectQl.Internal.FunctionRegistration">
            <summary>
            The function registration.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.FunctionRegistration.descriptor">
            <summary>
            The descriptor.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.FunctionRegistration.functions">
            <summary>
            The functions.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.FunctionRegistration.#ctor(ConnectQl.Internal.FunctionDescriptor,ConnectQl.Interfaces.IConnectQlFunctions)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.FunctionRegistration"/> class.
            </summary>
            <param name="descriptor">
            The descriptor.
            </param>
            <param name="functions">
            The functions.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.FunctionRegistration.Log">
            <summary>
            Gets the log.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.FunctionRegistration.SetDescription(System.String)">
            <summary>
            The set description.
            </summary>
            <param name="description">
            The description.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.FunctionRegistration.SetDescription(System.String,System.String)">
            <summary>
            The set description.
            </summary>
            <param name="description">
            The description.
            </param>
            <param name="argument1">
            The argument 1.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.FunctionRegistration.SetDescription(System.String,System.String,System.String)">
            <summary>
            The set description.
            </summary>
            <param name="description">
            The description.
            </param>
            <param name="argument1">
            The argument 1.
            </param>
            <param name="argument2">
            The argument 2.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.FunctionRegistration.SetDescription(System.String,System.String,System.String,System.String)">
            <summary>
            The set description.
            </summary>
            <param name="description">
            The description.
            </param>
            <param name="argument1">
            The argument 1.
            </param>
            <param name="argument2">
            The argument 2.
            </param>
            <param name="argument3">
            The argument 3.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.FunctionRegistration.SetDescription(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            The set description.
            </summary>
            <param name="description">
            The description.
            </param>
            <param name="argument1">
            The argument 1.
            </param>
            <param name="argument2">
            The argument 2.
            </param>
            <param name="argument3">
            The argument 3.
            </param>
            <param name="argument4">
            The argument 4.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.FunctionRegistration.SetDescription(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            The set description.
            </summary>
            <param name="description">
            The description.
            </param>
            <param name="argument1">
            The argument 1.
            </param>
            <param name="argument2">
            The argument 2.
            </param>
            <param name="argument3">
            The argument 3.
            </param>
            <param name="argument4">
            The argument 4.
            </param>
            <param name="argument5">
            The argument 5.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.FunctionRegistration.SetDescription(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            The set description.
            </summary>
            <param name="description">
            The description.
            </param>
            <param name="argument1">
            The argument 1.
            </param>
            <param name="argument2">
            The argument 2.
            </param>
            <param name="argument3">
            The argument 3.
            </param>
            <param name="argument4">
            The argument 4.
            </param>
            <param name="argument5">
            The argument 5.
            </param>
            <param name="argument6">
            The argument 6.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.FunctionRegistration.SetDescription(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the description for this registration.
            </summary>
            <param name="description">
            The description.
            </param>
            <param name="argument1">
            The argument 1.
            </param>
            <param name="argument2">
            The argument 2.
            </param>
            <param name="argument3">
            The argument 3.
            </param>
            <param name="argument4">
            The argument 4.
            </param>
            <param name="argument5">
            The argument 5.
            </param>
            <param name="argument6">
            The argument 6.
            </param>
            <param name="argument7">
            The argument 7.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.FunctionRegistration.SetDescription(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the description for this registration.
            </summary>
            <param name="description">
            The description.
            </param>
            <param name="argument1">
            The argument 1.
            </param>
            <param name="argument2">
            The argument 2.
            </param>
            <param name="argument3">
            The argument 3.
            </param>
            <param name="argument4">
            The argument 4.
            </param>
            <param name="argument5">
            The argument 5.
            </param>
            <param name="argument6">
            The argument 6.
            </param>
            <param name="argument7">
            The argument 7.
            </param>
            <param name="argument8">
            The argument 8.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.FunctionRegistration.SetDescription(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the description for this registration.
            </summary>
            <param name="description">
            The description.
            </param>
            <param name="argument1">
            The argument 1.
            </param>
            <param name="argument2">
            The argument 2.
            </param>
            <param name="argument3">
            The argument 3.
            </param>
            <param name="argument4">
            The argument 4.
            </param>
            <param name="argument5">
            The argument 5.
            </param>
            <param name="argument6">
            The argument 6.
            </param>
            <param name="argument7">
            The argument 7.
            </param>
            <param name="argument8">
            The argument 8.
            </param>
            <param name="argument9">
            The argument 9.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.FunctionRegistration.SetDescription(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the description for this registration.
            </summary>
            <param name="description">
            The description.
            </param>
            <param name="argument1">
            The argument 1.
            </param>
            <param name="argument2">
            The argument 2.
            </param>
            <param name="argument3">
            The argument 3.
            </param>
            <param name="argument4">
            The argument 4.
            </param>
            <param name="argument5">
            The argument 5.
            </param>
            <param name="argument6">
            The argument 6.
            </param>
            <param name="argument7">
            The argument 7.
            </param>
            <param name="argument8">
            The argument 8.
            </param>
            <param name="argument9">
            The argument 9.
            </param>
            <param name="argument10">
            The argument 10.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.FunctionRegistration.AddFunction(System.String,ConnectQl.Interfaces.IFunctionDescriptor)">
            <summary>
            Adds a key/value pair of key'1 =&gt; function to the dictionary.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="function">
            The function.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown when a lambda with the specified number of parameters is already in the dictionary.
            </exception>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Intellisense.Classifier">
            <summary>
            Changes classifications for the tokens.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Intellisense.Classifier.data">
            <summary>
            The data.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Intellisense.Classifier.tokens">
            <summary>
            The tokens.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Classifier.#ctor(ConnectQl.Internal.Interfaces.INodeDataProvider,System.Collections.Generic.List{ConnectQl.ConnectQlContext.ClassifiedToken})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Intellisense.Classifier"/> class.
            </summary>
            <param name="data">
            The data.
            </param>
            <param name="tokens">
            The tokens.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Classifier.Classify(ConnectQl.Internal.Interfaces.IValidationContext,ConnectQl.Internal.Ast.Statements.Block,System.Collections.Generic.IList{ConnectQl.Internal.Token})">
            <summary>
            Classifies the tokens.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="block">
            The block.
            </param>
            <param name="tokens">
            The tokens.
            </param>
            <returns>
            The classified tokens.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Classifier.Visit``1(``0)">
            <summary>
            Visits the node and ensures the result is of type <typeparamref name="T"/>. When node is <c>null</c>, returns
                <c>null</c>.
            </summary>
            <typeparam name="T">
            The type of the result.
            </typeparam>
            <param name="node">
            The node.
            </param>
            <returns>
            The <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Classifier.VisitFieldReferenceSqlExpression(ConnectQl.Internal.Ast.Expressions.FieldReferenceSqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.FieldReferenceSqlExpression"/> expression.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Classifier.VisitFunctionCallSqlExpression(ConnectQl.Internal.Ast.Expressions.FunctionCallSqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.FunctionCallSqlExpression"/> expression.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Classifier.VisitFunctionSource(ConnectQl.Internal.Ast.Sources.FunctionSource)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Sources.FunctionSource"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Classifier.VisitSelectFromStatement(ConnectQl.Internal.Ast.Statements.SelectFromStatement)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Statements.SelectFromStatement"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Classifier.VisitSelectSource(ConnectQl.Internal.Ast.Sources.SelectSource)">
            <summary>
            The visit select source.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Classifier.VisitWildCardSqlExpression(ConnectQl.Internal.Ast.Expressions.WildcardSqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.WildcardSqlExpression"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Intellisense.Document">
            <summary>
            The document.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Intellisense.Document.document">
            <summary>
            The document that was sent last.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Intellisense.Document.session">
            <summary>
            The session.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Intellisense.Document.updateLock">
            <summary>
            The queue lock.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Intellisense.Document.contents">
            <summary>
            The contents.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Intellisense.Document.updating">
            <summary>
            True if the document is currently updating.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Document.#ctor(ConnectQl.Intellisense.IntellisenseSession,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Intellisense.Document"/> class.
            </summary>
            <param name="session">
            The session.
            </param>
            <param name="filename">
            The filename.
            </param>
            <param name="contents">
            The contents.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Document.Contents">
            <summary>
            Gets or sets the contents.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Document.Filename">
            <summary>
            Gets the filename.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Document.Update(System.String)">
            <summary>
            Parses this document.
            </summary>
            <param name="documentText">
            The document Text.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Document.GetChanges(ConnectQl.Internal.Intellisense.Protocol.SerializableDocumentDescriptor)">
            <summary>
            Gets a serializable document containing the delta between the current document and the previous version.
            </summary>
            <param name="currentDocument">
            The current document.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Intellisense.Protocol.SerializableDocumentDescriptor"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Document.ParseDocument(System.String,ConnectQl.Internal.ParsedScript@)">
            <summary>
            Parses the content to a SerializableDocument.
            </summary>
            <param name="content">
            The content.
            </param>
            <param name="script">
            The script.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Intellisense.Protocol.SerializableDocumentDescriptor"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Document.TryUpdate``1(ConnectQl.Internal.Intellisense.Protocol.SerializableDocumentDescriptor,ConnectQl.Internal.Intellisense.Protocol.SerializableDocumentDescriptor,System.Linq.Expressions.Expression{System.Func{ConnectQl.Internal.Intellisense.Protocol.SerializableDocumentDescriptor,System.Collections.Generic.IReadOnlyList{``0}}})">
            <summary>
            Tries to update the property that the selector uses.
            </summary>
            <param name="newDocument">
            The new version of the document. Only non-null items are updated in the current document.
            </param>
            <param name="delta">
            The delta document. Has all changes that differ from the document.
            </param>
            <param name="selector">
            Returns the <see cref="T:System.Collections.Generic.IEnumerable`1"/> to update.
            </param>
            <typeparam name="T">
            The type of the items in the selector.
            </typeparam>
            <returns>
            True if the document was updated, false otherwise.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Intellisense.EvaluationResult">
            <summary>
                The statement info.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Intellisense.EvaluationResult.context">
            <summary>
                The context.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Intellisense.EvaluationResult.sources">
            <summary>
                The sources.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Intellisense.EvaluationResult.statements">
            <summary>
                The statementVariables.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Intellisense.EvaluationResult.tokens">
            <summary>
                The tokens.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Intellisense.EvaluationResult.variables">
            <summary>
                The ranges.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Intellisense.EvaluationResult.variablesValues">
            <summary>
                The variables values.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.EvaluationResult.#ctor(ConnectQl.Internal.ExecutionContextImplementation,System.Collections.Generic.IReadOnlyList{ConnectQl.Interfaces.IClassifiedToken})">
            <summary>
                Initializes a new instance of the <see cref="T:ConnectQl.Internal.Intellisense.EvaluationResult" /> class.
            </summary>
            <param name="context">
                The context.
            </param>
            <param name="tokens">
                The tokens.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.EvaluationResult.MaximumChunkSize">
            <summary>
                Gets the maximum chunk size.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.EvaluationResult.MaxRowsToScan">
            <summary>
                Gets the maximum rows to scan when determining the columns in a source.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.EvaluationResult.WriteProgressInterval">
            <summary>
            Gets the write progress interval.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.EvaluationResult.Sources">
            <summary>
                Gets the sources.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.EvaluationResult.Variables">
            <summary>
                Gets the variables.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.EvaluationResult.ConnectQl#Interfaces#IExecutionContext#FileFormats">
            <summary>
                Gets the available file formats.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.EvaluationResult.ConnectQl#Interfaces#IExecutionContext#Log">
            <summary>
                Gets the logger.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.EvaluationResult.GetDisplayName(ConnectQl.Interfaces.IDataAccess)">
            <summary>
                Gets the display name for the specified access.
            </summary>
            <param name="access">
                The access.
            </param>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.EvaluationResult.HasVariableSideEffects(System.String)">
            <summary>
                Checks if the variable has side effects.
            </summary>
            <param name="variable">
                The variable.
            </param>
            <returns>
                <c>true</c> if the variable has side effects, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.EvaluationResult.SetActiveStatement(ConnectQl.Internal.Ast.Statements.StatementBase)">
            <summary>
                Updates the current statement.
            </summary>
            <param name="statement">
                The statement.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.EvaluationResult.SetDisplayName(ConnectQl.Interfaces.IDataAccess,System.String)">
            <summary>
                Sets the display name.
            </summary>
            <param name="access">
                The access.
            </param>
            <param name="displayName">
                The display name.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.EvaluationResult.SetSource(System.String,ConnectQl.Interfaces.IDataSourceDescriptor)">
            <summary>
                Sets the source descriptor for this statement.
            </summary>
            <param name="sourceAlias">
                The source alias.
            </param>
            <param name="descriptor">
                The descriptor.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.EvaluationResult.ConnectQl#AsyncEnumerablePolicies#IMaterializationPolicy#CreateBuilder``1">
            <summary>
                Creates a builder that can be used to create an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1" />.
            </summary>
            <typeparam name="T">
                The type of the items.
            </typeparam>
            <returns>
                The <see cref="T:ConnectQl.AsyncEnumerablePolicies.IAsyncEnumerableBuilder`1" />.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.EvaluationResult.ConnectQl#Interfaces#IExecutionContext#GetDefault(System.String,ConnectQl.Interfaces.IDataAccess,System.Boolean)">
            <summary>
                Gets the default setting for a data source. A 'USE DEFAULT' statement can be used to set a default value for a
                function.
            </summary>
            <param name="setting">
                The default setting get the value for.
            </param>
            <param name="source">
                The data source to get the value for.
            </param>
            <param name="throwOnError">
                <c>true</c>to throw an exception when an error occurs.
            </param>
            <returns>
                The value for the function for the specified source.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.EvaluationResult.ConnectQl#Interfaces#IExecutionContext#GetVariable``1(System.String)">
            <summary>
                Gets the value for the specified variable.
            </summary>
            <typeparam name="T">
                The type of the variable.
            </typeparam>
            <param name="variable">
                The name of the variable, including the '@'.
            </param>
            <returns>
                The value of the variable.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.EvaluationResult.ConnectQl#Interfaces#IExecutionContext#OpenStreamAsync(System.String,ConnectQl.UriResolveMode)">
            <summary>
                Opens a file.
            </summary>
            <param name="uri">
                The uri of the file.
            </param>
            <param name="uriResolveMode">
                The file mode.
            </param>
            <returns>
                The stream containing the data of the file.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.EvaluationResult.ConnectQl#Internal#Interfaces#IInternalExecutionContext#RegisterDefault(System.String,System.String,System.Object)">
            <summary>
                Registers a default value for the specified target function and function name.
            </summary>
            <param name="setting">
                The setting to register.
            </param>
            <param name="functionName">
                The function name to register the setting for.
            </param>
            <param name="value">
                The value.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.EvaluationResult.ConnectQl#Internal#Interfaces#IInternalExecutionContext#SetFunctionName(ConnectQl.Interfaces.IDataAccess,System.String)">
            <summary>
                Sets the function name for the specified data source.
            </summary>
            <param name="access">
                The data access to set the name for.
            </param>
            <param name="functionName">
                The function name.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.EvaluationResult.ConnectQl#Internal#Interfaces#IInternalExecutionContext#SetVariable``1(System.String,``0)">
            <summary>
                Sets the variable to the specified value.
            </summary>
            <typeparam name="T">
                The type of the variable.
            </typeparam>
            <param name="variable">
                The name of the variable, including the '@'.
            </param>
            <param name="value">
                The value of the variable.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.EvaluationResult.ConnectQl#AsyncEnumerablePolicies#IMaterializationPolicy#SortAsync``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Comparison{``0})">
            <summary>
                Creates a new <see cref="T:ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection`1" /> that contains the sorted elements of the
                <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1" />.
            </summary>
            <param name="source">
                The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1" /> to sort.
            </param>
            <param name="comparison">
                The comparison to use while sorting.
            </param>
            <typeparam name="T">
                The type of the items.
            </typeparam>
            <returns>
                The sorted <see cref="T:ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection`1" />.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.EvaluationResult.SetVariable(System.String,System.Object,System.Boolean)">
            <summary>
                Sets the variable to the specified value.
            </summary>
            <param name="variable">
                The variable.
            </param>
            <param name="value">
                The value.
            </param>
            <param name="wasEvaluated">
                <c>true</c> if the variable was evaluated, <c>false</c> if it had side effects.
            </param>
        </member>
        <member name="T:ConnectQl.Internal.Intellisense.Evaluator">
            <summary>
            The interpreter.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Intellisense.Evaluator.parsedScript">
            <summary>
            The parsed script.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Intellisense.Evaluator.statements">
            <summary>
            The statements.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Evaluator.Sources">
            <summary>
            Gets the sources.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Evaluator.Variables">
            <summary>
            Gets the variables.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Evaluator.GetIntellisenseData(ConnectQl.Internal.ParsedScript,System.Collections.Generic.IReadOnlyList{ConnectQl.Interfaces.IClassifiedToken})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Intellisense.Evaluator"/> class.
            </summary>
            <param name="parsedScript">
            The parsed script.
            </param>
            <param name="tokens">
            The tokens.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Intellisense.EvaluationResult"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Evaluator.VisitUseStatement(ConnectQl.Internal.Ast.Statements.UseStatement)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Statements.UseStatement"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Evaluator.VisitVariableDeclaration(ConnectQl.Internal.Ast.VariableDeclaration)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.VariableDeclaration"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Evaluator.VisitSelectFromStatement(ConnectQl.Internal.Ast.Statements.SelectFromStatement)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Statements.SelectFromStatement"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Evaluator.Evaluate(ConnectQl.Internal.Ast.Expressions.SqlExpressionBase,System.Boolean@)">
            <summary>
            Evaluates the <see cref="T:ConnectQl.Internal.Ast.Expressions.SqlExpressionBase"/>.
            </summary>
            <param name="expression">
            The expression to evaluate.
            </param>
            <param name="sideEffects">
            <c>true</c> if the expression has side effects, <c>false</c> otherwise.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Evaluator.Evaluate(ConnectQl.Internal.Ast.Sources.SourceBase,System.Boolean@)">
            <summary>
            Evaluates the <see cref="T:ConnectQl.Internal.Ast.Sources.SourceBase"/>.
            </summary>
            <param name="expression">
            The expression to evaluate.
            </param>
            <param name="sideEffects">
            <c>true</c> if the expression has side effects, <c>false</c> otherwise.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Intellisense.IEvaluationResult">
            <summary>
                The EvaluationResult interface.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.IEvaluationResult.Sources">
            <summary>
                Gets the sources.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.IEvaluationResult.Variables">
            <summary>
                Gets the variables.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.Intellisense.Protocol.EnumerableComparer">
            <summary>
            The enumerable comparer.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.EnumerableComparer.Equals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks if two <see cref="T:System.Collections.Generic.IEnumerable`1"/>s are equal.
            </summary>
            <typeparam name="T">
            The type of the elements.
            </typeparam>
            <param name="x">
            The first value.
            </param>
            <param name="y">
            The second value.
            </param>
            <returns>
            <c>true</c> if the values are equal, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.EnumerableComparer.GetHashCode``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the hash code based on the elements in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">
            The type of the elements.
            </typeparam>
            <param name="obj">
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </param>
            <returns>
            The hash code.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Intellisense.Protocol.EnumerableComparer`1">
            <summary>
            The array comparer.
            </summary>
            <typeparam name="T">
            The type of the elements in the array.
            </typeparam>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.EnumerableComparer`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Intellisense.Protocol.EnumerableComparer`1"/> class.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.EnumerableComparer`1.Default">
            <summary>
            Gets the default <see cref="T:System.Collections.Generic.IEnumerable`1"/> comparer.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.EnumerableComparer`1.Equals(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if two <see cref="T:System.Collections.Generic.IEnumerable`1"/>s are equal.
            </summary>
            <param name="x">
            The first value.
            </param>
            <param name="y">
            The second value.
            </param>
            <returns>
            <c>true</c> if the values are equal, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.EnumerableComparer`1.GetHashCode(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Gets the hash code based on the elements in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </param>
            <returns>
            The hash code.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.EnumerableComparer`1.System#Collections#Generic#IEqualityComparer{System#Collections#Generic#IEnumerable{T}}#Equals(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Checks if two <see cref="T:System.Collections.Generic.IEnumerable`1"/>s are equal.
            </summary>
            <param name="x">
            The first value.
            </param>
            <param name="y">
            The second value.
            </param>
            <returns>
            <c>true</c> if the values are equal, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.EnumerableComparer`1.System#Collections#Generic#IEqualityComparer{System#Collections#Generic#IEnumerable{T}}#GetHashCode(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Gets the hash code based on the elements in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </param>
            <returns>
            The hash code.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Intellisense.Protocol.NotInProtocolAttribute">
            <summary>
            Marks a property as not in the protocol.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.Intellisense.Protocol.ProtocolSerializer">
            <summary>
            The protocol serializer.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Intellisense.Protocol.ProtocolSerializer.StreamWriteMethod">
            <summary>
            The <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)"/>method.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Intellisense.Protocol.ProtocolSerializer.StreamReadMethod">
            <summary>
            The <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/>method.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Intellisense.Protocol.ProtocolSerializer.StreamWriteByteMethod">
            <summary>
            The <see cref="M:System.IO.Stream.WriteByte(System.Byte)"/>method.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Intellisense.Protocol.ProtocolSerializer.StreamReadByteMethod">
            <summary>
            The <see cref="M:System.IO.Stream.ReadByte"/> method.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Intellisense.Protocol.ProtocolSerializer.EncodingGetStringMethod">
            <summary>
            The <see cref="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)"/> method.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Intellisense.Protocol.ProtocolSerializer.EncodingGetBytesMethod">
            <summary>
            The <see cref="M:System.Text.Encoding.GetBytes(System.String)"/> method.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.ProtocolSerializer.Deserialize``1(System.Byte[])">
            <summary>
            Deserializes the specified serialized value.
            </summary>
            <typeparam name="T">
            The type of the value to deserialize.
            </typeparam>
            <param name="serialized">The serialized value.</param>
            <returns>
            The value.
            </returns>
            <exception cref="T:ConnectQl.Internal.Intellisense.Protocol.ProtocolSerializerException">
            Thrown when initialization fails.
            </exception>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.ProtocolSerializer.Serialize``1(``0)">
            <summary>
            Serializes the specified value.
            </summary>
            <typeparam name="T">
            The type of the value.
            </typeparam>
            <param name="value">The value.</param>
            <returns>The value serialized in a byte arry.</returns>
            <exception cref="T:ConnectQl.Internal.Intellisense.Protocol.ProtocolSerializerException">
            Thrown when initialization fails.
            </exception>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.ProtocolSerializer.ReadBytes(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Creates an expression that reads the specified number of bytes from the stream.
            </summary>
            <param name="stream">
            The lambda parameter that holds the stream.
            </param>
            <param name="length">
            The number of bytes to read.
            </param>
            <returns>
            An expression returning a byte array.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.ProtocolSerializer.ReadString(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Creates an expression that reads a string from a stream.
            </summary>
            <param name="stream">
            The lambda parameter that holds the stream.
            </param>
            <returns>
            An expression that returns the string.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.ProtocolSerializer.WriteString(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Creates an expression that writes a string to a stream.
            </summary>
            <param name="stream">
            The lambda parameter that holds the stream.
            </param>
            <param name="value">
            The value to write.
            </param>
            <returns>
            An expression that writes the string.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.ProtocolSerializer.ReadAndCallBitConverter``1(System.Func{System.Byte[],System.Int32,``0},System.Linq.Expressions.ParameterExpression,System.Int32)">
            <summary>
            Creates an expression that reads and calls the bit converter.
            </summary>
            <typeparam name="T">
            The type to convert to.
            </typeparam>
            <param name="bitConverter">The bit converter.</param>
            <param name="stream">The stream.</param>
            <param name="sizeInBytes">The size in bytes.</param>
            <returns>
            The expression.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.ProtocolSerializer.WriteBytes``1(System.Func{``0,System.Byte[]},System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Creates an expression that writes the bytes.
            </summary>
            <typeparam name="T">
            The type of the value to write.
            </typeparam>
            <param name="bitConverter">The bit converter.</param>
            <param name="stream">The stream.</param>
            <param name="value">The value.</param>
            <returns>
            The expression.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.ProtocolSerializer.ReadObject(System.Linq.Expressions.ParameterExpression,System.Type)">
            <summary>
            Writes an expression that reads the object.
            </summary>
            <param name="stream">The stream.</param>
            <param name="type">The type.</param>
            <returns>
            The expression.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.ProtocolSerializer.WriteObject(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Creates an expression that writes the object.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value.</param>
            <returns>
            The expression.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.ProtocolSerializer.WriteValue(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Creates an expression that writes the value.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value.</param>
            <returns>
            The expression.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.ProtocolSerializer.WriteEnumerable(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Creates an expression that writes the enumerable.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.ProtocolSerializer.ReadValue(System.Linq.Expressions.ParameterExpression,System.Type)">
            <summary>
            Generates an expression that reads a item from the stream.
            </summary>
            <param name="stream">
            The stream to read from.
            </param>
            <param name="type">
            The type of object to read.
            </param>
            <returns>
            An expression that returns the value from a stream.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.ProtocolSerializer.ReadEnumerable(System.Linq.Expressions.ParameterExpression,System.Type,System.Type)">
            <summary>
            Reads the enumerable.
            </summary>
            <param name="stream">The stream.</param>
            <param name="type">The type.</param>
            <param name="enumerableType">Type of the enumerable.</param>
            <returns>An expression that reads an enumerable from a stream.</returns>
        </member>
        <member name="T:ConnectQl.Internal.Intellisense.Protocol.ProtocolSerializer.ProtocolSerializerImplementation`1">
            <summary>
            Implements the procol serializer for a specific type.
            </summary>
            <typeparam name="T">The type of the type.</typeparam>
        </member>
        <member name="F:ConnectQl.Internal.Intellisense.Protocol.ProtocolSerializer.ProtocolSerializerImplementation`1.Read">
            <summary>
            Lambda that read an object from the stream.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Intellisense.Protocol.ProtocolSerializer.ProtocolSerializerImplementation`1.Write">
            <summary>
            Lambda that writes an object to the stream.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Intellisense.Protocol.ProtocolSerializer.ProtocolSerializerImplementation`1.InitializeError">
            <summary>
            Contains the error when initialization fails.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.ProtocolSerializer.ProtocolSerializerImplementation`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ConnectQl.Internal.Intellisense.Protocol.ProtocolSerializer.ProtocolSerializerImplementation`1"/> class.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.Intellisense.Protocol.ProtocolSerializerException">
            <summary>
            Thrown when an error occurs while serializing an object.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.ProtocolSerializerException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Intellisense.Protocol.ProtocolSerializerException" /> class.
            </summary>
            <param name="e">The inner exception.</param>
        </member>
        <member name="T:ConnectQl.Internal.Intellisense.Protocol.SerializableArgumentDescriptor">
            <summary>
            The serializable argument descriptor.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableArgumentDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Intellisense.Protocol.SerializableArgumentDescriptor"/> class.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableArgumentDescriptor.#ctor(ConnectQl.Interfaces.IArgumentDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Intellisense.Protocol.SerializableArgumentDescriptor"/> class.
            </summary>
            <param name="argument">
            The argument.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableArgumentDescriptor.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableArgumentDescriptor.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableArgumentDescriptor.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableArgumentDescriptor.ConnectQl#Interfaces#IArgumentDescriptor#Type">
            <summary>
            Gets the argument type.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableArgumentDescriptor.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableArgumentDescriptor.GetHashCode">
            <summary>
            Returns the hash code for this string.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Intellisense.Protocol.SerializableColumnDescriptor">
            <summary>
            The serializable column descriptor.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableColumnDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Intellisense.Protocol.SerializableColumnDescriptor"/> class.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableColumnDescriptor.#ctor(ConnectQl.Interfaces.IColumnDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Intellisense.Protocol.SerializableColumnDescriptor"/> class.
            </summary>
            <param name="columnDescriptor">
            The column descriptor.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableColumnDescriptor.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableColumnDescriptor.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableColumnDescriptor.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableColumnDescriptor.ConnectQl#Interfaces#IColumnDescriptor#Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableColumnDescriptor.Equals(System.Object)">
            <summary>
            The equals.
            </summary>
            <param name="obj">
            The other.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableColumnDescriptor.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Intellisense.Protocol.SerializableDataSourceDescriptor">
            <summary>
            The serializable data source descriptor.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableDataSourceDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Intellisense.Protocol.SerializableDataSourceDescriptor"/> class.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableDataSourceDescriptor.#ctor(ConnectQl.Interfaces.IDataSourceDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Intellisense.Protocol.SerializableDataSourceDescriptor"/> class.
            </summary>
            <param name="source">
            The source.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableDataSourceDescriptor.Alias">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableDataSourceDescriptor.AllowsAnyColumnName">
            <summary>
            Gets or sets a value indicating whether the data source allows any column name, or only the columns returned by
                <see cref="P:ConnectQl.Interfaces.IDataSourceDescriptor.Columns"/>.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableDataSourceDescriptor.Columns">
            <summary>
            Gets or sets the columns for this data source.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableDataSourceDescriptor.ConnectQl#Interfaces#IDataSourceDescriptor#Columns">
            <summary>
            Gets gets or sets the columns for this data source.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableDataSourceDescriptor.Equals(System.Object)">
            <summary>
            The equals.
            </summary>
            <param name="obj">
            The other.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableDataSourceDescriptor.GetHashCode">
            <summary>
            The get hash code.
            </summary>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Intellisense.Protocol.SerializableDataSourceDescriptorRange">
            <summary>
            The serializable data source range.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableDataSourceDescriptorRange.DataSource">
            <summary>
            Gets or sets the data source.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableDataSourceDescriptorRange.End">
            <summary>
            Gets or sets the end.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableDataSourceDescriptorRange.Start">
            <summary>
            Gets or sets the start.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableDataSourceDescriptorRange.ConnectQl#Interfaces#IDataSourceDescriptorRange#DataSource">
            <summary>
            Gets the data source.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableDataSourceDescriptorRange.Equals(System.Object)">
            <summary>
            The equals.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableDataSourceDescriptorRange.GetHashCode">
            <summary>
            The get hash code.
            </summary>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Intellisense.Protocol.SerializableDocumentDescriptor">
            <summary>
            The serializable document.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableDocumentDescriptor.Functions">
            <summary>
            Gets or sets the functions.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableDocumentDescriptor.Messages">
            <summary>
            Gets or sets the messages.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableDocumentDescriptor.Plugins">
            <summary>
            Gets or sets the plugins.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableDocumentDescriptor.Sources">
            <summary>
            Gets or sets the tokens.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableDocumentDescriptor.Tokens">
            <summary>
            Gets or sets the tokens.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableDocumentDescriptor.Variables">
            <summary>
            Gets or sets the tokens.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableDocumentDescriptor.ConnectQl#Interfaces#IDocumentDescriptor#Functions">
            <summary>
            Gets the functions.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableDocumentDescriptor.ConnectQl#Interfaces#IDocumentDescriptor#Messages">
            <summary>
            Gets the messages.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableDocumentDescriptor.ConnectQl#Interfaces#IDocumentDescriptor#Sources">
            <summary>
            Gets the sources.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableDocumentDescriptor.ConnectQl#Interfaces#IDocumentDescriptor#Tokens">
            <summary>
            Gets the tokens.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableDocumentDescriptor.ConnectQl#Interfaces#IDocumentDescriptor#Variables">
            <summary>
            Gets the variables.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableDocumentDescriptor.ConnectQl#Interfaces#IDocumentDescriptor#Plugins">
            <summary>
            Gets the plugins.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableDocumentDescriptor.Equals(System.Object)">
            <summary>
            The equals.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableDocumentDescriptor.GetHashCode">
            <summary>
            The get hash code.
            </summary>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Intellisense.Protocol.SerializableFunctionDescriptor">
            <summary>
            The serializable function descriptor.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableFunctionDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Intellisense.Protocol.SerializableFunctionDescriptor"/> class.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableFunctionDescriptor.#ctor(System.String,ConnectQl.Interfaces.IFunctionDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Intellisense.Protocol.SerializableFunctionDescriptor"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="function">
            The function.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableFunctionDescriptor.HasSideEffects">
            <summary>
            Gets or sets a value indicating whether the function has side effects and should not be evaluated for IntelliSense.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableFunctionDescriptor.Arguments">
            <summary>
            Gets or sets the arguments.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableFunctionDescriptor.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableFunctionDescriptor.IsAggregateFunction">
            <summary>
            Gets or sets a value indicating whether this function is an aggregate function.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableFunctionDescriptor.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableFunctionDescriptor.ReturnType">
            <summary>
            Gets or sets the return type.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableFunctionDescriptor.ConnectQl#Interfaces#IFunctionDescriptor#Arguments">
            <summary>
            Gets the arguments.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableFunctionDescriptor.ConnectQl#Interfaces#IFunctionDescriptor#ReturnType">
            <summary>
            Gets the return type.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableFunctionDescriptor.DisplayName">
            <summary>
            Gets the display name.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableFunctionDescriptor.Equals(System.Object)">
            <summary>
            The equals.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableFunctionDescriptor.GetHashCode">
            <summary>
            The get hash code.
            </summary>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableFunctionDescriptor.ConnectQl#Interfaces#IFunctionDescriptor#GetExpression">
            <summary>
            Gets the lambda expression.
            </summary>
            <returns>
            The lambda expression, or <c>null</c> if it's not supported.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableFunctionDescriptor.Equals(ConnectQl.Internal.Intellisense.Protocol.SerializableFunctionDescriptor)">
            <summary>
            The equals.
            </summary>
            <param name="other">
            The other.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Intellisense.Protocol.SerializableMessage">
            <summary>
            The serializable message.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Intellisense.Protocol.SerializableMessage"/> class.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableMessage.#ctor(ConnectQl.Internal.Results.Message)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Intellisense.Protocol.SerializableMessage"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableMessage.End">
            <summary>
            Gets or sets the end.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableMessage.File">
            <summary>
            Gets or sets the file.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableMessage.Start">
            <summary>
            Gets or sets the start.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableMessage.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableMessage.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableMessage.Equals(System.Object)">
            <summary>
            The equals.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableMessage.GetHashCode">
            <summary>
            The get hash code.
            </summary>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Intellisense.Protocol.SerializableToken">
            <summary>
            The serializable token.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Intellisense.Protocol.SerializableToken"/> class.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableToken.#ctor(ConnectQl.Interfaces.IClassifiedToken)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Intellisense.Protocol.SerializableToken"/> class.
            </summary>
            <param name="token">
            The token.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableToken.Classification">
            <summary>
            Gets or sets the classification.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableToken.End">
            <summary>
            Gets gets or sets the end.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableToken.Length">
            <summary>
            Gets the length.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableToken.Scope">
            <summary>
            Gets or sets the scope.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableToken.Start">
            <summary>
            Gets or sets the start.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableToken.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableToken.Equals(System.Object)">
            <summary>
            The equals.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableToken.GetHashCode">
            <summary>
            The get hash code.
            </summary>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Intellisense.Protocol.SerializableTypeDescriptor">
            <summary>
            The serializable type descriptor.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableTypeDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Intellisense.Protocol.SerializableTypeDescriptor"/> class.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableTypeDescriptor.#ctor(ConnectQl.Interfaces.ITypeDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Intellisense.Protocol.SerializableTypeDescriptor"/> class.
            </summary>
            <param name="argumentType">
            The argument type.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableTypeDescriptor.Interfaces">
            <summary>
            Gets or sets the interfaces.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableTypeDescriptor.SimplifiedType">
            <summary>
            Gets or sets the simplified type.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableTypeDescriptor.ConnectQl#Interfaces#ITypeDescriptor#Interfaces">
            <summary>
            Gets the implemented interfaces.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableTypeDescriptor.ConnectQl#Interfaces#ITypeDescriptor#SimplifiedType">
            <summary>
            Gets the simplified type.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableTypeDescriptor.Equals(System.Object)">
            <summary>
            The equals.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableTypeDescriptor.GetHashCode">
            <summary>
            The get hash code.
            </summary>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableTypeDescriptor.ToString">
            <summary>
            Converts the type descriptor to a string.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Intellisense.Protocol.SerializableVariableDescriptor">
            <summary>
            The serializable variable descriptor.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableVariableDescriptor.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableVariableDescriptor.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableVariableDescriptor.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableVariableDescriptor.WasEvaluated">
            <summary>
            Gets or sets a value indicating whether the variable was evaluated.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableVariableDescriptor.ConnectQl#Interfaces#IVariableDescriptor#Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableVariableDescriptor.Equals(System.Object)">
            <summary>
            The equals.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableVariableDescriptor.GetHashCode">
            <summary>
            The get hash code.
            </summary>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Intellisense.Protocol.SerializableVariableDescriptorRange">
            <summary>
            The serializable variable descriptor range.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableVariableDescriptorRange.End">
            <summary>
            Gets or sets the end.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableVariableDescriptorRange.Start">
            <summary>
            Gets or sets the start.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableVariableDescriptorRange.Variable">
            <summary>
            Gets or sets the variable.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Intellisense.Protocol.SerializableVariableDescriptorRange.ConnectQl#Interfaces#IVariableDescriptorRange#Variable">
            <summary>
            Gets the variable.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableVariableDescriptorRange.Equals(System.Object)">
            <summary>
            The equals.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Intellisense.Protocol.SerializableVariableDescriptorRange.GetHashCode">
            <summary>
            The get hash code.
            </summary>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Interfaces.IFunctionDictionary">
            <summary>
            The FunctionDictionary interface.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Interfaces.IFunctionDictionary.Dictionary">
            <summary>
            Gets the dictionary containing the functions.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.Interfaces.IInternalExecutionContext">
            <summary>
            The InternalExecutionContext interface.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Interfaces.IInternalExecutionContext.SetVariable``1(System.String,``0)">
            <summary>
            Sets the variable to the specified value.
            </summary>
            <typeparam name="T">
            The type of the variable.
            </typeparam>
            <param name="variable">
            The name of the variable, including the '@'.
            </param>
            <param name="value">
            The value of the variable.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Interfaces.IInternalExecutionContext.SetFunctionName(ConnectQl.Interfaces.IDataAccess,System.String)">
            <summary>
            Sets the function name for the specified data access.
            </summary>
            <param name="access">
            The data access to set the name for.
            </param>
            <param name="functionName">
            The function name.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Interfaces.IInternalExecutionContext.SetDisplayName(ConnectQl.Interfaces.IDataAccess,System.String)">
            <summary>
            Sets the display name.
            </summary>
            <param name="access">
            The access.
            </param>
            <param name="displayName">
            The display name.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Interfaces.IInternalExecutionContext.RegisterDefault(System.String,System.String,System.Object)">
            <summary>
            Registers a default value for the specified target function and function name.
            </summary>
            <param name="setting">
            The setting to register.
            </param>
            <param name="functionName">
            The function name to register the setting for.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Interfaces.IInternalExecutionContext.GetDisplayName(ConnectQl.Interfaces.IDataAccess)">
            <summary>
            Gets the display name for the specified access.
            </summary>
            <param name="access">
            The access.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Interfaces.IMessageWriter">
            <summary>
            The MessageWriter interface.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Interfaces.IMessageWriter.HasErrors">
            <summary>
            Gets a value indicating whether has errors.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Interfaces.IMessageWriter.AddError(ConnectQl.Results.Position,ConnectQl.Results.Position,System.String)">
            <summary>
            The add error.
            </summary>
            <param name="start">
            The start.
            </param>
            <param name="end">
            The end.
            </param>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Interfaces.IMessageWriter.AddWarning(ConnectQl.Results.Position,ConnectQl.Results.Position,System.String)">
            <summary>
            The add warning.
            </summary>
            <param name="start">
            The start.
            </param>
            <param name="end">
            The end.
            </param>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Interfaces.IMessageWriter.AddInformation(ConnectQl.Results.Position,ConnectQl.Results.Position,System.String)">
            <summary>
            The add information.
            </summary>
            <param name="start">
            The start.
            </param>
            <param name="end">
            The end.
            </param>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="T:ConnectQl.Internal.Interfaces.IMultiPartQuery">
            <summary>
            The InternalQuery interface.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Interfaces.IMultiPartQuery.FilterExpression">
            <summary>
            Gets the filter expression.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Interfaces.IMultiPartQuery.OrderByExpressions">
            <summary>
            Gets the order by expressions.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Interfaces.IMultiPartQuery.Fields">
            <summary>
            Gets the fields.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Interfaces.IMultiPartQuery.WildcardAliases">
            <summary>
            Gets the wildcard aliases.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Interfaces.IMultiPartQuery.Count">
            <summary>
            Gets the number of records to retrieve. When this is <c>null</c>, all records are retrieved.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.Interfaces.INodeDataProvider">
            <summary>
            The NodeDataProvider interface.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Interfaces.INodeDataProvider.Get``1(ConnectQl.Internal.Ast.Node,System.String)">
            <summary>
            Gets the data for the node.
            </summary>
            <param name="node">
            The node to get the data for.
            </param>
            <param name="data">
            The name of the data to get (e.g. 'Type' or 'Scope').
            </param>
            <typeparam name="T">
            The type of the data to get.
            </typeparam>
            <returns>
            The data for the node.
            </returns>
            <exception cref="T:ConnectQl.Internal.Validation.NodeException">
            Thrown when no data is found.
            </exception>
        </member>
        <member name="M:ConnectQl.Internal.Interfaces.INodeDataProvider.Set``1(ConnectQl.Internal.Ast.Node,System.String,``0)">
            <summary>
            Sets the data for the specified node.
            </summary>
            <param name="node">
            The node.
            </param>
            <param name="data">
            The name of the data to set (e.g. 'Type' or 'Scope').
            </param>
            <param name="value">
            The value to set.
            </param>
            <typeparam name="T">
            The type of the value to set.
            </typeparam>
        </member>
        <member name="M:ConnectQl.Internal.Interfaces.INodeDataProvider.TryGet``1(ConnectQl.Internal.Ast.Node,System.String,``0@)">
            <summary>
            Tries to get the data for the node.
            </summary>
            <param name="node">
            The node to get the data for.
            </param>
            <param name="data">
            The name of the data to get (e.g. 'Type' or 'Scope').
            </param>
            <param name="value">
            The data for the node, if data exists.
            </param>
            <typeparam name="T">
            The type of the data to get.
            </typeparam>
            <returns>
            <c>true</c> if the data was found, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Interfaces.INodeDataProvider.CopyValues``1(``0,``0,System.Boolean)">
            <summary>
            Transfers the data from a node to another node.
            </summary>
            <param name="from">
            The from.
            </param>
            <param name="to">
            The to.
            </param>
            <param name="overwrite">
            <c>true</c> to overwrite values that already existed, <c>false</c> to keep them.
            </param>
            <typeparam name="T">
            The type of the node.
            </typeparam>
            <returns>
            The node that received the data.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Interfaces.INodeDataProvider.GetAllValues(ConnectQl.Internal.Ast.Node)">
            <summary>
            Gets all values for the node.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            An enumerable of keys and values.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Interfaces.IParserContext">
            <summary>
            The ParserContext interface.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Interfaces.IParserContext.Start">
            <summary>
            Gets the start.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Interfaces.IParserContext.End">
            <summary>
            Gets the end.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.Interfaces.IQueryPlan">
            <summary>
            The QueryPlan interface.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Interfaces.IQueryPlan.ExecuteAsync(ConnectQl.Internal.Interfaces.IInternalExecutionContext)">
            <summary>
            Executes the plan.
            </summary>
            <param name="context">
            The context.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Results.ExecuteResult"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Interfaces.IResult">
            <summary>
            The Result interface.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Interfaces.IResult.Errors">
            <summary>
            Gets the errors.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Interfaces.IResult.Warnings">
            <summary>
            Gets the warnings.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Interfaces.IResult.InformationMessages">
            <summary>
            Gets the information messages.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Interfaces.IResult.GetNodeData``1(ConnectQl.Internal.Ast.Node,System.String)">
            <summary>
            Gets the node data for the specified node.
            </summary>
            <typeparam name="T">
            The type of the result.
            </typeparam>
            <param name="node">
            The node.
            </param>
            <param name="type">
            The type of the data to get.
            </param>
            <returns>
            The data, or <c>default{T}</c> if no data is available.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Interfaces.IResultBuilder">
            <summary>
            The ParseResult interface.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Interfaces.IResultBuilder.AddNodeData``1(ConnectQl.Internal.Ast.Node,System.String,``0)">
            <summary>
            Adds data to the specified node.
            </summary>
            <param name="node">
            The node to add data to.
            </param>
            <param name="type">
            The type of the data.
            </param>
            <param name="data">
            The data to add to the node.
            </param>
            <typeparam name="T">
            The type of the data to write.
            </typeparam>
            <returns>
            The data that was added.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Interfaces.IResultBuilder.RemoveNodeData(ConnectQl.Internal.Ast.Node,System.String)">
            <summary>
            Removes the data from the node.
            </summary>
            <param name="node">
            The node.
            </param>
            <param name="type">
            The type of the data to remove.
            </param>
            <returns>
            <c>true</c> if the node was removed, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Interfaces.IResultBuilder.TransferData(ConnectQl.Internal.Ast.Node,ConnectQl.Internal.Ast.Node,System.Boolean)">
            <summary>
            Transfers the data from one node to another.
            </summary>
            <param name="from">
            The node to transfer all data from.
            </param>
            <param name="to">
            The node to transfer all data to.
            </param>
            <param name="overwrite">
            When <c>true</c>, overwrites duplicate values in <paramref name="to"/>, when <c>false</c>, keeps the original
                values.
            </param>
            <returns>
            <c>true</c> if data was moved, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Interfaces.IResultBuilder.AddError(ConnectQl.Results.Position,ConnectQl.Results.Position,System.String)">
            <summary>
            Adds an error to the result.
            </summary>
            <param name="start">
            The start position where the error was found.
            </param>
            <param name="end">
            The end position where the error was found.
            </param>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Interfaces.IResultBuilder.AddWarning(ConnectQl.Results.Position,ConnectQl.Results.Position,System.String)">
            <summary>
            Adds a warning to the result.
            </summary>
            <param name="start">
            The start position where the warning was found.
            </param>
            <param name="end">
            The end position where the warning was found.
            </param>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Interfaces.IResultBuilder.AddInformation(ConnectQl.Results.Position,ConnectQl.Results.Position,System.String)">
            <summary>
            Adds an information message to the result.
            </summary>
            <param name="start">
            The start position where the information message was found.
            </param>
            <param name="end">
            The end position where the information message was found.
            </param>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="T:ConnectQl.Internal.Interfaces.IValidationContext">
            <summary>
            The ValidationContext interface.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Interfaces.IValidationContext.NodeData">
            <summary>
            Gets the node data.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Interfaces.IValidationContext.Messages">
            <summary>
            Gets the messages.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Interfaces.IValidationContext.FileFormats">
            <summary>
            Gets the file formats.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Interfaces.IValidationContext.GetPlugins">
            <summary>
            Gets the plugin with the specified name.
            </summary>
            <returns>
            The plugin, or <c>null</c> if it wasn't found.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Loggers.NullLogger">
            <summary>
            The null logger.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Loggers.NullLogger.messages">
            <summary>
            The messages.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Loggers.NullLogger.Debug(System.String,System.Object[])">
            <summary>
            Writes a debug message to the log.
            </summary>
            <param name="format">
            The format string.
            </param>
            <param name="args">
            The objects to format.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Loggers.NullLogger.Error(System.String,System.Object[])">
            <summary>
            Writes a error message to the log.
            </summary>
            <param name="format">
            The format string.
            </param>
            <param name="args">
            The objects to format.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Loggers.NullLogger.ForwardMessages(ConnectQl.Interfaces.ILog)">
            <summary>
            Forwards written messages to a logger.
            </summary>
            <param name="to">
            The logger to forward to.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Loggers.NullLogger.Information(System.String,System.Object[])">
            <summary>
            Writes an information message to the log.
            </summary>
            <param name="format">
            The format string.
            </param>
            <param name="args">
            The objects to format.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Loggers.NullLogger.Verbose(System.String,System.Object[])">
            <summary>
            Writes a verbose message to the log.
            </summary>
            <param name="format">
            The format string.
            </param>
            <param name="args">
            The objects to format.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Loggers.NullLogger.Warning(System.String,System.Object[])">
            <summary>
            Writes a warning message to the log.
            </summary>
            <param name="format">
            The format string.
            </param>
            <param name="args">
            The objects to format.
            </param>
        </member>
        <member name="T:ConnectQl.Internal.MessageWriter">
            <summary>
            The message writer.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.MessageWriter.file">
            <summary>
            The file.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.MessageWriter.messages">
            <summary>
            The messages.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.MessageWriter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.MessageWriter"/> class.
            </summary>
            <param name="file">
            The file.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.MessageWriter.Errors">
            <summary>
            Gets the errors.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.MessageWriter.HasErrors">
            <summary>
            Gets a value indicating whether the message writer has any errors.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.MessageWriter.GetEnumerator">
            <summary>
            The get enumerator.
            </summary>
            <returns>
            The <see cref="T:System.Collections.IEnumerator"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.MessageWriter.ConnectQl#Internal#Interfaces#IMessageWriter#AddError(ConnectQl.Results.Position,ConnectQl.Results.Position,System.String)">
            <summary>
            The add error.
            </summary>
            <param name="start">
            The start.
            </param>
            <param name="end">
            The end.
            </param>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.MessageWriter.ConnectQl#Internal#Interfaces#IMessageWriter#AddInformation(ConnectQl.Results.Position,ConnectQl.Results.Position,System.String)">
            <summary>
            The add information.
            </summary>
            <param name="start">
            The start.
            </param>
            <param name="end">
            The end.
            </param>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.MessageWriter.ConnectQl#Internal#Interfaces#IMessageWriter#AddWarning(ConnectQl.Results.Position,ConnectQl.Results.Position,System.String)">
            <summary>
            The add warning.
            </summary>
            <param name="start">
            The start.
            </param>
            <param name="end">
            The end.
            </param>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.MessageWriter.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            The get enumerator.
            </summary>
            <returns>
            The <see cref="T:System.Collections.IEnumerator"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.NodeDataProvider">
            <summary>
            The node data.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.NodeDataProvider.nodeData">
            <summary>
            The node data.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.NodeDataProvider.GetAllValues(ConnectQl.Internal.Ast.Node)">
            <summary>
            Gets all values for the node.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            An enumerable of keys and values.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.NodeDataProvider.ConnectQl#Internal#Interfaces#INodeDataProvider#CopyValues``1(``0,``0,System.Boolean)">
            <summary>
            Transfers the data from a node to another node.
            </summary>
            <param name="from">
            The from.
            </param>
            <param name="to">
            The to.
            </param>
            <param name="overwrite">
            <c>true</c> to overwrite values that already existed, <c>false</c> to keep them.
            </param>
            <typeparam name="T">
            The type of the node.
            </typeparam>
            <returns>
            The node that received the data.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.NodeDataProvider.ConnectQl#Internal#Interfaces#INodeDataProvider#Get``1(ConnectQl.Internal.Ast.Node,System.String)">
            <summary>
            Gets the data for the node.
            </summary>
            <param name="node">
            The node to get the data for.
            </param>
            <param name="data">
            The name of the data to get (e.g. 'Type' or 'Scope').
            </param>
            <typeparam name="T">
            The type of the data to get.
            </typeparam>
            <returns>
            The data for the node.
            </returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Thrown when no data is found.
            </exception>
        </member>
        <member name="M:ConnectQl.Internal.NodeDataProvider.ConnectQl#Internal#Interfaces#INodeDataProvider#Set``1(ConnectQl.Internal.Ast.Node,System.String,``0)">
            <summary>
            Sets the data for the specified node.
            </summary>
            <param name="node">
            The node.
            </param>
            <param name="data">
            The name of the data to set (e.g. 'Type' or 'Scope').
            </param>
            <param name="value">
            The value to set.
            </param>
            <typeparam name="T">
            The type of the value to set.
            </typeparam>
        </member>
        <member name="M:ConnectQl.Internal.NodeDataProvider.ConnectQl#Internal#Interfaces#INodeDataProvider#TryGet``1(ConnectQl.Internal.Ast.Node,System.String,``0@)">
            <summary>
            Tries to get the data for the node.
            </summary>
            <param name="node">
            The node to get the data for.
            </param>
            <param name="data">
            The name of the data to get (e.g. 'Type' or 'Scope').
            </param>
            <param name="value">
            The data for the node, if data exists.
            </param>
            <typeparam name="T">
            The type of the data to get.
            </typeparam>
            <returns>
            <c>true</c> if the data was found, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.ParsedScript">
            <summary>
            The parsed script.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.ParsedScript.#ctor(ConnectQl.Internal.ExecutionContextImplementation,ConnectQl.Internal.Ast.Statements.Block)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.ParsedScript"/> class.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="root">
            The script root.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.ParsedScript.Context">
            <summary>
            Gets the context.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.ParsedScript.Filename">
            <summary>
            Gets the filename.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.ParsedScript.Root">
            <summary>
            Gets the script.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.Plugins.DefaultFunctions">
            <summary>
            The default functions.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.Plugins.DefaultFunctions.DateDiffType">
            <summary>
            The date diff type.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Plugins.DefaultFunctions.DateDiffType.Millisecond">
            <summary>
            The millisecond.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Plugins.DefaultFunctions.DateDiffType.Milliseconds">
            <summary>
            The milliseconds.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Plugins.DefaultFunctions.DateDiffType.Second">
            <summary>
            The second.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Plugins.DefaultFunctions.DateDiffType.Seconds">
            <summary>
            The seconds.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Plugins.DefaultFunctions.DateDiffType.Minute">
            <summary>
            The minute.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Plugins.DefaultFunctions.DateDiffType.Minutes">
            <summary>
            The minutes.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Plugins.DefaultFunctions.DateDiffType.Hour">
            <summary>
            The hour.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Plugins.DefaultFunctions.DateDiffType.Hours">
            <summary>
            The hours.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Plugins.DefaultFunctions.DateDiffType.Day">
            <summary>
            The day.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Plugins.DefaultFunctions.DateDiffType.Days">
            <summary>
            The days.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Plugins.DefaultFunctions.DateDiffType.Week">
            <summary>
            The week.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Plugins.DefaultFunctions.DateDiffType.Weeks">
            <summary>
            The weeks.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Plugins.DefaultFunctions.DateDiffType.Month">
            <summary>
            The month.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Plugins.DefaultFunctions.DateDiffType.Months">
            <summary>
            The months.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Plugins.DefaultFunctions.DateDiffType.Year">
            <summary>
            The year.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Plugins.DefaultFunctions.DateDiffType.Years">
            <summary>
            The years.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Plugins.DefaultFunctions.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Plugins.DefaultFunctions.RegisterPlugin(ConnectQl.Interfaces.IPluginContext)">
            <summary>
            The register plugin.
            </summary>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Plugins.DefaultFunctions.ToInt(System.Object)">
            <summary>
            Converts a value to an int.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The value as int or <c>null</c> if it cannot be converted.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Plugins.DefaultFunctions.ToFloat(System.Object)">
            <summary>
            Converts a value to a float.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The value as float or <c>null</c> if it cannot be converted.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Plugins.DefaultFunctions.AfterJob(System.String)">
            <summary>
            The interval trigger.
            </summary>
            <param name="jobName">
            The job name.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.ITrigger"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Plugins.DefaultFunctions.Classify(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Classifies the value by lookup it up in the <paramref name="classes"/> and returning the corresponding
                <paramref name="value"/>.
            </summary>
            <param name="value">
            The value to classify.
            </param>
            <param name="classes">
            The options to find, separated by <paramref name="separator"/>.
            </param>
            <param name="values">
            The values to replace the classes with, separated by <paramref name="separator"/>.
            </param>
            <param name="separator">
            The separator.
            </param>
            <param name="defaultValue">
            The default value.
            </param>
            <returns>
            The value belonging to the classes, or defaultValue if it's not null, or value if defaultValue is null.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Plugins.DefaultFunctions.DateAdd(ConnectQl.Internal.Plugins.DefaultFunctions.DateDiffType,System.DateTime,System.Double)">
            <summary>
            Adds a value to the specified date.
            </summary>
            <param name="type">
            The type of date difference that will be added.
            </param>
            <param name="datetime">
            The date/time.
            </param>
            <param name="value">
            The value to add.
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
            <exception cref="T:System.Exception">
            Thrown when an invalid date difference type is provided.
            </exception>
        </member>
        <member name="M:ConnectQl.Internal.Plugins.DefaultFunctions.DateDiff(ConnectQl.Internal.Plugins.DefaultFunctions.DateDiffType,System.DateTime,System.DateTime)">
            <summary>
            Calculates the difference between two dates.
            </summary>
            <param name="type">
            The type of the difference to calculate.
            </param>
            <param name="first">
            The first date.
            </param>
            <param name="second">
            The second date.
            </param>
            <returns>
            The difference.
            </returns>
            <exception cref="T:System.Exception">
            Thrown when an invalid date difference type is provided.
            </exception>
        </member>
        <member name="M:ConnectQl.Internal.Plugins.DefaultFunctions.GetIso8601WeekOfYear(System.DateTime)">
            <summary>
            This presumes that weeks start with Monday.
                Week 1 is the 1st week of the year with a Thursday in it.
            </summary>
            <param name="time">
            The time to get the week of the year for.
            </param>
            <returns>
            The week number.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Plugins.DefaultFunctions.Interval(System.TimeSpan)">
            <summary>
            The interval trigger.
            </summary>
            <param name="interval">
            The interval.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.ITrigger"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Plugins.DefaultFunctions.Parse(System.String)">
            <summary>
            The parse.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Plugins.DefaultFunctions.ToDateStamp(System.DateTime)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> to a date stamp <c>(100000000000000 - yyyyMMddHHmmss)</c>.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.Int64"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Plugins.DefaultFunctions.ToInverseDateStamp(System.DateTime)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> to a date stamp <c>(100000000000000 - yyyyMMddHHmmss)</c>.
            </summary>
            <param name="value">
            The value to convert.
            </param>
            <returns>
            The <see cref="T:System.Int64"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Plugins.DefaultFunctions.ToUnixTimestamp(System.DateTime)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> to a unix timestamp.
            </summary>
            <param name="date">
            The date to convert.
            </param>
            <returns>
            The unix timestamp.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Plugins.DefaultFunctions.ParseDate(System.String)">
            <summary>
            Parses the date.
            </summary>
            <param name="value">The value to parse.</param>
            <returns>
            The parsed date or <c>null</c>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Plugins.DefaultFunctions.ParseDate(System.String,System.String)">
            <summary>
            Parses the date.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="pattern">The pattern to use.</param>
            <returns>
            The parsed date or <c>null</c>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Query.GroupQueryVisitor">
            <summary>
            Converts a select query to a group query.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.GroupQueryVisitor.data">
            <summary>
            The data.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.GroupQueryVisitor.groupedNodes">
            <summary>
            The grouped nodes.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.GroupQueryVisitor.select">
            <summary>
            The select.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.GroupQueryVisitor.visitingGroupings">
            <summary>
            The visiting groupings.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Query.GroupQueryVisitor.#ctor(ConnectQl.Internal.Ast.Statements.SelectFromStatement,ConnectQl.Internal.Interfaces.INodeDataProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Query.GroupQueryVisitor"/> class.
            </summary>
            <param name="select">
            The select.
            </param>
            <param name="data">
            The data.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Query.GroupQueryVisitor.Expressions">
            <summary>
            Gets the expressions.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Query.GroupQueryVisitor.Groupings">
            <summary>
            Gets the groupings.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Query.GroupQueryVisitor.Having">
            <summary>
            Gets the having.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Query.GroupQueryVisitor.OrderBy">
            <summary>
            Gets the order by.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Query.GroupQueryVisitor.GetGroupQuery(ConnectQl.Internal.Ast.Statements.SelectFromStatement,ConnectQl.Internal.Interfaces.INodeDataProvider)">
            <summary>
            Gets the group query from the select statement.
            </summary>
            <param name="select">
            The select.
            </param>
            <param name="data">
            The data.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Query.IGroupQuery"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.GroupQueryVisitor.VisitAliasedSqlExpression(ConnectQl.Internal.Ast.Expressions.AliasedSqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.AliasedSqlExpression" />.
            </summary>
            <param name="node">The node.</param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.GroupQueryVisitor.VisitBinarySqlExpression(ConnectQl.Internal.Ast.Expressions.BinarySqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.BinarySqlExpression"/> expression.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.GroupQueryVisitor.VisitConstSqlExpression(ConnectQl.Internal.Ast.Expressions.ConstSqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.ConstSqlExpression"/> expression.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.GroupQueryVisitor.VisitFieldReferenceSqlExpression(ConnectQl.Internal.Ast.Expressions.FieldReferenceSqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.FieldReferenceSqlExpression"/> expression.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.GroupQueryVisitor.VisitFunctionCallSqlExpression(ConnectQl.Internal.Ast.Expressions.FunctionCallSqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.FunctionCallSqlExpression"/> expression.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.GroupQueryVisitor.VisitSelectFromStatement(ConnectQl.Internal.Ast.Statements.SelectFromStatement)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Statements.SelectFromStatement"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.GroupQueryVisitor.VisitUnarySqlExpression(ConnectQl.Internal.Ast.Expressions.UnarySqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.UnarySqlExpression"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.GroupQueryVisitor.VisitVariableSqlExpression(ConnectQl.Internal.Ast.Expressions.VariableSqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.VariableSqlExpression"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.GroupQueryVisitor.CheckForGroups``1(``0,System.Func{``0,ConnectQl.Internal.Ast.Node})">
            <summary>
            Checks if the node is a grouped node, and adds it to the list of grouped nodes if so.
            </summary>
            <typeparam name="T">
            The type of the node.
            </typeparam>
            <param name="node">
            The node.
            </param>
            <param name="baseCall">
            The method to call when the expression is not a grouped node.
            </param>
            <returns>
            The node or the result of the <paramref name="baseCall"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Query.GroupQueryVisitor.GroupQuery">
            <summary>
            The group query.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Query.GroupQueryVisitor.GroupQuery.#ctor(ConnectQl.Internal.Ast.Statements.SelectFromStatement,System.Collections.ObjectModel.ReadOnlyCollection{ConnectQl.Internal.Ast.Expressions.AliasedSqlExpression},System.Collections.ObjectModel.ReadOnlyCollection{System.String},ConnectQl.Internal.Ast.Expressions.SqlExpressionBase,System.Collections.ObjectModel.ReadOnlyCollection{ConnectQl.Internal.Ast.Expressions.OrderBySqlExpression})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Query.GroupQueryVisitor.GroupQuery"/> class.
            </summary>
            <param name="rowSelect">
            The row select.
            </param>
            <param name="expressions">
            The expressions.
            </param>
            <param name="groupings">
            The groupings.
            </param>
            <param name="having">
            The having.
            </param>
            <param name="orderBy">
            The visitor order by.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Query.GroupQueryVisitor.GroupQuery.Expressions">
            <summary>
            Gets the expressions.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Query.GroupQueryVisitor.GroupQuery.Groupings">
            <summary>
            Gets the groupings.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Query.GroupQueryVisitor.GroupQuery.Having">
            <summary>
            Gets the having.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Query.GroupQueryVisitor.GroupQuery.OrderBy">
            <summary>
            Gets the visitor order by.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Query.GroupQueryVisitor.GroupQuery.RowSelect">
            <summary>
            Gets the row select.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.Query.IGroupQuery">
            <summary>
            The GroupQuery interface.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Query.IGroupQuery.Expressions">
            <summary>
            Gets the expressions.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Query.IGroupQuery.Groupings">
            <summary>
            Gets the groupings.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Query.IGroupQuery.Having">
            <summary>
            Gets the having.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Query.IGroupQuery.RowSelect">
            <summary>
            Gets the row select.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Query.IGroupQuery.OrderBy">
            <summary>
            Gets the visitor order by.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.Query.JobTrigger">
            <summary>
            The job trigger.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.JobTrigger.trigger">
            <summary>
            The trigger.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Query.JobTrigger.#ctor(ConnectQl.Interfaces.ITrigger,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Query.JobTrigger"/> class.
            </summary>
            <param name="trigger">
            The trigger.
            </param>
            <param name="name">
            The name.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Query.JobTrigger.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Query.JobTrigger.Disable(ConnectQl.Interfaces.ITriggerContext)">
            <summary>
            The disable.
            </summary>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Query.JobTrigger.Enable(ConnectQl.Interfaces.ITriggerContext)">
            <summary>
            The enable.
            </summary>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="T:ConnectQl.Internal.Query.NodeDataProviderDataSourceConverter">
            <summary>
                The node data provider data source converter.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.NodeDataProviderDataSourceConverter.GetMethod">
            <summary>
                The <see cref="M:ConnectQl.Results.Row.Get``1(System.String)" /> method.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Query.NodeDataProviderDataSourceConverter.ConvertToRows(ConnectQl.Internal.Interfaces.INodeDataProvider,System.Linq.Expressions.Expression)">
            <summary>
            The convert to data source.
            </summary>
            <param name="dataProvider">
            The data Provider.
            </param>
            <param name="expression">
            The expression.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.NodeDataProviderDataSourceConverter.ConvertToDataSource(ConnectQl.Internal.Interfaces.INodeDataProvider,ConnectQl.Internal.Ast.Sources.SourceBase,ConnectQl.Internal.Interfaces.IMessageWriter)">
            <summary>
                Converts the <paramref name="source" /> to a lambda returning a <see cref="T:ConnectQl.Internal.DataSources.DataSource" />.
            </summary>
            <param name="dataProvider">
                The data provider.
            </param>
            <param name="source">
                The source to convert.
            </param>
            <param name="messages">
                The messages.
            </param>
            <returns>
                The <see cref="T:System.Linq.Expressions.Expression" />.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.NodeDataProviderDataSourceConverter.ConvertToDataTarget(ConnectQl.Internal.Interfaces.INodeDataProvider,ConnectQl.Internal.Ast.Targets.TargetBase,ConnectQl.Internal.Interfaces.IMessageWriter)">
            <summary>
                Converts the <paramref name="target" /> to a lambda returning a <see cref="T:ConnectQl.Internal.DataSources.DataTarget" />.
            </summary>
            <param name="dataProvider">
                The data provider.
            </param>
            <param name="target">
                The target to convert.
            </param>
            <param name="messages">
                The messages.
            </param>
            <returns>
                The <see cref="T:System.Linq.Expressions.Expression" />.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Query.NodeDataProviderDataSourceConverter.Evaluator">
            <summary>
                The evaluator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.NodeDataProviderDataSourceConverter.Evaluator.CreateDataSourceDefinition">
            <summary>
                Lambda that registers a data source.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.NodeDataProviderDataSourceConverter.Evaluator.CreateDataTargetDefinition">
            <summary>
                Lambda that registers a data target.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.NodeDataProviderDataSourceConverter.Evaluator.data">
            <summary>
                The data.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.NodeDataProviderDataSourceConverter.Evaluator.messages">
            <summary>
                The messages.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Query.NodeDataProviderDataSourceConverter.Evaluator.#ctor(ConnectQl.Internal.Interfaces.INodeDataProvider,ConnectQl.Internal.Interfaces.IMessageWriter)">
            <summary>
                Initializes a new instance of the <see cref="T:ConnectQl.Internal.Query.NodeDataProviderDataSourceConverter.Evaluator" /> class.
            </summary>
            <param name="data">
                The data.
            </param>
            <param name="messages">
                The message writer.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Query.NodeDataProviderDataSourceConverter.Evaluator.CreateDataSource(System.Linq.Expressions.Expression,System.String)">
            <summary>
                Registers the data source with the alias.
            </summary>
            <param name="expression">
                The expression.
            </param>
            <param name="alias">
                The alias.
            </param>
            <returns>
                The <see cref="T:System.Linq.Expressions.Expression" />.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.NodeDataProviderDataSourceConverter.Evaluator.VisitApplySource(ConnectQl.Internal.Ast.Sources.ApplySource)">
            <summary>
                Visits a <see cref="T:ConnectQl.Internal.Ast.Sources.ApplySource" />.
            </summary>
            <param name="node">
                The node.
            </param>
            <returns>
                The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.NodeDataProviderDataSourceConverter.Evaluator.VisitFunctionSource(ConnectQl.Internal.Ast.Sources.FunctionSource)">
            <summary>
                Visits a <see cref="T:ConnectQl.Internal.Ast.Sources.FunctionSource" />.
            </summary>
            <param name="node">
                The node.
            </param>
            <returns>
                The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.NodeDataProviderDataSourceConverter.Evaluator.VisitFunctionTarget(ConnectQl.Internal.Ast.Targets.FunctionTarget)">
            <summary>
                Visits a <see cref="T:ConnectQl.Internal.Ast.Targets.FunctionTarget" />.
            </summary>
            <param name="node">
                The node.
            </param>
            <returns>
                The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.NodeDataProviderDataSourceConverter.Evaluator.VisitJoinSource(ConnectQl.Internal.Ast.Sources.JoinSource)">
            <summary>
                Visits a <see cref="T:ConnectQl.Internal.Ast.Sources.JoinSource" />.
            </summary>
            <param name="node">
                The node.
            </param>
            <returns>
                The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.NodeDataProviderDataSourceConverter.Evaluator.VisitSelectSource(ConnectQl.Internal.Ast.Sources.SelectSource)">
            <summary>
                Visits a <see cref="T:ConnectQl.Internal.Ast.Sources.SelectSource" />.
            </summary>
            <param name="node">
                The node.
            </param>
            <returns>
                The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.NodeDataProviderDataSourceConverter.Evaluator.VisitVariableSource(ConnectQl.Internal.Ast.Sources.VariableSource)">
            <summary>
                Visits a <see cref="T:ConnectQl.Internal.Ast.Sources.VariableSource" />.
            </summary>
            <param name="node">
                The node.
            </param>
            <returns>
                The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.NodeDataProviderDataSourceConverter.Evaluator.VisitVariableTarget(ConnectQl.Internal.Ast.Targets.VariableTarget)">
            <summary>
                Visits a <see cref="T:ConnectQl.Internal.Ast.Targets.VariableTarget" />.
            </summary>
            <param name="node">
                The node.
            </param>
            <returns>
                The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.NodeDataProviderDataSourceConverter.Evaluator.CreateDataTarget(System.Linq.Expressions.Expression)">
            <summary>
                Registers the data target.
            </summary>
            <param name="expression">
                The expression.
            </param>
            <returns>
                The <see cref="T:System.Linq.Expressions.Expression" />.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.NodeDataProviderDataSourceConverter.Evaluator.CreateJoin(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
            <summary>
                Creates join expression and registers all aliases.
            </summary>
            <param name="constructor">
                The constructor for the join expression.
            </param>
            <param name="first">
                The left side of the join expression.
            </param>
            <param name="second">
                The right side of the join expression.
            </param>
            <param name="rest">
                The rest of the parameters.
            </param>
            <returns>
                The join-expression.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Query.NodeDataProviderExpressionConverter">
            <summary>
            Adds an expression converter to the <see cref="T:ConnectQl.Internal.Interfaces.INodeDataProvider"/>.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Query.NodeDataProviderExpressionConverter.ConvertToLinqExpression(ConnectQl.Internal.Interfaces.INodeDataProvider,ConnectQl.Internal.Ast.Expressions.SqlExpressionBase)">
            <summary>
            Converts the <paramref name="expression"/> to an <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <param name="dataProvider">
            The data provider.
            </param>
            <param name="expression">
            The expression to convert.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.NodeDataProviderExpressionConverter.HasSideEffects(ConnectQl.Internal.Interfaces.INodeDataProvider,ConnectQl.Internal.Ast.Expressions.SqlExpressionBase,System.Func{System.String,System.Boolean})">
            <summary>
            The has functions with side effects.
            </summary>
            <param name="data">
            The data.
            </param>
            <param name="expression">
            The expression.
            </param>
            <param name="hasVariableSideEffects">
            The has Variable Side Effects.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.NodeDataProviderExpressionConverter.HasSideEffects(ConnectQl.Internal.Interfaces.INodeDataProvider,ConnectQl.Internal.Ast.Sources.SourceBase,System.Func{System.String,System.Boolean})">
            <summary>
            The has functions with side effects.
            </summary>
            <param name="data">
            The data.
            </param>
            <param name="source">
            The expression.
            </param>
            <param name="hasVariableSideEffects">
            The has Variable Side Effects.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.NodeDataProviderExpressionConverter.CleanExpression(System.Linq.Expressions.Expression)">
            <summary>
            Cleans the expression by merging <see cref="T:System.Linq.Expressions.UnaryExpression"/> and <see cref="T:ConnectQl.Internal.Expressions.SourceFieldExpression"/>, and
                replacing <see cref="T:System.Linq.Expressions.BinaryExpression"/>s with <see cref="T:ConnectQl.Expressions.CompareExpression"/>s.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.NodeDataProviderExpressionConverter.ReplaceBinaryCompares(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Replaces a binary compare-expression with a <see cref="T:ConnectQl.Expressions.CompareExpression"/>.
            </summary>
            <param name="expression">
            The expression to check.
            </param>
            <returns>
            The <paramref name="expression"/> or a new <see cref="T:ConnectQl.Expressions.CompareExpression"/> when the binary expression was a
                comparison.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Query.NodeDataProviderExpressionConverter.Evaluator">
            <summary>
            The evaluator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.NodeDataProviderExpressionConverter.Evaluator.MarkFunctionResultWithNameMethod">
            <summary>
            The function that marks function results.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.NodeDataProviderExpressionConverter.Evaluator.varCounter">
            <summary>
            The variable counter.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.NodeDataProviderExpressionConverter.Evaluator.data">
            <summary>
            The data.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Query.NodeDataProviderExpressionConverter.Evaluator.#ctor(ConnectQl.Internal.Interfaces.INodeDataProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Query.NodeDataProviderExpressionConverter.Evaluator"/> class.
            </summary>
            <param name="data">
            The data.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Query.NodeDataProviderExpressionConverter.Evaluator.VisitBinarySqlExpression(ConnectQl.Internal.Ast.Expressions.BinarySqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.BinarySqlExpression"/> expression.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.NodeDataProviderExpressionConverter.Evaluator.VisitConstSqlExpression(ConnectQl.Internal.Ast.Expressions.ConstSqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.ConstSqlExpression"/> expression.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.NodeDataProviderExpressionConverter.Evaluator.VisitFieldReferenceSqlExpression(ConnectQl.Internal.Ast.Expressions.FieldReferenceSqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.FieldReferenceSqlExpression"/> expression.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.NodeDataProviderExpressionConverter.Evaluator.VisitFunctionCallSqlExpression(ConnectQl.Internal.Ast.Expressions.FunctionCallSqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.FunctionCallSqlExpression"/> expression.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.NodeDataProviderExpressionConverter.Evaluator.VisitUnarySqlExpression(ConnectQl.Internal.Ast.Expressions.UnarySqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.UnarySqlExpression"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.NodeDataProviderExpressionConverter.Evaluator.VisitVariableSqlExpression(ConnectQl.Internal.Ast.Expressions.VariableSqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.VariableSqlExpression"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.NodeDataProviderExpressionConverter.Evaluator.MarkFunctionResultWithName``1(ConnectQl.Interfaces.IExecutionContext,System.String,System.String,``0)">
            <summary>
            Marks the function result with the specified name name.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="displayName">
            The display name.
            </param>
            <param name="function">
            The function.
            </param>
            <typeparam name="TFunctionResult">
            The type of the function result.
            </typeparam>
            <returns>
            The <typeparamref name="TFunctionResult"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Query.NodeDataProviderExpressionConverter.SideEffectsChecker">
            <summary>
            The side effects checker.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.NodeDataProviderExpressionConverter.SideEffectsChecker.data">
            <summary>
            The data.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.NodeDataProviderExpressionConverter.SideEffectsChecker.hasVariableSideEffects">
            <summary>
            The has variable side effects.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Query.NodeDataProviderExpressionConverter.SideEffectsChecker.#ctor(ConnectQl.Internal.Interfaces.INodeDataProvider,System.Func{System.String,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Query.NodeDataProviderExpressionConverter.SideEffectsChecker"/> class.
            </summary>
            <param name="data">
            The data.
            </param>
            <param name="hasVariableSideEffects">
            Checks if the variable has side effects.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Query.NodeDataProviderExpressionConverter.SideEffectsChecker.HasSideEffects">
            <summary>
            Gets a value indicating whether the expression has side effects.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Query.NodeDataProviderExpressionConverter.SideEffectsChecker.VisitFunctionCallSqlExpression(ConnectQl.Internal.Ast.Expressions.FunctionCallSqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.FunctionCallSqlExpression"/> expression.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.NodeDataProviderExpressionConverter.SideEffectsChecker.VisitVariableSqlExpression(ConnectQl.Internal.Ast.Expressions.VariableSqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.VariableSqlExpression"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.NodeDataProviderExpressionConverter.SideEffectsChecker.VisitVariableSource(ConnectQl.Internal.Ast.Sources.VariableSource)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Sources.VariableSource"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Query.OrderByExpression">
            <summary>
            The order by expression.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Query.OrderByExpression.#ctor(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Query.OrderByExpression"/> class.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <param name="ascending">
            The ascending.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Query.OrderByExpression.Ascending">
            <summary>
            Gets a value indicating whether ascending.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Query.OrderByExpression.Expression">
            <summary>
            Gets the expression.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.Query.Plans.CombinedQueryPlan">
            <summary>
            The combined query plan.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Query.Plans.CombinedQueryPlan.#ctor(System.Collections.Generic.IEnumerable{ConnectQl.Internal.Interfaces.IQueryPlan})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Query.Plans.CombinedQueryPlan"/> class.
            </summary>
            <param name="subQueries">
            The sub queries.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Query.Plans.CombinedQueryPlan.SubQueries">
            <summary>
            Gets the sub queries.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Query.Plans.CombinedQueryPlan.ExecuteAsync(ConnectQl.Internal.Interfaces.IInternalExecutionContext)">
            <summary>
            Executes the plan.
            </summary>
            <param name="context">
            The context.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Results.ExecuteResult"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Query.Plans.DeclareJobPlan">
            <summary>
            The declare job plan.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.Plans.DeclareJobPlan.name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.Plans.DeclareJobPlan.plan">
            <summary>
            The plan.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.Plans.DeclareJobPlan.triggersFactory">
            <summary>
            The triggers factory.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Query.Plans.DeclareJobPlan.#ctor(System.String,ConnectQl.Internal.Interfaces.IQueryPlan,System.Func{ConnectQl.Interfaces.IExecutionContext,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{ConnectQl.Interfaces.IJobTrigger}}})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Query.Plans.DeclareJobPlan"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="plan">
            The plan.
            </param>
            <param name="triggersFactory">
            The trigger factories.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Query.Plans.DeclareJobPlan.ExecuteAsync(ConnectQl.Internal.Interfaces.IInternalExecutionContext)">
            <summary>
            The execute async.
            </summary>
            <param name="context">
            The context.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Query.Plans.DeclareVariableQueryPlan">
            <summary>
            The declare variable query plan.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.Plans.DeclareVariableQueryPlan.SetVariable">
            <summary>
            The <see cref="M:ConnectQl.Internal.Interfaces.IInternalExecutionContext.SetVariable``1(System.String,``0)"/> method.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.Plans.DeclareVariableQueryPlan.evaluateVariable">
            <summary>
            The setter.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Query.Plans.DeclareVariableQueryPlan.#ctor(System.String,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Query.Plans.DeclareVariableQueryPlan"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="expression">
            The expression.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Query.Plans.DeclareVariableQueryPlan.ExecuteAsync(ConnectQl.Internal.Interfaces.IInternalExecutionContext)">
            <summary>
            The execute async.
            </summary>
            <param name="context">
            The context.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Query.Plans.InsertQueryPlan">
            <summary>
            The insert query plan.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.Plans.InsertQueryPlan.dataGenerator">
            <summary>
            The data generator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.Plans.InsertQueryPlan.dataTargetFactory">
            <summary>
            The data target factory.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.Plans.InsertQueryPlan.upsert">
            <summary>
            The upsert.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Query.Plans.InsertQueryPlan.#ctor(System.Func{ConnectQl.Interfaces.IExecutionContext,ConnectQl.Internal.DataSources.DataTarget},ConnectQl.Internal.Interfaces.IQueryPlan,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Query.Plans.InsertQueryPlan"/> class.
            </summary>
            <param name="dataTargetFactory">
            The data target factory.
            </param>
            <param name="dataGenerator">
            The data generator.
            </param>
            <param name="upsert">
            The upsert.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Query.Plans.InsertQueryPlan.ExecuteAsync(ConnectQl.Internal.Interfaces.IInternalExecutionContext)">
            <summary>
            Executes the plan.
            </summary>
            <param name="context">
            The context.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Results.ExecuteResult"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Query.Plans.SelectGroupByQueryPlan">
            <summary>
            The select group query source.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.Plans.SelectGroupByQueryPlan.fields">
            <summary>
            The fields.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.Plans.SelectGroupByQueryPlan.groupFields">
            <summary>
            The group fields.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.Plans.SelectGroupByQueryPlan.having">
            <summary>
            The having expression. Null if no having clause is added.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.Plans.SelectGroupByQueryPlan.orders">
            <summary>
            The orders.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.Plans.SelectGroupByQueryPlan.plan">
            <summary>
            The plan.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.Plans.SelectGroupByQueryPlan.rowFactory">
            <summary>
            The group factories.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Query.Plans.SelectGroupByQueryPlan.#ctor(ConnectQl.Internal.Query.Plans.SelectQueryPlan,System.Func{ConnectQl.Interfaces.IExecutionContext,ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection{ConnectQl.Results.Row},System.Threading.Tasks.Task{System.Collections.Generic.KeyValuePair{System.String,System.Object}[]}},System.Collections.Generic.IEnumerable{System.String},System.Collections.ObjectModel.ReadOnlyCollection{ConnectQl.Internal.Ast.Expressions.AliasedSqlExpression},System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{ConnectQl.Internal.Query.OrderByExpression},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Query.Plans.SelectGroupByQueryPlan"/> class.
            </summary>
            <param name="plan">
            The plan.
            </param>
            <param name="rowFactory">
            The factory function to convert a group into the values for a row.
            </param>
            <param name="groupFields">
            The group fields.
            </param>
            <param name="aliases">
            The aliases.
            </param>
            <param name="having">
            The having expression. Null if no having clause is added.
            </param>
            <param name="orders">
            The expressions to order by, or null if none are available.
            </param>
            <param name="fields">
            The fields.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Query.Plans.SelectGroupByQueryPlan.ExecuteAsync(ConnectQl.Internal.Interfaces.IInternalExecutionContext)">
            <summary>
            Executes the plan.
            </summary>
            <param name="context">
            The context.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Results.ExecuteResult"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Query.Plans.SelectQueryPlan">
            <summary>
            The select group query plan.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.Plans.SelectQueryPlan.asyncValueFactory">
            <summary>
            The value factories.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.Plans.SelectQueryPlan.dataSourceFactory">
            <summary>
            The data source factory.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.Plans.SelectQueryPlan.fieldNames">
            <summary>
            The field names.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.Plans.SelectQueryPlan.query">
            <summary>
            The query.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.Plans.SelectQueryPlan.valueFactory">
            <summary>
            The value factories.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Query.Plans.SelectQueryPlan.#ctor(System.Func{ConnectQl.Interfaces.IExecutionContext,System.Threading.Tasks.Task{ConnectQl.Internal.DataSources.DataSource}},ConnectQl.Internal.Interfaces.IMultiPartQuery,System.Collections.Generic.IEnumerable{System.String},System.Func{ConnectQl.Interfaces.IExecutionContext,ConnectQl.Results.Row,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}}})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Query.Plans.SelectQueryPlan"/> class.
            </summary>
            <param name="dataSourceFactory">
            The data source factory.
            </param>
            <param name="query">
            The query.
            </param>
            <param name="fieldNames">
            The field names.
            </param>
            <param name="asyncValueFactory">
            Lambda that creates the values for a row.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Query.Plans.SelectQueryPlan.#ctor(System.Func{ConnectQl.Interfaces.IExecutionContext,System.Threading.Tasks.Task{ConnectQl.Internal.DataSources.DataSource}},ConnectQl.Internal.Interfaces.IMultiPartQuery,System.Collections.Generic.IEnumerable{System.String},System.Func{ConnectQl.Interfaces.IExecutionContext,ConnectQl.Results.Row,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Query.Plans.SelectQueryPlan"/> class.
            </summary>
            <param name="dataSourceFactory">
            The data source factory.
            </param>
            <param name="query">
            The query.
            </param>
            <param name="fieldNames">
            The field names.
            </param>
            <param name="valueFactory">
            Lambda that creates the values for a row.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Query.Plans.SelectQueryPlan.#ctor(System.Func{ConnectQl.Interfaces.IExecutionContext,System.Threading.Tasks.Task{ConnectQl.Internal.DataSources.DataSource}},ConnectQl.Internal.Interfaces.IMultiPartQuery,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Query.Plans.SelectQueryPlan"/> class.
            </summary>
            <param name="dataSourceFactory">
            The data source factory.
            </param>
            <param name="query">
            The query.
            </param>
            <param name="fieldNames">
            The field names.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Query.Plans.SelectQueryPlan.ExecuteAsync(ConnectQl.Internal.Interfaces.IInternalExecutionContext)">
            <summary>
            Executes the plan.
            </summary>
            <param name="context">
            The context.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Results.ExecuteResult"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.Plans.SelectQueryPlan.GetDataSourceDescriptorAsync(System.String,ConnectQl.Interfaces.IExecutionContext)">
            <summary>
            Gets the descriptor for this data source.
            </summary>
            <param name="sourceAlias">
            The data source sourceAlias.
            </param>
            <param name="context">
            The execution context.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Query.Plans.UseDefaultQueryPlan">
            <summary>
            The use default query plan.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.Plans.UseDefaultQueryPlan.functionName">
            <summary>
            The function name.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.Plans.UseDefaultQueryPlan.setting">
            <summary>
            The setting.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.Plans.UseDefaultQueryPlan.valueFactory">
            <summary>
            The value factory.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Query.Plans.UseDefaultQueryPlan.#ctor(System.String,System.String,System.Func{ConnectQl.Interfaces.IExecutionContext,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Query.Plans.UseDefaultQueryPlan"/> class.
            </summary>
            <param name="setting">
            The setting.
            </param>
            <param name="functionName">
            The function name.
            </param>
            <param name="valueFactory">
            The value factory.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Query.Plans.UseDefaultQueryPlan.ExecuteAsync(ConnectQl.Internal.Interfaces.IInternalExecutionContext)">
            <summary>
            Executes the plan.
            </summary>
            <param name="context">
            The context.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Results.ExecuteResult"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Query.Query">
            <summary>
            The query.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Query.Query.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{ConnectQl.Interfaces.IOrderByExpression},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Query.Query"/> class.
            </summary>
            <param name="fields">
            The fields.
            </param>
            <param name="filter">
            The filter.
            </param>
            <param name="orderBy">
            The order by.
            </param>
            <param name="count">
            The count.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Query.Query.#ctor(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{ConnectQl.Interfaces.IOrderByExpression},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Query.Query"/> class, retrieving all fields.
            </summary>
            <param name="filter">
            The filter.
            </param>
            <param name="orderBy">
            The order by.
            </param>
            <param name="count">
            The count.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Query.Query.Count">
            <summary>
            Gets the number of records to retrieve. When this is <c>null</c>, all records will be retrieved.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Query.Query.Fields">
            <summary>
            Gets the fields.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Query.Query.FilterExpression">
            <summary>
            Gets the filter expression.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Query.Query.OrderByExpressions">
            <summary>
            Gets the order by expressions.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Query.Query.RetrieveAllFields">
            <summary>
            Gets a value indicating whether retrieve all fields.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Query.Query.WildcardAliases">
            <summary>
            Gets the wildcard source aliases.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Query.Query.GetFilter(ConnectQl.Interfaces.IExecutionContext)">
            <summary>
            Retrieves the filter for the query.
            </summary>
            <param name="context">
            The execution context.
            </param>
            <returns>
            The filter for this query, or <c>null</c> when no filter exists.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.Query.GetSortOrders(ConnectQl.Interfaces.IExecutionContext)">
            <summary>
            Retrieves the sort orders for the query.
            </summary>
            <param name="context">
            The execution context.
            </param>
            <returns>
            A collection of sort orders.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Query.QueryPlanBuilder">
            <summary>
            The query plan.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.QueryPlanBuilder.Concatenate">
            <summary>
            Lambda that concatenates two <see cref="T:System.Collections.Generic.IEnumerable`1"/>s of key/value pairs.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.QueryPlanBuilder.KeyValuePairConstructor">
            <summary>
            The constructor for a <see cref="T:KeyValuePair{string,object}"/>.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.QueryPlanBuilder.data">
            <summary>
            The data.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.QueryPlanBuilder.messages">
            <summary>
            The messages.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Query.QueryPlanBuilder.#ctor(ConnectQl.Internal.Interfaces.IMessageWriter,ConnectQl.Internal.Interfaces.INodeDataProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Query.QueryPlanBuilder"/> class.
            </summary>
            <param name="messages">
            The messages.
            </param>
            <param name="data">
            The data.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Query.QueryPlanBuilder.Build(ConnectQl.Internal.Interfaces.IMessageWriter,ConnectQl.Internal.Interfaces.INodeDataProvider,ConnectQl.Internal.Ast.Node)">
            <summary>
            Builds a query plan.
            </summary>
            <param name="messages">
            The messages.
            </param>
            <param name="data">
            The data.
            </param>
            <param name="node">
            The script.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.QueryPlanBuilder.VisitBlock(ConnectQl.Internal.Ast.Statements.Block)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Statements.Block"/>, creates query plans for each statement and combines them in a
                <see cref="T:ConnectQl.Internal.Query.Plans.CombinedQueryPlan"/>.
                This <see cref="T:ConnectQl.Internal.Query.Plans.CombinedQueryPlan"/> is than attached to the current node in the <see cref="F:ConnectQl.Internal.Query.QueryPlanBuilder.data"/> store.
            </summary>
            <param name="node">
            The node to visit.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.QueryPlanBuilder.VisitDeclareJobStatement(ConnectQl.Internal.Ast.Statements.DeclareJobStatement)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Statements.DeclareJobStatement"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.QueryPlanBuilder.VisitDeclareStatement(ConnectQl.Internal.Ast.Statements.DeclareStatement)">
            <summary>
            Visits a declare statement and attaches a <see cref="T:ConnectQl.Internal.Ast.Statements.DeclareStatement"/> to the <paramref name="node"/> in the
                <see cref="F:ConnectQl.Internal.Query.QueryPlanBuilder.data"/> store.
                When multiple variables are declared in the <see cref="T:ConnectQl.Internal.Ast.Statements.DeclareStatement"/>, a <see cref="T:ConnectQl.Internal.Query.Plans.CombinedQueryPlan"/> is
                created containing all query plans for declarations.
            </summary>
            <param name="node">
            The node to visit.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.QueryPlanBuilder.VisitFunctionSource(ConnectQl.Internal.Ast.Sources.FunctionSource)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Sources.FunctionSource"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.QueryPlanBuilder.VisitInsertStatement(ConnectQl.Internal.Ast.Statements.InsertStatement)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Statements.InsertStatement"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.QueryPlanBuilder.VisitSelectFromStatement(ConnectQl.Internal.Ast.Statements.SelectFromStatement)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Statements.SelectFromStatement"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.QueryPlanBuilder.VisitSelectSource(ConnectQl.Internal.Ast.Sources.SelectSource)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Sources.SelectSource"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.QueryPlanBuilder.VisitUseStatement(ConnectQl.Internal.Ast.Statements.UseStatement)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Statements.UseStatement"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.QueryPlanBuilder.VisitVariableDeclaration(ConnectQl.Internal.Ast.VariableDeclaration)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.VariableDeclaration"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.QueryPlanBuilder.ConcatenateLambdas``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0})">
            <summary>
            The concatenate lambdas.
            </summary>
            <param name="first">
            The first.
            </param>
            <param name="second">
            The second.
            </param>
            <typeparam name="T">
            The type of the expressions.
            </typeparam>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.QueryPlanBuilder.ToArrayInit``1(System.Collections.Generic.IList{System.Linq.Expressions.LambdaExpression})">
            <summary>
            Converts a list of lambda expressions tot.
            </summary>
            <typeparam name="T">
            The type of the array elements.
            </typeparam>
            <param name="values">
            The array values.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.QueryPlanBuilder.CreateSelectQueryPlan(ConnectQl.Internal.Ast.Statements.SelectFromStatement)">
            <summary>
            The create select query plan async.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.QueryPlanBuilder.GetGroupValueFactory(System.Collections.Generic.IEnumerable{ConnectQl.Internal.Ast.Expressions.AliasedSqlExpression})">
            <summary>
            The get group value factory async.
            </summary>
            <param name="expressions">
            The expressions.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.QueryPlanBuilder.GetSourceFactory(ConnectQl.Internal.Ast.Sources.SourceBase)">
            <summary>
            Gets a factory function for the data source of this.
            </summary>
            <param name="source">
            The <see cref="T:ConnectQl.Internal.Ast.Sources.SourceBase"/> AST node to generate the factory for.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.QueryPlanBuilder.GetValueFactory(System.Collections.Generic.IEnumerable{ConnectQl.Internal.Ast.Expressions.AliasedSqlExpression},System.Collections.Generic.ICollection{ConnectQl.Interfaces.IField},System.Collections.Generic.ICollection{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a function that creates the values for the selected records from a row.
            </summary>
            <param name="expressions">
            The <see cref="T:ConnectQl.Internal.Ast.Expressions.AliasedSqlExpression"/>s to get the values for.
            </param>
            <param name="fieldList">
            A collection that will be filled with all the fields that are used in the select statement.
            </param>
            <param name="wildCardAliasList">
            A collection that will be filled with all the wildcards that are used in the select statement.
            </param>
            <param name="allSourceAliases">
            Contains all source aliases in the query, so when a global wildcard is found, all fields are added.
            </param>
            <returns>
            A delegate.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Query.SourceAliasesRetriever">
            <summary>
            Retrieves all source aliases in a node.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Query.SourceAliasesRetriever.aliases">
            <summary>
            The aliases.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Query.SourceAliasesRetriever.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ConnectQl.Internal.Query.SourceAliasesRetriever"/> class from being created.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Query.SourceAliasesRetriever.GetAllSources(ConnectQl.Internal.Ast.Node)">
            <summary>
            Gets all source aliases.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The aliases.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.SourceAliasesRetriever.VisitFunctionSource(ConnectQl.Internal.Ast.Sources.FunctionSource)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Sources.FunctionSource"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.SourceAliasesRetriever.VisitSelectSource(ConnectQl.Internal.Ast.Sources.SelectSource)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Sources.SelectSource"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Query.SourceQueryExtensions">
            <summary>
            The query extensions.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Query.SourceQueryExtensions.AppendFilter(ConnectQl.Interfaces.IQuery,System.Linq.Expressions.Expression)">
            <summary>
            Appends a filter to the query.
            </summary>
            <param name="query">
            The query to append the filter to.
            </param>
            <param name="filterExpression">
            The filter expression.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IQuery"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.SourceQueryExtensions.GetUsedFields(ConnectQl.Interfaces.IQuery,ConnectQl.Internal.DataSources.DataSource,System.Linq.Expressions.Expression)">
            <summary>
            Gets the fields of the data source that are used in the query.
            </summary>
            <param name="query">
            The query.
            </param>
            <param name="source">
            The data source to get the fields for.
            </param>
            <param name="filterExpression">
            The expression to use when looking for fields. When omitted, the <see cref="P:ConnectQl.Interfaces.IQuery.FilterExpression"/> is used.
            </param>
            <returns>
            The fields that are used in the query.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.SourceQueryExtensions.ReplaceFilter(ConnectQl.Interfaces.IQuery,System.Linq.Expressions.Expression)">
            <summary>
            Replaces the <see cref="P:ConnectQl.Interfaces.IQuery.FilterExpression"/> with a new one.
            </summary>
            <param name="query">
            The query.
            </param>
            <param name="filterExpression">
            The filter expression.
            </param>
            <returns>
            A new <see cref="T:ConnectQl.Internal.Query.Query"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Query.SourceQueryExtensions.ReplaceOrderBy(ConnectQl.Interfaces.IQuery,System.Collections.Generic.IEnumerable{ConnectQl.Internal.Query.OrderByExpression})">
            <summary>
            Replaces the <see cref="P:ConnectQl.Interfaces.IQuery.OrderByExpressions"/> with new ones.
            </summary>
            <param name="query">
            The query.
            </param>
            <param name="orderByExpressions">
            The ORDER BY expressions.
            </param>
            <returns>
            A new <see cref="T:ConnectQl.Internal.Query.Query"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.ReflectionLoader">
            <summary>
            The reflection loader.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.ReflectionLoader.UriResolver">
            <summary>
            The URI resolver.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.ReflectionLoader.PluginResolver">
            <summary>
            The plugin resolver.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.ReflectionLoader.TryLoadPluginProvider">
            <summary>
                Tries to load the plugin resolver using reflection by checking if the ConnectQl.Platform assembly is loaded.
            </summary>
            <returns>
                The <see cref="T:ConnectQl.Interfaces.IPluginResolver" />.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.ReflectionLoader.TryCreateUriResolver">
            <summary>
                Tries to create an uri resolver. We do this by cheating; NetStandard1.0 and the PCL do not support
                file system operations but we can always try and load them via reflection (since the calling assembly is probably running on a platform that supports files).
                When this fails no Uri resolver is created, but at least we tried...
            </summary>
            <returns>
            The UriResolveMode
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Results.ExecuteResult">
            <summary>
                The execute result.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Results.ExecuteResult.#ctor(System.Int64,ConnectQl.AsyncEnumerables.IAsyncEnumerable{ConnectQl.Results.Row})">
            <summary>
                Initializes a new instance of the <see cref="T:ConnectQl.Internal.Results.ExecuteResult" /> class.
            </summary>
            <param name="affectedRecords">
                The affected records.
            </param>
            <param name="rows">
                The rows.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Results.ExecuteResult.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ConnectQl.Internal.Results.ExecuteResult" /> class.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Results.ExecuteResult.#ctor(ConnectQl.Results.IJob)">
            <summary>
                Initializes a new instance of the <see cref="T:ConnectQl.Internal.Results.ExecuteResult" /> class.
            </summary>
            <param name="job">
                The job.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Results.ExecuteResult.#ctor(System.Collections.Generic.ICollection{ConnectQl.Internal.Results.ExecuteResult})">
            <summary>
                Initializes a new instance of the <see cref="T:ConnectQl.Internal.Results.ExecuteResult" /> class.
            </summary>
            <param name="combinedResults">
                The combined results.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Results.ExecuteResult.#ctor(System.Collections.Generic.ICollection{ConnectQl.Internal.Results.ExecuteResult},ConnectQl.Internal.MessageWriter)">
            <summary>
                Initializes a new instance of the <see cref="T:ConnectQl.Internal.Results.ExecuteResult" /> class.
            </summary>
            <param name="combinedResults">
                The combined Results.
            </param>
            <param name="messages">
                The messages.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Results.ExecuteResult.Jobs">
            <summary>
                Gets the jobs.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Results.ExecuteResult.QueryResults">
            <summary>
                Gets the query results.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Results.ExecuteResult.Warnings">
            <summary>
                Gets or sets the warnings.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.Results.FieldMapping">
            <summary>
            Translates wildcard fields so no duplicates are in the result set.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Results.FieldMapping.fields">
            <summary>
            Quick lookup for the added fields.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Results.FieldMapping.mappedFields">
            <summary>
            Stores the field declarations.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Results.FieldMapping.mapToInternalName">
            <summary>
            Translates fields to their display name.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Results.FieldMapping.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Results.FieldMapping"/> class.
            </summary>
            <param name="fields">
            The fields.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Results.FieldMapping.Fields">
            <summary>
            Gets the field display names.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Results.FieldMapping.Item(System.String)">
            <summary>
            Gets the internal field name by the translated name.
            </summary>
            <param name="name">
            The translated name to get the field name for.
            </param>
            <returns>
            The field name.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Results.FieldMapping.AddField(System.String)">
            <summary>
            Adds a field to the translator.
            </summary>
            <param name="name">
            The name of the field to add.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Results.FieldMapping.AddRowFields(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds fields to the mapping.
            </summary>
            <param name="fieldNames">
            The names of the fields to add.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Results.FieldMapping.AddFieldInternal(System.String)">
            <summary>
            Adds a field to the translator.
            </summary>
            <param name="name">
            The name of the field.
            </param>
            <returns>
            True if the field was added, false if the field was already known.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Results.FieldMapping.CalculateTranslations">
            <summary>
            Calculates the translations for the fields. Makes sure that no duplicate fields are returned, and that the aliases
                appear in the correct order.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.Results.FieldMapping.MappedField">
            <summary>
            Maps a field from the query to one or more field names in the data set.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Results.FieldMapping.MappedField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Results.FieldMapping.MappedField"/> class.
            </summary>
            <param name="field">
            he field that was mapped.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Results.FieldMapping.MappedField.Field">
            <summary>
            Gets the field name.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Results.FieldMapping.MappedField.Mapped">
            <summary>
            Gets the mapped fields.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.Results.IRowFieldResolver">
            <summary>
            The RowFieldResolver interface.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Results.IRowFieldResolver.Fields">
            <summary>
            Gets the fields.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Results.IRowFieldResolver.GetIndex(System.String)">
            <summary>
            Gets the index for the field in the row.
            </summary>
            <param name="field">
            The field to get the index for.
            </param>
            <returns>
            The index or <c>null</c> if the field wasn't found.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Results.IRowFieldResolver.GetIndices(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Gets the indices for the fields and their values.
            </summary>
            <param name="values">
            The values to get the indices for.
            </param>
            <returns>
            A list of tuples, containing the index and the object at that index, the largest index first.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Results.IRowFieldResolver.GetInternalNameIndex(System.String)">
            <summary>
            Gets the index for the field with the internal name in the row.
            </summary>
            <param name="internalName">
            The internal name of the field to get the index for.
            </param>
            <returns>
            The index or <c>null</c> if the field wasn't found.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Results.IRowFieldResolver.DeserializeRow(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Deserializes a row.
            </summary>
            <param name="id">The id of the row.</param>
            <param name="values">The values in the row.</param>
            <returns>The row.</returns>
        </member>
        <member name="M:ConnectQl.Internal.Results.IRowFieldResolver.SerializeRow(ConnectQl.Results.Row)">
            <summary>
            Serializes a row.
            </summary>
            <param name="row">The row.</param>
            <returns>The id and values of the row.</returns>
        </member>
        <member name="T:ConnectQl.Internal.Results.IRowWithResolver">
            <summary>
            The RowWithResolver interface.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Results.IRowWithResolver.FieldResolver">
            <summary>
            Gets or sets the field resolver for this row.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.Results.Job">
            <summary>
            The job.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Results.Job.plan">
            <summary>
            The plan.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Results.Job.#ctor(ConnectQl.Internal.Interfaces.IInternalExecutionContext,System.String,ConnectQl.Internal.Interfaces.IQueryPlan,System.Collections.Generic.IEnumerable{ConnectQl.Interfaces.IJobTrigger})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Results.Job"/> class.
            </summary>
            <param name="executionContext">
            The execution context.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="plan">
            The plan.
            </param>
            <param name="triggers">
            The triggers.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Results.Job.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Results.Job.Triggers">
            <summary>
            Gets the triggers.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Results.Job.ExecutionContext">
            <summary>
            Gets the execution context.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Results.Job.RunAsync(ConnectQl.Results.IJobContext)">
            <summary>
            Runs the job.
            </summary>
            <param name="jobContext">
            The job context.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Results.JobRunner">
            <summary>
            The job runner.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Results.JobRunner.triggerContexts">
            <summary>
            The trigger contexts.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Results.JobRunner.Log">
            <summary>
            Gets or sets the log.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Results.JobRunner.Start(System.Collections.Generic.IEnumerable{ConnectQl.Results.IJob})">
            <summary>
            The start.
            </summary>
            <param name="jobs">
            The jobs.
            </param>
            <returns>
            The <see cref="T:System.IDisposable"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Results.JobRunner.CreateJobContext(ConnectQl.Results.IJob)">
            <summary>
            The create job context.
            </summary>
            <param name="job">
            The job.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Results.IJobContext"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Results.JobRunner.Stop(System.Collections.Generic.IEnumerable{ConnectQl.Internal.Results.JobRunner.TriggerContext})">
            <summary>
            Stops the triggers.
            </summary>
            <param name="contexts">
            The contexts.
            </param>
        </member>
        <member name="T:ConnectQl.Internal.Results.JobRunner.TriggerContext">
            <summary>
            The trigger context.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Results.JobRunner.TriggerContext.jobRunner">
            <summary>
            The job runner.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Results.JobRunner.TriggerContext.trigger">
            <summary>
            The trigger.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Results.JobRunner.TriggerContext.#ctor(ConnectQl.Internal.Results.JobRunner,ConnectQl.Results.IJob,ConnectQl.Interfaces.IJobTrigger)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Results.JobRunner.TriggerContext"/> class.
            </summary>
            <param name="jobRunner">
            The job runner.
            </param>
            <param name="job">
            The job.
            </param>
            <param name="trigger">
            The trigger.
            </param>
        </member>
        <member name="E:ConnectQl.Internal.Results.JobRunner.TriggerContext.JobExecuted">
            <summary>
            Raised when a job was executed.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Results.JobRunner.TriggerContext.Job">
            <summary>
            Gets the job.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Results.JobRunner.TriggerContext.Log">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Results.JobRunner.TriggerContext.Activate">
            <summary>
            Activates the trigger.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Results.JobRunner.TriggerContext.GetLastExecutionTime(System.String)">
            <summary>
            Gets the date and time this job was executed the last time.
            </summary>
            <param name="jobName">
            The name of the job.
            </param>
            <returns>
            The date and time this job was executed, or <c>null</c> if the job was never executed.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Results.Message">
            <summary>
            The result message.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Results.Message.#ctor(ConnectQl.Results.Position,ConnectQl.Results.Position,ConnectQl.Results.ResultMessageType,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Results.Message"/> class.
            </summary>
            <param name="start">
            The start.
            </param>
            <param name="end">
            The end.
            </param>
            <param name="type">
            The type.
            </param>
            <param name="text">
            The message text.
            </param>
            <param name="file">
            The file.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Results.Message.End">
            <summary>
            Gets the end position.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Results.Message.File">
            <summary>
            Gets the file name.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Results.Message.Start">
            <summary>
            Gets the start position.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Results.Message.Text">
            <summary>
            Gets the message text.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Results.Message.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Results.Message.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Results.QueryResult">
            <summary>
            The query result.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Results.QueryResult.#ctor(System.Int64,ConnectQl.AsyncEnumerables.IAsyncEnumerable{ConnectQl.Results.Row})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Results.QueryResult"/> class.
            </summary>
            <param name="affectedRecords">
            The affected records.
            </param>
            <param name="rows">
            The returned rows.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Results.QueryResult.AffectedRecords">
            <summary>
            Gets the affected records.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Results.QueryResult.Rows">
            <summary>
            Gets the rows.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.Results.Result">
            <summary>
            The result.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Results.Result.file">
            <summary>
            The file.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Results.Result.messages">
            <summary>
            The messages.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Results.Result.nodeData">
            <summary>
            The node data.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Results.Result.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Results.Result"/> class.
            </summary>
            <param name="file">
            The file.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Results.Result.Errors">
            <summary>
            Gets the errors.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Results.Result.InformationMessages">
            <summary>
            Gets the information messages.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Results.Result.Warnings">
            <summary>
            Gets the warnings.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Results.Result.GetNodeData``1(ConnectQl.Internal.Ast.Node,System.String)">
            <summary>
            Gets the node data for the specified node.
            </summary>
            <typeparam name="T">
            The type of the result.
            </typeparam>
            <param name="node">
            The node.
            </param>
            <param name="type">
            The type of the data to get.
            </param>
            <returns>
            The data, or <c>default{T}</c> if no data is available.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Results.Result.ConnectQl#Internal#Interfaces#IResultBuilder#AddError(ConnectQl.Results.Position,ConnectQl.Results.Position,System.String)">
            <summary>
            The add error.
            </summary>
            <param name="start">
            The start.
            </param>
            <param name="end">
            The end.
            </param>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Results.Result.ConnectQl#Internal#Interfaces#IResultBuilder#AddInformation(ConnectQl.Results.Position,ConnectQl.Results.Position,System.String)">
            <summary>
            The add information.
            </summary>
            <param name="start">
            The start.
            </param>
            <param name="end">
            The end.
            </param>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Results.Result.ConnectQl#Internal#Interfaces#IResultBuilder#AddNodeData``1(ConnectQl.Internal.Ast.Node,System.String,``0)">
            <summary>
            Adds data to the specified node.
            </summary>
            <param name="node">
            The node to add data to.
            </param>
            <param name="type">
            The type of the data.
            </param>
            <param name="data">
            The data to add to the node.
            </param>
            <typeparam name="T">
            The type of the data to write.
            </typeparam>
            <returns>
            The data that was added.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Results.Result.ConnectQl#Internal#Interfaces#IResultBuilder#AddWarning(ConnectQl.Results.Position,ConnectQl.Results.Position,System.String)">
            <summary>
            The add warning.
            </summary>
            <param name="start">
            The start.
            </param>
            <param name="end">
            The end.
            </param>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Results.Result.ConnectQl#Internal#Interfaces#IResultBuilder#RemoveNodeData(ConnectQl.Internal.Ast.Node,System.String)">
            <summary>
            Removes the data from the node.
            </summary>
            <param name="node">
            The node.
            </param>
            <param name="type">
            The type of the data to remove.
            </param>
            <returns>
            <c>true</c> if the node was removed, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Results.Result.ConnectQl#Internal#Interfaces#IResultBuilder#TransferData(ConnectQl.Internal.Ast.Node,ConnectQl.Internal.Ast.Node,System.Boolean)">
            <summary>
            Transfers the data from one node to another.
            </summary>
            <param name="from">
            The node to transfer all data from.
            </param>
            <param name="to">
            The node to transfer all data to.
            </param>
            <param name="overwrite">
            When <c>true</c>, overwrites duplicate values in <paramref name="to"/>, when <c>false</c>, keeps the original
                values.
            </param>
            <returns>
            <c>true</c> if data was moved, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Results.RowBuilder">
            <summary>
            The row builder.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Results.RowBuilder.fieldMapping">
            <summary>
            Translates fields to their display names.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Results.RowBuilder.fieldNames">
            <summary>
            The field names.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Results.RowBuilder.fields">
            <summary>
            The fields.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Results.RowBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Results.RowBuilder"/> class.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Results.RowBuilder.#ctor(ConnectQl.Internal.Results.FieldMapping)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Results.RowBuilder"/> class.
            </summary>
            <param name="fieldMapping">
            The field mapping.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Results.RowBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Results.RowBuilder"/> class.
            </summary>
            <param name="alias">
            The alias that will be prepended to all fields.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Results.RowBuilder.Alias">
            <summary>
            Gets the alias.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Results.RowBuilder.Fields">
            <summary>
            Gets the fields.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Results.RowBuilder.Attach(ConnectQl.Results.Row)">
            <summary>
            Attaches the row to the current builder.
            </summary>
            <param name="row">
            The row to attach.
            </param>
            <returns>
            The <paramref name="row"/> if it was already attached to the builder, or a copy otherwise.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Results.RowBuilder.ConnectQl#Internal#Results#IRowFieldResolver#DeserializeRow(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Deserializes the row.
            </summary>
            <param name="id">
            The id.
            </param>
            <param name="values">
            The values.
            </param>
            <returns>
            The row.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Results.RowBuilder.ConnectQl#Internal#Results#IRowFieldResolver#SerializeRow(ConnectQl.Results.Row)">
            <summary>
            Serializes a row.
            </summary>
            <param name="row">The row.</param>
            <returns>The id and values of the row.</returns>
        </member>
        <member name="M:ConnectQl.Internal.Results.RowBuilder.CombineRows(ConnectQl.Results.Row,ConnectQl.Results.Row)">
            <summary>
            Combines two rows.
            </summary>
            <param name="first">
            The first row.
            </param>
            <param name="second">
            The second row.
            </param>
            <returns>
            The combined rows or <c>null</c> if both rows were <c>null</c>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Results.RowBuilder.CreateRow``1(``0,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Creates a row.
            </summary>
            <param name="uniqueId">
            The unique id of the row.
            </param>
            <param name="values">
            The key/values in the row.
            </param>
            <typeparam name="T">
            The type of the unique id of the row.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.Results.Row"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Results.RowBuilder.GetIndex(System.String)">
            <summary>
            Gets the index for the field in the row.
            </summary>
            <param name="field">
            The field to get the index for.
            </param>
            <returns>
            The index or <c>null</c> if the field wasn't found.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Results.RowBuilder.GetIndices(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Gets the indices for the fields and their values.
            </summary>
            <param name="values">
            The values to get the indices for.
            </param>
            <returns>
            A list of tuples, containing the index and the object at that index, the largest index first.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Results.RowBuilder.GetInternalNameIndex(System.String)">
            <summary>
            Gets the index for the field with the internal name in the row.
            </summary>
            <param name="internalName">
            The internal name of the field to get the index for.
            </param>
            <returns>
            The index or <c>null</c> if the field wasn't found.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.TokenExtensions">
            <summary>
            The token extensions.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.TokenExtensions.ToPosition(ConnectQl.Internal.Token)">
            <summary>
            The to position.
            </summary>
            <param name="token">
            The token.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Results.Position"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Triggers.AfterJobTrigger">
            <summary>
            The after job trigger.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Triggers.AfterJobTrigger.jobName">
            <summary>
            The job name.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Triggers.AfterJobTrigger.handler">
            <summary>
            Stores the event handler.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Triggers.AfterJobTrigger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Triggers.AfterJobTrigger"/> class.
            </summary>
            <param name="jobName">
            The job name.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Triggers.AfterJobTrigger.Disable(ConnectQl.Interfaces.ITriggerContext)">
            <summary>
            Disables the trigger.
            </summary>
            <param name="context">
            The trigger context.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Triggers.AfterJobTrigger.Enable(ConnectQl.Interfaces.ITriggerContext)">
            <summary>
            Enables the trigger.
            </summary>
            <param name="context">
            The trigger context.
            </param>
        </member>
        <member name="T:ConnectQl.Internal.Triggers.IntervalTrigger">
            <summary>
            The interval trigger.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Triggers.IntervalTrigger.interval">
            <summary>
            The interval.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Triggers.IntervalTrigger.tokenSource">
            <summary>
            The token.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Triggers.IntervalTrigger.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Triggers.IntervalTrigger"/> class.
            </summary>
            <param name="interval">
            The interval.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Triggers.IntervalTrigger.Disable(ConnectQl.Interfaces.ITriggerContext)">
            <summary>
            Disables the trigger.
            </summary>
            <param name="context">
            The trigger context.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Triggers.IntervalTrigger.Enable(ConnectQl.Interfaces.ITriggerContext)">
            <summary>
            Enables the trigger.
            </summary>
            <param name="context">
            The trigger context.
            </param>
        </member>
        <member name="T:ConnectQl.Internal.TypeDescriptor">
            <summary>
            The type descriptor.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.TypeDescriptor.ThisAssemblyName">
            <summary>
            The assembly name of the current assembly.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.TypeDescriptor.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.TypeDescriptor"/> class.
            </summary>
            <param name="type">
            The type.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.TypeDescriptor.Interfaces">
            <summary>
            Gets the interfaces.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.TypeDescriptor.SimplifiedType">
            <summary>
            Gets the simplified type.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.Validation.BinaryTypeConverter">
            <summary>
            The dictionary extensions.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Validation.BinaryTypeConverter.Mappings">
            <summary>
            Maps the operands of a binary expression to a result type.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Validation.BinaryTypeConverter.GetResultType(System.Type,System.Type)">
            <summary>
            Gets the result type for the two operand types.
            </summary>
            <param name="first">
            The first operand.
            </param>
            <param name="second">
            The second operand.
            </param>
            <returns>
            The result type or <c>null</c> if no type conversion was possible.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.BinaryTypeConverter.Add``3(System.Collections.Generic.Dictionary{System.Tuple{System.Type,System.Type},System.Type})">
            <summary>
            Adds a mapping to the dictionary. It adds a mapping from {<typeparamref name="TOperand1"/>,
                <typeparamref name="TOperand2"/>} to <typeparamref name="TResult"/> and also a
                mapping from {<typeparamref name="TOperand2"/>, <typeparamref name="TOperand1"/>} to
                <typeparamref name="TResult"/>.
            </summary>
            <param name="dictionary">
            The dictionary.
            </param>
            <typeparam name="TOperand1">
            The type of the first operand.
            </typeparam>
            <typeparam name="TOperand2">
            The type of the second operand.
            </typeparam>
            <typeparam name="TResult">
            The result type.
            </typeparam>
            <returns>
            The <paramref name="dictionary"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Validation.NodeDataProviderExtensions">
            <summary>
            The node data provider extensions.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeDataProviderExtensions.GetAlias(ConnectQl.Internal.Interfaces.INodeDataProvider,ConnectQl.Internal.Ast.Node)">
            <summary>
            Gets the alias connected to the node.
            </summary>
            <param name="dataProvider">
            The data provider.
            </param>
            <param name="node">
            The node.
            </param>
            <returns>
            The alias or <c>null</c> when no alias is available.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeDataProviderExtensions.GetExpression(ConnectQl.Internal.Interfaces.INodeDataProvider,ConnectQl.Internal.Ast.Expressions.SqlExpressionBase)">
            <summary>
            Gets the expression connected to the node.
            </summary>
            <param name="dataProvider">
            The data provider.
            </param>
            <param name="node">
            The node.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeDataProviderExtensions.GetFactoryExpression(ConnectQl.Internal.Interfaces.INodeDataProvider,ConnectQl.Internal.Ast.Node)">
            <summary>
            Gets the source factory .
            </summary>
            <param name="dataProvider">
            The data provider.
            </param>
            <param name="node">
            The node.
            </param>
            <returns>
            The source factory.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeDataProviderExtensions.GetFieldReplacer(ConnectQl.Internal.Interfaces.INodeDataProvider,ConnectQl.Internal.Ast.Expressions.FieldReferenceSqlExpression)">
            <summary>
            Gets the expression that will replace a <see cref="T:ConnectQl.Internal.Ast.Expressions.FieldReferenceSqlExpression"/> in an ORDER BY clause.
            </summary>
            <param name="dataProvider">
            The data provider.
            </param>
            <param name="field">
            The field.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Expressions.SqlExpressionBase"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeDataProviderExtensions.GetFunction(ConnectQl.Internal.Interfaces.INodeDataProvider,ConnectQl.Internal.Ast.Node)">
            <summary>
            Gets the function connected to the node.
            </summary>
            <param name="dataProvider">
            The data provider.
            </param>
            <param name="node">
            The node.
            </param>
            <returns>
            The function.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeDataProviderExtensions.GetScope(ConnectQl.Internal.Interfaces.INodeDataProvider,ConnectQl.Internal.Ast.Node)">
            <summary>
            Gets the scope connected to the node.
            </summary>
            <param name="dataProvider">
            The data provider.
            </param>
            <param name="node">
            The node.
            </param>
            <returns>
            The scope.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeDataProviderExtensions.GetType(ConnectQl.Internal.Interfaces.INodeDataProvider,ConnectQl.Internal.Ast.Node)">
            <summary>
            Gets the type of the node.
            </summary>
            <param name="dataProvider">
            The data provider.
            </param>
            <param name="node">
            The node.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.ITypeDescriptor"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeDataProviderExtensions.IsGroupFunction(ConnectQl.Internal.Interfaces.INodeDataProvider,ConnectQl.Internal.Ast.Node)">
            <summary>
            Checks if the node is a group function.
            </summary>
            <param name="dataProvider">
            The data provider.
            </param>
            <param name="node">
            The node.
            </param>
            <returns>
            <c>true</c> if the node is a group function, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeDataProviderExtensions.MarkAsGroupFunction(ConnectQl.Internal.Interfaces.INodeDataProvider,ConnectQl.Internal.Ast.Node)">
            <summary>
            Marks the node as a group function.
            </summary>
            <param name="dataProvider">
            The data provider.
            </param>
            <param name="node">
            The node.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeDataProviderExtensions.SetAlias(ConnectQl.Internal.Interfaces.INodeDataProvider,ConnectQl.Internal.Ast.Node,System.String)">
            <summary>
            Sets the alias connected to the node.
            </summary>
            <param name="dataProvider">
            The data provider.
            </param>
            <param name="node">
            The node.
            </param>
            <param name="alias">
            The alias.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeDataProviderExtensions.SetExpression(ConnectQl.Internal.Interfaces.INodeDataProvider,ConnectQl.Internal.Ast.Expressions.SqlExpressionBase,System.Linq.Expressions.Expression)">
            <summary>
            Sets the expression connected to the node.
            </summary>
            <param name="dataProvider">
            The data provider.
            </param>
            <param name="node">
            The node.
            </param>
            <param name="expression">
            The expression.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeDataProviderExtensions.SetFactoryExpression(ConnectQl.Internal.Interfaces.INodeDataProvider,ConnectQl.Internal.Ast.Node,System.Linq.Expressions.Expression)">
            <summary>
            Sets the source factory .
            </summary>
            <param name="dataProvider">
            The data provider.
            </param>
            <param name="node">
            The node.
            </param>
            <param name="factory">
            The factory.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeDataProviderExtensions.SetFieldReplacer(ConnectQl.Internal.Interfaces.INodeDataProvider,ConnectQl.Internal.Ast.Expressions.FieldReferenceSqlExpression,ConnectQl.Internal.Ast.Expressions.SqlExpressionBase)">
            <summary>
            Sets the expression that will replace a <see cref="T:ConnectQl.Internal.Ast.Expressions.FieldReferenceSqlExpression"/> in an ORDER BY clause.
            </summary>
            <param name="dataProvider">
            The data provider.
            </param>
            <param name="field">
            The field.
            </param>
            <param name="expression">
            The expression.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeDataProviderExtensions.SetFunction(ConnectQl.Internal.Interfaces.INodeDataProvider,ConnectQl.Internal.Ast.Node,ConnectQl.Interfaces.IFunctionDescriptor)">
            <summary>
            Sets the function connected to the node.
            </summary>
            <param name="dataProvider">
            The data provider.
            </param>
            <param name="node">
            The node.
            </param>
            <param name="function">
            The function.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeDataProviderExtensions.SetScope(ConnectQl.Internal.Interfaces.INodeDataProvider,ConnectQl.Internal.Ast.Node,ConnectQl.Internal.Validation.NodeScope)">
            <summary>
            Sets the scope connected to the node.
            </summary>
            <param name="dataProvider">
            The data provider.
            </param>
            <param name="node">
            The node.
            </param>
            <param name="scope">
            The scope.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeDataProviderExtensions.SetType(ConnectQl.Internal.Interfaces.INodeDataProvider,ConnectQl.Internal.Ast.Node,ConnectQl.Interfaces.ITypeDescriptor)">
            <summary>
            Sets the type of the node.
            </summary>
            <param name="dataProvider">
            The data provider.
            </param>
            <param name="node">
            The node.
            </param>
            <param name="type">
            The type.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeDataProviderExtensions.GetQueryPlan(ConnectQl.Internal.Interfaces.INodeDataProvider,ConnectQl.Internal.Ast.Node)">
            <summary>
            Gets the query connected to the node.
            </summary>
            <param name="dataProvider">
            The data provider.
            </param>
            <param name="node">
            The node.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IQuery"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeDataProviderExtensions.SetQueryPlan(ConnectQl.Internal.Interfaces.INodeDataProvider,ConnectQl.Internal.Ast.Node,ConnectQl.Internal.Interfaces.IQueryPlan)">
            <summary>
            Sets the query connected to the node.
            </summary>
            <param name="dataProvider">
            The data provider.
            </param>
            <param name="node">
            The node.
            </param>
            <param name="query">
            The query.
            </param>
        </member>
        <member name="T:ConnectQl.Internal.Validation.NodeException">
            <summary>
            The node exception.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeException.#ctor(ConnectQl.Internal.Ast.Node,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Validation.NodeException"/> class.
            </summary>
            <param name="node">
            The node.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="innerException">
            The inner exception.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeException.#ctor(ConnectQl.Internal.Ast.Node,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Validation.NodeException"/> class.
            </summary>
            <param name="node">
            The node.
            </param>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Validation.NodeException.Node">
            <summary>
            Gets the node that has the error.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.Validation.NodeExtensions">
            <summary>
            The node extensions.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeExtensions.GetDisplay(ConnectQl.Internal.Ast.Node,System.Int32)">
            <summary>
            The get display.
            </summary>
            <param name="node">
            The node.
            </param>
            <param name="indentSize">
            The indent size.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeExtensions.GetDisplay(ConnectQl.Internal.Ast.Node,ConnectQl.Internal.Interfaces.INodeDataProvider,System.Int32)">
            <summary>
            The get display.
            </summary>
            <param name="node">
            The node.
            </param>
            <param name="data">
            The node data provider.
            </param>
            <param name="indentSize">
            The indent size.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter">
            <summary>
            The async node to string converter.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter.indentSize">
            <summary>
            The indent size.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter.data">
            <summary>
            The node data provider.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter.indent">
            <summary>
            The indent.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter.#ctor(System.Int32,ConnectQl.Internal.Interfaces.INodeDataProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter"/> class.
            </summary>
            <param name="indentSize">
            The indent size.
            </param>
            <param name="data">
            The node data provider.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter.Builder">
            <summary>
            Gets the builder.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter.VisitAliasedSqlExpression(ConnectQl.Internal.Ast.Expressions.AliasedSqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.AliasedSqlExpression"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter.VisitApplySource(ConnectQl.Internal.Ast.Sources.ApplySource)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Sources.ApplySource"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter.VisitBinarySqlExpression(ConnectQl.Internal.Ast.Expressions.BinarySqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.BinarySqlExpression"/> expression.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter.VisitBlock(ConnectQl.Internal.Ast.Statements.Block)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Statements.Block"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter.VisitConstSqlExpression(ConnectQl.Internal.Ast.Expressions.ConstSqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.ConstSqlExpression"/> expression.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter.VisitDeclareJobStatement(ConnectQl.Internal.Ast.Statements.DeclareJobStatement)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Statements.DeclareJobStatement"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter.VisitDeclareStatement(ConnectQl.Internal.Ast.Statements.DeclareStatement)">
            <summary>
            Visits a declare statement.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter.VisitFieldReferenceSqlExpression(ConnectQl.Internal.Ast.Expressions.FieldReferenceSqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.FieldReferenceSqlExpression"/> expression.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter.VisitFunctionCallSqlExpression(ConnectQl.Internal.Ast.Expressions.FunctionCallSqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.FunctionCallSqlExpression"/> expression.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter.VisitFunctionSource(ConnectQl.Internal.Ast.Sources.FunctionSource)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Sources.FunctionSource"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter.VisitFunctionTarget(ConnectQl.Internal.Ast.Targets.FunctionTarget)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Targets.FunctionTarget"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter.VisitImportStatement(ConnectQl.Internal.Ast.Statements.ImportStatement)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Statements.ImportStatement"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter.VisitInsertStatement(ConnectQl.Internal.Ast.Statements.InsertStatement)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Statements.InsertStatement"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter.VisitJoinSource(ConnectQl.Internal.Ast.Sources.JoinSource)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Sources.JoinSource"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter.VisitOrderBySqlExpression(ConnectQl.Internal.Ast.Expressions.OrderBySqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.OrderBySqlExpression"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter.VisitSelectFromStatement(ConnectQl.Internal.Ast.Statements.SelectFromStatement)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Statements.SelectFromStatement"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter.VisitSelectSource(ConnectQl.Internal.Ast.Sources.SelectSource)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Sources.SelectSource"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter.VisitSelectUnionStatement(ConnectQl.Internal.Ast.Statements.SelectUnionStatement)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Statements.SelectUnionStatement"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter.VisitTriggerStatement(ConnectQl.Internal.Ast.Statements.TriggerStatement)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Statements.TriggerStatement"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter.VisitUnarySqlExpression(ConnectQl.Internal.Ast.Expressions.UnarySqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.UnarySqlExpression"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter.VisitUseStatement(ConnectQl.Internal.Ast.Statements.UseStatement)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Statements.UseStatement"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter.VisitVariableDeclaration(ConnectQl.Internal.Ast.VariableDeclaration)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.VariableDeclaration"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter.VisitVariableSqlExpression(ConnectQl.Internal.Ast.Expressions.VariableSqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.VariableSqlExpression"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter.VisitWildCardSqlExpression(ConnectQl.Internal.Ast.Expressions.WildcardSqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.WildcardSqlExpression"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter.Indent">
            <summary>
            The indent.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter.NewLine">
            <summary>
            The new line.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.NodeExtensions.NodeToStringConverter.UnIndent">
            <summary>
            The un indent.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Validation.NodeScope">
            <summary>
            The base expression scope.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Validation.NodeScope.Initial">
            <summary>
            The expression isn't classified yet.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Validation.NodeScope.Error">
            <summary>
            The expression contains an error.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Validation.NodeScope.Constant">
            <summary>
            The expression is a constant.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Validation.NodeScope.Row">
            <summary>
            The expression contains references to a row.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Validation.NodeScope.Group">
            <summary>
            The expression contains references to a group.
            </summary>
        </member>
        <member name="T:ConnectQl.Internal.Validation.Operators.BinaryOperator">
            <summary>
            The binary operator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Validation.Operators.BinaryOperator.Operators">
            <summary>
            The operators.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Operators.BinaryOperator.GenerateExpression(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression,System.Action{System.String})">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> for the binary operator.
            </summary>
            <param name="first">
            The first operand of the binary expression.
            </param>
            <param name="op">
            The operator.
            </param>
            <param name="second">
            The second operand of the binary expression.
            </param>
            <param name="onError">
            Called when errors occur.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Operators.BinaryOperator.InferType(System.Type,System.String,System.Type,System.Action{System.String})">
            <summary>
            Infers the type of the binary expression.
            </summary>
            <param name="first">
            The first operand of the binary expression.
            </param>
            <param name="op">
            The operator.
            </param>
            <param name="second">
            The second operand of the binary expression.
            </param>
            <param name="errorCallback">
            Called when errors occur.
            </param>
            <returns>
            The <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Operators.BinaryOperator.DoConversion(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Applies the expression function to the arguments after converting to a common type.
            </summary>
            <param name="first">
            The first expression.
            </param>
            <param name="second">
            The second expression.
            </param>
            <param name="expression">
            The expression.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Operators.BinaryOperator.GenerateAdd(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an expression for the '+' operator.
            </summary>
            <param name="first">
            The first argument.
            </param>
            <param name="second">
            The second argument.
            </param>
            <returns>
            The generated expression.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Operators.BinaryOperator.GenerateAnd(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an expression for the 'AND' operator.
            </summary>
            <param name="first">
            The first argument.
            </param>
            <param name="second">
            The second argument.
            </param>
            <returns>
            The generated expression.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Operators.BinaryOperator.GenerateDivide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an expression for the '/' operator.
            </summary>
            <param name="first">
            The first argument.
            </param>
            <param name="second">
            The second argument.
            </param>
            <returns>
            The generated expression.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Operators.BinaryOperator.GenerateEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an expression for the '=' operator.
            </summary>
            <param name="first">
            The first argument.
            </param>
            <param name="second">
            The second argument.
            </param>
            <returns>
            The generated expression.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Operators.BinaryOperator.GenerateGreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an expression for the '&gt;' operator.
            </summary>
            <param name="first">
            The first argument.
            </param>
            <param name="second">
            The second argument.
            </param>
            <returns>
            The generated expression.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Operators.BinaryOperator.GenerateGreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an expression for the '&gt;=' operator.
            </summary>
            <param name="first">
            The first argument.
            </param>
            <param name="second">
            The second argument.
            </param>
            <returns>
            The generated expression.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Operators.BinaryOperator.GenerateLessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an expression for the '&lt;' operator.
            </summary>
            <param name="first">
            The first argument.
            </param>
            <param name="second">
            The second argument.
            </param>
            <returns>
            The generated expression.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Operators.BinaryOperator.GenerateLessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an expression for the '&lt;=' operator.
            </summary>
            <param name="first">
            The first argument.
            </param>
            <param name="second">
            The second argument.
            </param>
            <returns>
            The generated expression.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Operators.BinaryOperator.GenerateModulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an expression for the '%' operator.
            </summary>
            <param name="first">
            The first argument.
            </param>
            <param name="second">
            The second argument.
            </param>
            <returns>
            The generated expression.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Operators.BinaryOperator.GenerateMultiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an expression for the '*' operator.
            </summary>
            <param name="first">
            The first argument.
            </param>
            <param name="second">
            The second argument.
            </param>
            <returns>
            The generated expression.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Operators.BinaryOperator.GenerateNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an expression for the '&lt;&gt;' operator.
            </summary>
            <param name="first">
            The first argument.
            </param>
            <param name="second">
            The second argument.
            </param>
            <returns>
            The generated expression.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Operators.BinaryOperator.GenerateOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an expression for the 'OR' operator.
            </summary>
            <param name="first">
            The first argument.
            </param>
            <param name="second">
            The second argument.
            </param>
            <returns>
            The generated expression.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Operators.BinaryOperator.GeneratePower(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an expression for the '^' operator.
            </summary>
            <param name="first">
            The first argument.
            </param>
            <param name="second">
            The second argument.
            </param>
            <returns>
            The generated expression.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Operators.BinaryOperator.GenerateSubtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an expression for the '-' operator.
            </summary>
            <param name="first">
            The first argument.
            </param>
            <param name="second">
            The second argument.
            </param>
            <returns>
            The generated expression.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Validation.Operators.Converter">
            <summary>
            The converter.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Validation.Operators.Converter.AsyncEnumerableExtensionsConvertMethod">
            <summary>
            The <see cref="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.Convert``1(ConnectQl.AsyncEnumerables.IAsyncEnumerable)"/> method.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Operators.Converter.Convert(System.Linq.Expressions.Expression,System.Type)">
            <summary>
            Converts an expression to the specified type.
            </summary>
            <param name="from">
            The expression to convert.
            </param>
            <param name="to">
            The type to convert to.
            </param>
            <returns>
            The <paramref name="from"/> or a new expression if conversion was necessary.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Operators.Converter.ValidateConversion(ConnectQl.Internal.Ast.Node,System.Type,System.Type)">
            <summary>
            Checks if conversion can be done to the specified type.
            </summary>
            <param name="node">
            The node.
            </param>
            <param name="from">
            The type to convert from.
            </param>
            <param name="to">
            The type to convert to.
            </param>
            <exception cref="T:ConnectQl.Internal.Validation.NodeException">
            Thrown when conversion fails.
            </exception>
        </member>
        <member name="T:ConnectQl.Internal.Validation.Operators.Operator">
            <summary>
            Contains methods used in binary and unary operators.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Validation.Operators.Operator.CommonTypeOrder">
            <summary>
            When two expressions do not have the same type, one of the two has to be cast to the other type. This array holds
                the most important type to the least important one.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Operators.Operator.ToObject(System.Linq.Expressions.Expression)">
            <summary>
            Converts an expression into an object.
            </summary>
            <param name="expression">
            The expression to convert.
            </param>
            <returns>
            The expression, or a new one if conversion is needed.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Operators.Operator.ToString(System.Linq.Expressions.Expression)">
            <summary>
            Converts an expression into a string.
            </summary>
            <param name="expression">
            The expression to convert.
            </param>
            <returns>
            The expression, or a new one if conversion is needed.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Operators.Operator.ToType(System.Linq.Expressions.Expression,System.Type)">
            <summary>
            Converts an expression into another type.
            </summary>
            <param name="expression">
            The expression to convert.
            </param>
            <param name="type">
            The type to convert to.
            </param>
            <returns>
            The expression, or a new one if conversion is needed.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Validation.Operators.UnaryOperator">
            <summary>
            The unary operator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Validation.Operators.UnaryOperator.Operators">
            <summary>
            The operators.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Operators.UnaryOperator.GenerateExpression(System.String,System.Linq.Expressions.Expression)">
            <summary>
            Generates an <see cref="T:System.Linq.Expressions.Expression"/> for the unary  operator.
            </summary>
            <param name="op">
            The operator.
            </param>
            <param name="operand">
            The operand of the unary expression.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Operators.UnaryOperator.InferType(System.String,System.Type)">
            <summary>
            Infers the type of the unary expression.
            </summary>
            <param name="op">
            The operator.
            </param>
            <param name="operand">
            The operand of the unary expression.
            </param>
            ///
            <returns>
            The <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Operators.UnaryOperator.GenerateMinus(System.Linq.Expressions.Expression)">
            <summary>
            Generates an expression for the '-' operator.
            </summary>
            <param name="operand">
            The argument.
            </param>
            <returns>
            The generated expression.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Operators.UnaryOperator.GenerateNot(System.Linq.Expressions.Expression)">
            <summary>
            Generates an expression for the '!' and 'NOT' operator.
            </summary>
            <param name="operand">
            The argument.
            </param>
            <returns>
            The generated expression.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Operators.UnaryOperator.GeneratePlus(System.Linq.Expressions.Expression)">
            <summary>
            Generates an expression for the '+' operator.
            </summary>
            <param name="operand">
            The argument.
            </param>
            <returns>
            The generated expression.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Validation.ValidationContext">
            <summary>
            The validation context.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Validation.ValidationContext.filename">
            <summary>
            The file.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Validation.ValidationContext.messages">
            <summary>
            The errors.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Validation.ValidationContext.nodeData">
            <summary>
            The node data.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Validation.ValidationContext.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Validation.ValidationContext"/> class.
            </summary>
            <param name="filename">
            The filename.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Validation.ValidationContext.Errors">
            <summary>
            Gets the errors.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Validation.ValidationContext.InformationMessages">
            <summary>
            Gets the information messages.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Validation.ValidationContext.Warnings">
            <summary>
            Gets the warnings.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Validation.ValidationContext.AddError(ConnectQl.Internal.Ast.Node,System.String)">
            <summary>
            Adds an error to the node.
            </summary>
            <param name="node">
            The node.
            </param>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="T:ConnectQl.Internal.Validation.ValidationScope">
            <summary>
            The validation scope.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Validation.ValidationScope.aliases">
            <summary>
            The aliases.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Validation.ValidationScope.context">
            <summary>
            The context.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Validation.ValidationScope.functions">
            <summary>
            The functions.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Validation.ValidationScope.groupings">
            <summary>
            The groupings.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Validation.ValidationScope.registeredPlugins">
            <summary>
            The registered plugins.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Validation.ValidationScope.sources">
            <summary>
            The functions.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Validation.ValidationScope.variables">
            <summary>
            The variables.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Validation.ValidationScope.#ctor(ConnectQl.Internal.Interfaces.IValidationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Validation.ValidationScope"/> class.
            </summary>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Validation.ValidationScope.#ctor(ConnectQl.Internal.Validation.ValidationScope)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Validation.ValidationScope"/> class.
            </summary>
            <param name="parent">
            The parent.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Validation.ValidationScope.FileFormats">
            <summary>
            Gets the file formats.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Validation.ValidationScope.Functions">
            <summary>
            Gets the functions.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Validation.ValidationScope.Parent">
            <summary>
            Gets the parent validation scope.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Validation.ValidationScope.AddAlias(System.String)">
            <summary>
            Adds an alias for a field to the scope. When an alias already exists in the current scope, it is appended by a
                number.
            </summary>
            <param name="alias">
            The alias to add. When this is <c>null</c>, a default value will be supplied.
            </param>
            <returns>
            The alias for the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.ValidationScope.AddGroupings(System.Collections.Generic.IEnumerable{ConnectQl.Internal.Ast.Expressions.SqlExpressionBase})">
            <summary>
            Adds groupings to the current scope.
            </summary>
            <param name="groupingsToAdd">
            The groupings to add.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Validation.ValidationScope.AddSource(System.String,ConnectQl.Internal.Ast.Sources.SourceBase)">
            <summary>
            Adds a source to the current scope.
            </summary>
            <param name="sourceAlias">
            The source alias.
            </param>
            <param name="source">
            The source.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Validation.ValidationScope.AddVariable(System.String,ConnectQl.Interfaces.ITypeDescriptor)">
            <summary>
            Adds a variable to the scope.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="type">
            The type.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Validation.ValidationScope.CreateSubScope">
            <summary>
            Creates a sub-scope.
            </summary>
            <returns>
            The <see cref="T:ConnectQl.Internal.Validation.ValidationScope"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.ValidationScope.EnablePlugin(ConnectQl.Interfaces.IConnectQlPlugin)">
            <summary>
            The enable plugin.
            </summary>
            <param name="plugin">
            The plugin.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Validation.ValidationScope.EnablePlugin(System.String)">
            <summary>
            The enable plugin.
            </summary>
            <param name="name">
            The name.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.ValidationScope.GetAvailablePlugins">
            <summary>
            The get available plugins.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.ValidationScope.GetFunction(System.String,System.Collections.ObjectModel.ReadOnlyCollection{ConnectQl.Internal.Ast.Expressions.SqlExpressionBase})">
            <summary>
            Gets the function by name.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="arguments">
            The arguments.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IFunctionDescriptor"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.ValidationScope.GetSource(System.String)">
            <summary>
            Gets the source with the specified alias.
            </summary>
            <param name="alias">
            The alias.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Sources.SourceBase"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the source is not found.
            </exception>
        </member>
        <member name="M:ConnectQl.Internal.Validation.ValidationScope.GetVariableType(System.String)">
            <summary>
            Gets the type of the variable.
            </summary>
            <param name="variable">
            The variable.
            </param>
            <returns>
            The <see cref="T:System.Type"/> or <c>null</c> when the variable was not declared in this or the parent scopes.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.ValidationScope.IsGroupByExpression(ConnectQl.Internal.Ast.Expressions.SqlExpressionBase)">
            <summary>
            Checks if a node is used in a group-by expression.
            </summary>
            <param name="node">
            The node to check.
            </param>
            <returns>
            <c>true</c> if the node is in a group-by expression, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.ValidationScope.IsPluginEnabled(System.String)">
            <summary>
            The is plugin enabled.
            </summary>
            <param name="name">
            The name.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Internal.Validation.Validator">
            <summary>
            The validator.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Validation.Validator.DefaultFunctions">
            <summary>
            The default functions.
            </summary>
        </member>
        <member name="F:ConnectQl.Internal.Validation.Validator.context">
            <summary>
            The context.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Validator.#ctor(ConnectQl.Internal.Interfaces.IValidationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Internal.Validation.Validator"/> class.
            </summary>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="P:ConnectQl.Internal.Validation.Validator.Data">
            <summary>
            Gets the data.
            </summary>
        </member>
        <member name="P:ConnectQl.Internal.Validation.Validator.Scope">
            <summary>
            Gets the scope.
            </summary>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Validator.Validate``1(ConnectQl.Internal.Interfaces.IValidationContext,``0)">
            <summary>
            Validates the specified <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </summary>
            <typeparam name="T">
            The type of the node to validate.
            </typeparam>
            <param name="context">
            The context.
            </param>
            <param name="node">
            The node to validate.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Validation.ValidationContext"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Validator.Validate``1(ConnectQl.Internal.Interfaces.IValidationContext,``0,System.Linq.ILookup{System.String,ConnectQl.Interfaces.IFunctionDescriptor}@)">
            <summary>
            Validates the specified <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </summary>
            <typeparam name="T">
            The type of the node to validate.
            </typeparam>
            <param name="context">
            The context.
            </param>
            <param name="node">
            The node to validate.
            </param>
            <param name="functions">
            The functions.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Validation.ValidationContext"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Validator.VisitAliasedSqlExpression(ConnectQl.Internal.Ast.Expressions.AliasedSqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.AliasedSqlExpression"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Validator.VisitBinarySqlExpression(ConnectQl.Internal.Ast.Expressions.BinarySqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.BinarySqlExpression"/> expression.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Validator.VisitConstSqlExpression(ConnectQl.Internal.Ast.Expressions.ConstSqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.ConstSqlExpression"/> expression.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Validator.VisitFieldReferenceSqlExpression(ConnectQl.Internal.Ast.Expressions.FieldReferenceSqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.FieldReferenceSqlExpression"/> expression.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Validator.VisitFunctionCallSqlExpression(ConnectQl.Internal.Ast.Expressions.FunctionCallSqlExpression)">
            <summary>
            The visit function call async.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Validator.VisitFunctionSource(ConnectQl.Internal.Ast.Sources.FunctionSource)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Sources.FunctionSource"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Validator.VisitFunctionTarget(ConnectQl.Internal.Ast.Targets.FunctionTarget)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Targets.FunctionTarget"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Validator.VisitImportPluginStatement(ConnectQl.Internal.Ast.Statements.ImportPluginStatement)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Statements.ImportPluginStatement"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Validator.VisitJoinSource(ConnectQl.Internal.Ast.Sources.JoinSource)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Sources.JoinSource"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Validator.Visit``1(``0)">
            <summary>
            Visits the node and ensures the result is of type <typeparamref name="T"/>. When node is <c>null</c>, returns
                <c>null</c>.
            </summary>
            <typeparam name="T">
            The type of the result.
            </typeparam>
            <param name="node">
            The node.
            </param>
            <returns>
            The <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Validator.VisitSelectFromStatement(ConnectQl.Internal.Ast.Statements.SelectFromStatement)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Statements.SelectFromStatement"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Validator.VisitSelectSource(ConnectQl.Internal.Ast.Sources.SelectSource)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Sources.SelectSource"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Validator.VisitTrigger(ConnectQl.Internal.Ast.Trigger)">
            <summary>
            The visit trigger.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Ast.Node"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Validator.VisitUnarySqlExpression(ConnectQl.Internal.Ast.Expressions.UnarySqlExpression)">
            <summary>
            The visit unary async.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Validator.VisitVariableDeclaration(ConnectQl.Internal.Ast.VariableDeclaration)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.VariableDeclaration"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Validator.VisitVariableSource(ConnectQl.Internal.Ast.Sources.VariableSource)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Sources.VariableSource"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Validator.VisitVariableSqlExpression(ConnectQl.Internal.Ast.Expressions.VariableSqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.VariableSqlExpression"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Validator.VisitVariableTarget(ConnectQl.Internal.Ast.Targets.VariableTarget)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Targets.FunctionTarget"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Validator.VisitWildCardSqlExpression(ConnectQl.Internal.Ast.Expressions.WildcardSqlExpression)">
            <summary>
            Visits a <see cref="T:ConnectQl.Internal.Ast.Expressions.WildcardSqlExpression"/>.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The node, or a new version of the node.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Validator.EnterScope">
            <summary>
            Enters a new scope.
            </summary>
            <returns>
            A <see cref="T:System.IDisposable"/>, that will exit the scope when disposed.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Validator.AddError(ConnectQl.Internal.Ast.Node,System.String)">
            <summary>
            Adds an error for the specified node.
            </summary>
            <param name="node">
            The node connected to this error.
            </param>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Validator.AddWarning(ConnectQl.Internal.Ast.Node,System.String)">
            <summary>
            Adds a warning for the specified node.
            </summary>
            <param name="node">
            The node connected to this error.
            </param>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Validator.ReplaceEnumArguments(ConnectQl.Internal.Ast.Expressions.FunctionCallSqlExpression)">
            <summary>
            Replaces strings and field references to enum values.
            </summary>
            <param name="node">
            The node to replace values with.
            </param>
            <returns>
            The node with replaced.
            </returns>
        </member>
        <member name="M:ConnectQl.Internal.Validation.Validator.ValidateChildren``1(``0)">
            <summary>
            The validate children.
            </summary>
            <param name="node">
            The node.
            </param>
            <typeparam name="T">
            The type of the node.
            </typeparam>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.ConnectQlContext">
            <summary>
                The ConnectQl context.
            </summary>
        </member>
        <member name="F:ConnectQl.ConnectQlContext.defaultPluginResolver">
            <summary>
            The default plugin resolver.
            </summary>
        </member>
        <member name="F:ConnectQl.ConnectQlContext.functions">
            <summary>
                The functions.
            </summary>
        </member>
        <member name="F:ConnectQl.ConnectQlContext.log">
            <summary>
                Stores the logger.
            </summary>
        </member>
        <member name="F:ConnectQl.ConnectQlContext.materializationPolicy">
            <summary>
                Stores the materialization policy.
            </summary>
        </member>
        <member name="F:ConnectQl.ConnectQlContext.uriResolver">
            <summary>
            The URI resolver.
            </summary>
        </member>
        <member name="M:ConnectQl.ConnectQlContext.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ConnectQl.ConnectQlContext" /> class.
            </summary>
        </member>
        <member name="M:ConnectQl.ConnectQlContext.#ctor(ConnectQl.Interfaces.IPluginResolver)">
            <summary>
                Initializes a new instance of the <see cref="T:ConnectQl.ConnectQlContext" /> class.
            </summary>
            <param name="resolver">
                The resolver.
            </param>
        </member>
        <member name="P:ConnectQl.ConnectQlContext.DefaultPluginResolver">
            <summary>
            Gets or sets the default plugin resolver.
            </summary>
        </member>
        <member name="P:ConnectQl.ConnectQlContext.DefaultProviderName">
            <summary>
                Gets or sets the default resolver name.
            </summary>
        </member>
        <member name="P:ConnectQl.ConnectQlContext.FileFormats">
            <summary>
                Gets the file formats.
            </summary>
        </member>
        <member name="P:ConnectQl.ConnectQlContext.Functions">
            <summary>
                Gets the registered functions.
            </summary>
        </member>
        <member name="P:ConnectQl.ConnectQlContext.JobRunner">
            <summary>
                Gets or sets the job runner.
            </summary>
        </member>
        <member name="P:ConnectQl.ConnectQlContext.Log">
            <summary>
                Gets or sets the logger.
            </summary>
        </member>
        <member name="P:ConnectQl.ConnectQlContext.MaterializationPolicy">
            <summary>
                Gets or sets the materialization policy.
            </summary>
        </member>
        <member name="P:ConnectQl.ConnectQlContext.PluginResolver">
            <summary>
                Gets or sets the plugin resolver.
            </summary>
        </member>
        <member name="P:ConnectQl.ConnectQlContext.UriResolver">
            <summary>
                Gets or sets a lambda that opens the file at the specified path and returns the stream.
            </summary>
        </member>
        <member name="P:ConnectQl.ConnectQlContext.WriteProgressInterval">
            <summary>
                Gets or sets the write progress interval. When this value is anything other than 0, progress is reported after this
                number of records.
            </summary>
        </member>
        <member name="M:ConnectQl.ConnectQlContext.ExecuteAsync(System.String)">
            <summary>
                Executes the query.
            </summary>
            <param name="query">
                The query.
            </param>
            <returns>
                The execute result.
            </returns>
        </member>
        <member name="M:ConnectQl.ConnectQlContext.ExecuteAsync(System.IO.Stream)">
            <summary>
                Executes the queries in the stream.
            </summary>
            <param name="stream">
                The stream.
            </param>
            <returns>
                The execute result.
            </returns>
        </member>
        <member name="M:ConnectQl.ConnectQlContext.ExecuteAsync(System.String,System.IO.Stream)">
            <summary>
                Executes the queries in the stream.
            </summary>
            <param name="filename">
                The filename.
            </param>
            <param name="stream">
                The stream.
            </param>
            <returns>
                The execute result.
            </returns>
        </member>
        <member name="M:ConnectQl.ConnectQlContext.ExecuteFileAsync(System.String)">
            <summary>
                Executes the queries in the stream.
            </summary>
            <param name="filename">
                The filename.
            </param>
            <returns>
                The execute result.
            </returns>
        </member>
        <member name="M:ConnectQl.ConnectQlContext.Parse(System.IO.Stream,ConnectQl.Internal.Interfaces.INodeDataProvider,ConnectQl.Internal.Interfaces.IMessageWriter,System.Boolean,System.Collections.Generic.List{ConnectQl.Internal.Token})">
            <summary>
                Parses the stream into an AST <see cref="T:ConnectQl.Internal.Ast.Statements.Block" /> node.
            </summary>
            <param name="content">
                The content to parse.
            </param>
            <param name="data">
                The data.
            </param>
            <param name="messages">
                The errors.
            </param>
            <param name="parseForIntellisense">
                The parse For Intellisense.
            </param>
            <param name="tokens">
                The tokens.
            </param>
            <returns>
                The <see cref="T:ConnectQl.Internal.Ast.Statements.Block" />.
            </returns>
        </member>
        <member name="M:ConnectQl.ConnectQlContext.ExecuteInternalAsync(System.String,System.IO.Stream)">
            <summary>
                Implementation of the execute.
            </summary>
            <param name="filename">
                The filename.
            </param>
            <param name="content">
                The content.
            </param>
            <returns>
                The <see cref="T:System.Threading.Tasks.Task" />.
            </returns>
        </member>
        <member name="M:ConnectQl.ConnectQlContext.GetParsedScript(System.String,System.IO.Stream,System.Boolean)">
            <summary>
                Parses and validates the content.
            </summary>
            <param name="filename">
                The filename.
            </param>
            <param name="content">
                The content.
            </param>
            <param name="emitComments">
                The emit Comments.
            </param>
            <returns>
                The parsed script, or <c>null</c> if errors occurred.
            </returns>
        </member>
        <member name="M:ConnectQl.ConnectQlContext.HandleErrors(ConnectQl.Internal.ExecutionContextImplementation)">
            <summary>
                Handle errors.
            </summary>
            <param name="context">
                The context.
            </param>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
            <exception cref="T:System.Exception">
                Thrown when an error was found.
            </exception>
        </member>
        <member name="T:ConnectQl.ConnectQlContext.ClassifiedToken">
            <summary>
                The classified token.
            </summary>
        </member>
        <member name="M:ConnectQl.ConnectQlContext.ClassifiedToken.#ctor(System.Int32,System.Int32,ConnectQl.Intellisense.Classification,System.Int32,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:ConnectQl.ConnectQlContext.ClassifiedToken" /> class.
            </summary>
            <param name="start">
                The start position of the token.
            </param>
            <param name="end">
                The end position of the token.
            </param>
            <param name="classification">
                The classification.
            </param>
            <param name="kind">
                The kind.
            </param>
            <param name="value">
                The value.
            </param>
        </member>
        <member name="P:ConnectQl.ConnectQlContext.ClassifiedToken.Classification">
            <summary>
                Gets or sets the classification.
            </summary>
        </member>
        <member name="P:ConnectQl.ConnectQlContext.ClassifiedToken.End">
            <summary>
                Gets the end.
            </summary>
        </member>
        <member name="P:ConnectQl.ConnectQlContext.ClassifiedToken.Kind">
            <summary>
                Gets the token kind.
            </summary>
        </member>
        <member name="P:ConnectQl.ConnectQlContext.ClassifiedToken.Length">
            <summary>
                Gets the length.
            </summary>
        </member>
        <member name="P:ConnectQl.ConnectQlContext.ClassifiedToken.Scope">
            <summary>
                Gets or sets the scope.
            </summary>
        </member>
        <member name="P:ConnectQl.ConnectQlContext.ClassifiedToken.Start">
            <summary>
                Gets the start.
            </summary>
        </member>
        <member name="P:ConnectQl.ConnectQlContext.ClassifiedToken.Value">
            <summary>
                Gets the value.
            </summary>
        </member>
        <member name="T:ConnectQl.DataSources.ColumnDataSource">
            <summary>
            The column data source.
            </summary>
        </member>
        <member name="M:ConnectQl.DataSources.ColumnDataSource.Create(System.String)">
            <summary>
            Creates a data source that returns the values as columns with the value <c>true</c>.
            </summary>
            <param name="columnName">
            The column name.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IDataSource"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.DataSources.ColumnDataSource.Create(System.String,System.Object)">
            <summary>
            Creates a data source that returns the values as columns with the value <c>true</c>.
            </summary>
            <param name="columnName">
            The column name.
            </param>
            <param name="columnValue">
            The column value.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IDataSource"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.DataSources.ColumnDataSource.ColumnDataSourceImplementation">
            <summary>
            The column data source implementation.
            </summary>
        </member>
        <member name="F:ConnectQl.DataSources.ColumnDataSource.ColumnDataSourceImplementation.columnName">
            <summary>
            The value.
            </summary>
        </member>
        <member name="F:ConnectQl.DataSources.ColumnDataSource.ColumnDataSourceImplementation.columnValue">
            <summary>
            The column value.
            </summary>
        </member>
        <member name="F:ConnectQl.DataSources.ColumnDataSource.ColumnDataSourceImplementation.columnValueSet">
            <summary>
            Indicates whether the column value was set.
            </summary>
        </member>
        <member name="M:ConnectQl.DataSources.ColumnDataSource.ColumnDataSourceImplementation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.DataSources.ColumnDataSource.ColumnDataSourceImplementation"/> class.
            </summary>
            <param name="columnName">
            The column name.
            </param>
        </member>
        <member name="M:ConnectQl.DataSources.ColumnDataSource.ColumnDataSourceImplementation.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.DataSources.ColumnDataSource.ColumnDataSourceImplementation"/> class.
            </summary>
            <param name="columnName">
            The column name.
            </param>
            <param name="columnValue">
            The column value or <c>null</c> to insert <c>true</c> or <c>false</c>.
            </param>
        </member>
        <member name="M:ConnectQl.DataSources.ColumnDataSource.ColumnDataSourceImplementation.GetDataSourceDescriptorAsync(System.String,ConnectQl.Interfaces.IExecutionContext)">
            <summary>
            Gets the descriptor for this data source.
            </summary>
            <param name="sourceAlias">
            The source alias.
            </param>
            <param name="context">
            The execution context.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.DataSources.ColumnDataSource.ColumnDataSourceImplementation.GetRows(ConnectQl.Interfaces.IExecutionContext,ConnectQl.Interfaces.IRowBuilder,ConnectQl.Interfaces.IQuery)">
            <summary>
            Retrieves the data from the source as an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="rowBuilder">
            The row builder.
            </param>
            <param name="query">
            The query expression. Can be <c>null</c>.
            </param>
            <returns>
            A task returning the data set.
            </returns>
        </member>
        <member name="T:ConnectQl.DataSources.EnumerableDataSource">
            <summary>
            Data source from an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:ConnectQl.DataSources.EnumerableDataSource.Create``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates the enumerable data source from the enumerable.
            </summary>
            <typeparam name="T">
            The type of the elements.
            </typeparam>
            <param name="enumerable">
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create the data source from.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IDataSource"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.DataSources.EnumerableDataSource.Create``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}})">
            <summary>
            Creates the enumerable data source from the enumerable.
            </summary>
            <typeparam name="T">
            The type of the elements.
            </typeparam>
            <param name="enumerable">
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create the data source from.
            </param>
            <param name="rowGenerator">
            The row generator.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IDataSource"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.DataSources.EnumerableDataSource.Item``1(``0)">
            <summary>
            Creates an enumerable of key/value pairs containing the item.
            </summary>
            <typeparam name="T">
            The type of the items.
            </typeparam>
            <param name="value">
            The value of the item.
            </param>
            <returns>
            A <see cref="T:System.Collections.Generic.KeyValuePair`2"/> containing 'Item' as the Key, and the <paramref name="value"/> as
                the Value.
            </returns>
        </member>
        <member name="T:ConnectQl.DataSources.EnumerableDataSource.EnumerableDataSourceImplementation`1">
            <summary>
            Implementation of the <see cref="T:ConnectQl.DataSources.EnumerableDataSource"/>.
            </summary>
            <typeparam name="T">
            The type of the items.
            </typeparam>
        </member>
        <member name="F:ConnectQl.DataSources.EnumerableDataSource.EnumerableDataSourceImplementation`1.enumerable">
            <summary>
            The enumerable.
            </summary>
        </member>
        <member name="F:ConnectQl.DataSources.EnumerableDataSource.EnumerableDataSourceImplementation`1.rowGenerator">
            <summary>
            The row generator.
            </summary>
        </member>
        <member name="M:ConnectQl.DataSources.EnumerableDataSource.EnumerableDataSourceImplementation`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Func{`0,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.DataSources.EnumerableDataSource.EnumerableDataSourceImplementation`1"/> class.
            </summary>
            <param name="enumerable">
            The enumerable.
            </param>
            <param name="rowGenerator">
            The row Generator.
            </param>
        </member>
        <member name="M:ConnectQl.DataSources.EnumerableDataSource.EnumerableDataSourceImplementation`1.GetDataSourceDescriptorAsync(System.String,ConnectQl.Interfaces.IExecutionContext)">
            <summary>
            Gets the descriptor for this data source.
            </summary>
            <param name="sourceAlias">
            The source alias.
            </param>
            <param name="context">
            The execution context.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.DataSources.EnumerableDataSource.EnumerableDataSourceImplementation`1.GetRows(ConnectQl.Interfaces.IExecutionContext,ConnectQl.Interfaces.IRowBuilder,ConnectQl.Interfaces.IQuery)">
            <summary>
            Retrieves the data from the source as an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="rowBuilder">
            The row builder.
            </param>
            <param name="query">
            The query expression. Can be <c>null</c>.
            </param>
            <returns>
            A task returning the data set.
            </returns>
        </member>
        <member name="T:ConnectQl.DataSources.FileDataSource">
            <summary>
            The file data source.
            </summary>
        </member>
        <member name="F:ConnectQl.DataSources.FileDataSource.encoding">
            <summary>
            Gets the encoding.
            </summary>
        </member>
        <member name="M:ConnectQl.DataSources.FileDataSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.DataSources.FileDataSource"/> class.
            </summary>
            <param name="uri">
            The uri.
            </param>
        </member>
        <member name="M:ConnectQl.DataSources.FileDataSource.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.DataSources.FileDataSource"/> class.
            </summary>
            <param name="uri">
            The uri.
            </param>
            <param name="encoding">
            The encoding to use. Defaults to UTF8.
            </param>
        </member>
        <member name="P:ConnectQl.DataSources.FileDataSource.Uri">
            <summary>
            Gets the name of the file.
            </summary>
        </member>
        <member name="M:ConnectQl.DataSources.FileDataSource.ConnectQl#Interfaces#IDescriptableDataSource#GetDataSourceDescriptorAsync(System.String,ConnectQl.Interfaces.IExecutionContext)">
            <summary>
            Gets the descriptor for this data source.
            </summary>
            <param name="sourceAlias">
            The source alias.
            </param>
            <param name="context">
            The execution context.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.DataSources.FileDataSource.ConnectQl#Interfaces#IDataSource#GetRows(ConnectQl.Interfaces.IExecutionContext,ConnectQl.Interfaces.IRowBuilder,ConnectQl.Interfaces.IQuery)">
            <summary>
            Gets the data from the file source.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="rowBuilder">
            The row builder.
            </param>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.DataSources.FileDataSource.ConnectQl#Interfaces#IDataTarget#WriteRowsAsync(ConnectQl.Interfaces.IExecutionContext,ConnectQl.AsyncEnumerables.IAsyncEnumerable{ConnectQl.Results.Row},System.Boolean)">
            <summary>
            Writes the rowsToWrite to the specified target.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="rowsToWrite">
            The rowsToWrite.
            </param>
            <param name="upsert">
            True to also update records, false to insert.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.DataSources.FileDataSource.OpenStreamAsync(ConnectQl.Interfaces.IExecutionContext,ConnectQl.UriResolveMode,System.String)">
            <summary>
            Opens the stream.
            </summary>
            <param name="context">
            The execution context.
            </param>
            <param name="uriResolveMode">
            The file Mode.
            </param>
            <param name="fileUri">
            The uri.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.DataSources.FileDataSource.CurrentAndRest(ConnectQl.AsyncEnumerables.IAsyncEnumerator{ConnectQl.Results.Row})">
            <summary>
            The current and rest.
            </summary>
            <param name="enumerator">
            The enumerator.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.DataSources.FileDataSource.GetFileReader(ConnectQl.Interfaces.IExecutionContext)">
            <summary>
            Gets the file reader.
            </summary>
            <param name="context">
            The context.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IFileReader"/> or <c>null</c> if none was found.
            </returns>
        </member>
        <member name="M:ConnectQl.DataSources.FileDataSource.GetStreamReaderAsync(ConnectQl.Interfaces.IExecutionContext,ConnectQl.Interfaces.IFileReader)">
            <summary>
            Gets the stream reader.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="fileReader">
            The file reader.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.DataSources.FileDataSource.FileFormatExecutionContext">
            <summary>
            The file format execution context.
            </summary>
        </member>
        <member name="F:ConnectQl.DataSources.FileDataSource.FileFormatExecutionContext.access">
            <summary>
            The data access.
            </summary>
        </member>
        <member name="F:ConnectQl.DataSources.FileDataSource.FileFormatExecutionContext.context">
            <summary>
            The context.
            </summary>
        </member>
        <member name="M:ConnectQl.DataSources.FileDataSource.FileFormatExecutionContext.#ctor(ConnectQl.Interfaces.IExecutionContext,ConnectQl.Interfaces.IDataAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.DataSources.FileDataSource.FileFormatExecutionContext"/> class.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="access">
            The access.
            </param>
        </member>
        <member name="P:ConnectQl.DataSources.FileDataSource.FileFormatExecutionContext.Log">
            <summary>
                Gets the logger.
            </summary>
        </member>
        <member name="P:ConnectQl.DataSources.FileDataSource.FileFormatExecutionContext.MaxRowsToScan">
            <summary>
            Gets the maximum rows to scan when determining the columns in a source.
            </summary>
        </member>
        <member name="M:ConnectQl.DataSources.FileDataSource.FileFormatExecutionContext.GetDefault(System.String,System.Boolean)">
            <summary>
            Gets the default setting for a data source. A 'USE DEFAULT' statement can be used to set a default value for a
                function.
            </summary>
            <param name="setting">
            The default setting get the value for.
            </param>
            <param name="throwOnError">
            <c>true</c> to throw an exception when an error occurs, false otherwise.
            </param>
            <returns>
            The value for the function for the specified source.
            </returns>
        </member>
        <member name="T:ConnectQl.DataSources.TempDataSource">
            <summary>
            The temp data source.
            </summary>
        </member>
        <member name="F:ConnectQl.DataSources.TempDataSource.rows">
            <summary>
            The rows.
            </summary>
        </member>
        <member name="M:ConnectQl.DataSources.TempDataSource.GetDataSourceDescriptorAsync(System.String,ConnectQl.Interfaces.IExecutionContext)">
            <summary>
            Gets the descriptor for this data source.
            </summary>
            <param name="sourceAlias">
            The source alias.
            </param>
            <param name="context">
            The execution context.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.DataSources.TempDataSource.GetRows(ConnectQl.Interfaces.IExecutionContext,ConnectQl.Interfaces.IRowBuilder,ConnectQl.Interfaces.IQuery)">
            <summary>
            Retrieves the data from the source as an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="rowBuilder">
            The row builder.
            </param>
            <param name="query">
            The query expression. Can be <c>null</c>.
            </param>
            <returns>
            A task returning the data set.
            </returns>
        </member>
        <member name="M:ConnectQl.DataSources.TempDataSource.WriteRowsAsync(ConnectQl.Interfaces.IExecutionContext,ConnectQl.AsyncEnumerables.IAsyncEnumerable{ConnectQl.Results.Row},System.Boolean)">
            <summary>
            Writes the rowsToWrite to the specified target.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="rowsToWrite">
            The rowsToWrite.
            </param>
            <param name="upsert">
            True to also update records, false to insert.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.DataSources.TimeDataSource">
            <summary>
            The time query source.
            </summary>
        </member>
        <member name="F:ConnectQl.DataSources.TimeDataSource.future">
            <summary>
            The future.
            </summary>
        </member>
        <member name="F:ConnectQl.DataSources.TimeDataSource.interval">
            <summary>
            The interval.
            </summary>
        </member>
        <member name="F:ConnectQl.DataSources.TimeDataSource.offset">
            <summary>
            The offset.
            </summary>
        </member>
        <member name="F:ConnectQl.DataSources.TimeDataSource.past">
            <summary>
            The amount of time in the past.
            </summary>
        </member>
        <member name="M:ConnectQl.DataSources.TimeDataSource.#ctor(ConnectQl.DataSources.TimeDataSource.TimeOffset,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.DataSources.TimeDataSource"/> class.
            </summary>
            <param name="offset">
            The offset.
            </param>
            <param name="past">
            The amount of time in the past.
            </param>
            <param name="future">
            The future.
            </param>
            <param name="interval">
            The interval.
            </param>
        </member>
        <member name="T:ConnectQl.DataSources.TimeDataSource.TimeOffset">
            <summary>
            The time offset.
            </summary>
        </member>
        <member name="F:ConnectQl.DataSources.TimeDataSource.TimeOffset.Midnight">
            <summary>
            The today.
            </summary>
        </member>
        <member name="F:ConnectQl.DataSources.TimeDataSource.TimeOffset.Now">
            <summary>
            The now.
            </summary>
        </member>
        <member name="F:ConnectQl.DataSources.TimeDataSource.TimeOffset.UtcMidnight">
            <summary>
            The UTC midnight.
            </summary>
        </member>
        <member name="F:ConnectQl.DataSources.TimeDataSource.TimeOffset.UtcNow">
            <summary>
            The UTC now.
            </summary>
        </member>
        <member name="M:ConnectQl.DataSources.TimeDataSource.GetColumnsAsync(ConnectQl.Interfaces.IExecutionContext)">
            <summary>
            Gets the columns for this data source.
            </summary>
            <param name="context">
            The execution context.
            </param>
            <returns>
            The columns in this data source.
            </returns>
        </member>
        <member name="M:ConnectQl.DataSources.TimeDataSource.GetDataSourceDescriptorAsync(System.String,ConnectQl.Interfaces.IExecutionContext)">
            <summary>
            Gets the descriptor for this data source.
            </summary>
            <param name="sourceAlias">
            The source alias.
            </param>
            <param name="context">
            The execution context.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.DataSources.TimeDataSource.GetRows(ConnectQl.Interfaces.IExecutionContext,ConnectQl.Interfaces.IRowBuilder,ConnectQl.Interfaces.IQuery)">
            <summary>
            Retrieves the data from the source as an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="rowBuilder">
            The row builder.
            </param>
            <param name="query">
            The query expression. Can be <c>null</c>.
            </param>
            <returns>
            A task returning the data set.
            </returns>
        </member>
        <member name="T:ConnectQl.UriResolveMode">
            <summary>
            The file mode.
            </summary>
        </member>
        <member name="F:ConnectQl.UriResolveMode.Read">
            <summary>
            The read.
            </summary>
        </member>
        <member name="F:ConnectQl.UriResolveMode.Write">
            <summary>
            The write.
            </summary>
        </member>
        <member name="T:ConnectQl.Expressions.CompareExpression">
            <summary>
            The compare expression.
            </summary>
        </member>
        <member name="F:ConnectQl.Expressions.CompareExpression.ChangeTypeMethod">
            <summary>
            The <see cref="M:System.Convert.ChangeType(System.Object,System.Type)"/> method.
            </summary>
        </member>
        <member name="F:ConnectQl.Expressions.CompareExpression.CompareMethod">
            <summary>
            The <see cref="M:System.String.Compare(System.String,System.String)"/> method.
            </summary>
        </member>
        <member name="F:ConnectQl.Expressions.CompareExpression.CompareValuesMethod">
            <summary>
            The <see cref="M:ConnectQl.Expressions.CompareExpression.CompareValues(System.Linq.Expressions.ExpressionType,System.Object,System.Object)"/> method.
            </summary>
        </member>
        <member name="F:ConnectQl.Expressions.CompareExpression.Ops">
            <summary>
            The ops.
            </summary>
        </member>
        <member name="M:ConnectQl.Expressions.CompareExpression.#ctor(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Expressions.CompareExpression"/> class.
            </summary>
            <param name="compareType">
            The compare type.
            </param>
            <param name="left">
            The left.
            </param>
            <param name="right">
            The right.
            </param>
        </member>
        <member name="P:ConnectQl.Expressions.CompareExpression.CanReduce">
            <summary>
            Gets a value indicating whether the current node can be reduced.
            </summary>
        </member>
        <member name="P:ConnectQl.Expressions.CompareExpression.Comparer">
            <summary>
            Gets the comparer.
            </summary>
        </member>
        <member name="P:ConnectQl.Expressions.CompareExpression.CompareType">
            <summary>
            Gets the compare type.
            </summary>
        </member>
        <member name="P:ConnectQl.Expressions.CompareExpression.Left">
            <summary>
            Gets the left.
            </summary>
        </member>
        <member name="P:ConnectQl.Expressions.CompareExpression.Right">
            <summary>
            Gets the right.
            </summary>
        </member>
        <member name="M:ConnectQl.Expressions.CompareExpression.CreateComparer">
            <summary>
            Creates a comparison expression for the specified expressions.
            </summary>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.CompareExpression.Reduce">
            <summary>
            Reduces the expression.
            </summary>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.CompareExpression.ToString">
            <summary>
            The to string.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.CompareExpression.CompareValues(System.Linq.Expressions.ExpressionType,System.Object,System.Object)">
            <summary>
            Compares two values.
            </summary>
            <param name="type">
            The way to compare the two values.
            </param>
            <param name="first">
            The first value.
            </param>
            <param name="second">
            The second value.
            </param>
            <returns>
            True if the comparison is true, false otherwise.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.CompareExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <summary>
            The visit children.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Expressions.CustomExpression">
            <summary>
            The custom expression.
            </summary>
        </member>
        <member name="M:ConnectQl.Expressions.CustomExpression.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Expressions.CustomExpression"/> class.
            </summary>
            <param name="type">
            The type.
            </param>
        </member>
        <member name="P:ConnectQl.Expressions.CustomExpression.NodeType">
            <summary>
            Gets the node type of this <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>
            One of the <see cref="T:System.Linq.Expressions.ExpressionType"/> values.
            </returns>
        </member>
        <member name="P:ConnectQl.Expressions.CustomExpression.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="M:ConnectQl.Expressions.CustomExpression.ExecutionContext">
            <summary>
            The execution context.
            </summary>
            <returns>
            The <see cref="T:ConnectQl.Expressions.ExecutionContextExpression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.CustomExpression.MakeCompare(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Creates a compare expression.
            </summary>
            <param name="compareType">
            The compare type.
            </param>
            <param name="left">
            The left expression.
            </param>
            <param name="right">
            The right expression.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Expressions.CompareExpression"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when an invalid <see cref="T:System.Linq.Expressions.ExpressionType"/> is passed in.
            </exception>
        </member>
        <member name="M:ConnectQl.Expressions.CustomExpression.MakeField(System.String,System.String)">
            <summary>
            Creates a <see cref="T:ConnectQl.Expressions.FieldExpression"/>.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="name">
            The name.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Expressions.FieldExpression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.CustomExpression.MakeField(System.String,System.String,System.Type)">
            <summary>
            Creates a <see cref="T:ConnectQl.Expressions.FieldExpression"/>.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="type">
            The type.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Expressions.FieldExpression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.CustomExpression.MakeRange(System.Object,System.Object,System.Type)">
            <summary>
            Creates a RangeExpression, given the minimum and maximum, by calling an appropriate factory method.
            </summary>
            <param name="min">
            The minimum value in the range.
            </param>
            <param name="max">
            The maximum value in the range.
            </param>
            <param name="type">
            The type of the expression.
            </param>
            <returns>
            The RangeExpression that results from calling the appropriate factory method.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.CustomExpression.MakeRange(System.Object,System.Object)">
            <summary>
            Creates a RangeExpression, given the minimum and maximum, by calling an appropriate factory method.
            </summary>
            <param name="min">
            The minimum value in the range.
            </param>
            <param name="max">
            The maximum value in the range.
            </param>
            <returns>
            The RangeExpression that results from calling the appropriate factory method.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.CustomExpression.MakeSourceField(System.String,System.String)">
            <summary>
            Creates a <see cref="T:ConnectQl.Internal.Expressions.SourceFieldExpression"/>, given the source name and field name, by calling an appropriate
                factory method.
            </summary>
            <param name="sourceName">
            The name that represents the source.
            </param>
            <param name="fieldName">
            The name that represents the field.
            </param>
            <returns>
            The FieldExpression that results from calling the appropriate factory method.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.CustomExpression.MakeSourceField(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="T:ConnectQl.Internal.Expressions.SourceFieldExpression"/>, given the source name and field name, and a value indicating
                whether this is an internal name.
            </summary>
            <param name="sourceName">
            The name that represents the source.
            </param>
            <param name="fieldName">
            The name that represents the field.
            </param>
            <param name="useInternalName">
            <c>true</c> to use the internal name, <c>false</c> otherwise.
            </param>
            <returns>
            The FieldExpression that results from calling the appropriate factory method.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.CustomExpression.MakeSourceField(System.String,System.String,System.Boolean,System.Type)">
            <summary>
            Creates a <see cref="T:ConnectQl.Internal.Expressions.SourceFieldExpression"/>, given the source name and field name, type, and a value indicating
                whether this is an internal name.
            </summary>
            <param name="sourceName">
            The name that represents the source.
            </param>
            <param name="fieldName">
            The name that represents the field.
            </param>
            <param name="useInternalName">
            <c>true</c> to use the internal name, <c>false</c> otherwise.
            </param>
            <param name="type">
            The type of the parameter.
            </param>
            <returns>
            The FieldExpression that results from calling the appropriate factory method.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.CustomExpression.MakeSourceField(System.String,System.String,System.Type)">
            <summary>
            Creates a <see cref="T:ConnectQl.Internal.Expressions.SourceFieldExpression"/>, given the source name and field name and the type.
            </summary>
            <param name="sourceName">
            The name that represents the source.
            </param>
            <param name="fieldName">
            The name that represents the field.
            </param>
            <param name="type">
            The type of the parameter.
            </param>
            <returns>
            The FieldExpression that results from calling the appropriate factory method.
            </returns>
        </member>
        <member name="T:ConnectQl.Expressions.ExecutionContextExpression">
            <summary>
            The execution context expression.
            </summary>
        </member>
        <member name="M:ConnectQl.Expressions.ExecutionContextExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Expressions.ExecutionContextExpression"/> class.
            </summary>
        </member>
        <member name="M:ConnectQl.Expressions.ExecutionContextExpression.ToString">
            <summary>
            The to string.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.ExecutionContextExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <summary>
            The visit children.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Expressions.FieldExpression">
            <summary>
            The field expression.
            </summary>
        </member>
        <member name="F:ConnectQl.Expressions.FieldExpression.RowGetMethod">
            <summary>
            The <see cref="M:ConnectQl.Results.Row.Get``1(System.String)"/> method.
            </summary>
        </member>
        <member name="F:ConnectQl.Expressions.FieldExpression.source">
            <summary>
            The source.
            </summary>
        </member>
        <member name="M:ConnectQl.Expressions.FieldExpression.#ctor(System.String,System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Expressions.FieldExpression"/> class.
            </summary>
            <param name="source">
            The source this field belongs to.
            </param>
            <param name="fieldName">
            The field name.
            </param>
            <param name="type">
            The type.
            </param>
        </member>
        <member name="P:ConnectQl.Expressions.FieldExpression.FieldName">
            <summary>
            Gets the field name.
            </summary>
        </member>
        <member name="M:ConnectQl.Expressions.FieldExpression.CreateGetter(System.Linq.Expressions.ParameterExpression,System.Type)">
            <summary>
            Creates a method call that gets the value from the specified parameter.
            </summary>
            <param name="row">
            The parameter to get the field from.
            </param>
            <param name="type">
            The type to return (when omitted, the node's type will be returned).
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.FieldExpression.ToString">
            <summary>
            Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
            <returns>
            A textual representation of the <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.FieldExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <summary>
            Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception
                if the node is not reducible.
            </summary>
            <returns>
            The expression being visited, or an expression which should replace it in the tree.
            </returns>
            <param name="visitor">
            An instance of <see cref="T:System.Func`2"/>.
            </param>
        </member>
        <member name="T:ConnectQl.Expressions.TaskExpression">
            <summary>
            The task expression.
            </summary>
        </member>
        <member name="M:ConnectQl.Expressions.TaskExpression.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Expressions.TaskExpression"/> class.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown when the expression is not a <see cref="T:System.Threading.Tasks.Task`1"/>.
            </exception>
        </member>
        <member name="P:ConnectQl.Expressions.TaskExpression.CanReduce">
            <summary>
            Gets a value indicating whether this expression can be reduced.
            </summary>
        </member>
        <member name="P:ConnectQl.Expressions.TaskExpression.Expression">
            <summary>
            Gets the expression.
            </summary>
        </member>
        <member name="M:ConnectQl.Expressions.TaskExpression.Task(System.Linq.Expressions.Expression)">
            <summary>
            The task.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Expressions.TaskExpression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.TaskExpression.Reduce">
            <summary>
            The reduce.
            </summary>
            <returns>
            The <see cref="P:ConnectQl.Expressions.TaskExpression.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.TaskExpression.ToString">
            <summary>
            The to string.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.TaskExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <summary>
            The visit children.
            </summary>
            <param name="visitor">
            The visitor.
            </param>
            <returns>
            The <see cref="P:ConnectQl.Expressions.TaskExpression.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.TaskExpression.ConvertType(System.Type)">
            <summary>
            Converts a <see cref="T:System.Threading.Tasks.Task`1"/> into a T.
            </summary>
            <param name="taskType">
            The task type.
            </param>
            <returns>
            The <see cref="T:System.Type"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown when the type is not a <see cref="T:System.Threading.Tasks.Task`1"/>.
            </exception>
        </member>
        <member name="T:ConnectQl.Expressions.Visitors.GenericVisitor">
            <summary>
            The generic visitor.
            </summary>
        </member>
        <member name="F:ConnectQl.Expressions.Visitors.GenericVisitor.implementations">
            <summary>
            The implementations.
            </summary>
        </member>
        <member name="F:ConnectQl.Expressions.Visitors.GenericVisitor.visitedNodes">
            <summary>
            Stores the visited nodes.
            </summary>
        </member>
        <member name="F:ConnectQl.Expressions.Visitors.GenericVisitor.defaultImplementation">
            <summary>
            The default implementation.
            </summary>
        </member>
        <member name="F:ConnectQl.Expressions.Visitors.GenericVisitor.visitCatchBlock">
            <summary>
            The visit catch block.
            </summary>
        </member>
        <member name="F:ConnectQl.Expressions.Visitors.GenericVisitor.visitElementInit">
            <summary>
            The function for visiting the <see cref="T:System.Linq.Expressions.ElementInit"/> expression.
            </summary>
        </member>
        <member name="F:ConnectQl.Expressions.Visitors.GenericVisitor.visitLabelTarget">
            <summary>
            The visit label target.
            </summary>
        </member>
        <member name="F:ConnectQl.Expressions.Visitors.GenericVisitor.visitMemberAssignment">
            <summary>
            The visit member assignment.
            </summary>
        </member>
        <member name="F:ConnectQl.Expressions.Visitors.GenericVisitor.visitMemberBinding">
            <summary>
            The visit member binding.
            </summary>
        </member>
        <member name="F:ConnectQl.Expressions.Visitors.GenericVisitor.visitMemberListBinding">
            <summary>
            The visit member list binding.
            </summary>
        </member>
        <member name="F:ConnectQl.Expressions.Visitors.GenericVisitor.visitMemberMemberBinding">
            <summary>
            The visit member member binding.
            </summary>
        </member>
        <member name="F:ConnectQl.Expressions.Visitors.GenericVisitor.visitSwitchCase">
            <summary>
            The visit switch case.
            </summary>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.Create``1(System.Func{``0,System.Linq.Expressions.Expression})">
            <summary>
            Creates a <see cref="T:ConnectQl.Expressions.Visitors.GenericVisitor"/> with the specified action.
            </summary>
            <param name="action">
            The action to add to the visitor.
            </param>
            <typeparam name="T">
            The type of the function parameter.
            </typeparam>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.Create``2(System.Func{``0,System.Linq.Expressions.Expression},System.Func{``1,System.Linq.Expressions.Expression})">
            <summary>
            Creates a <see cref="T:ConnectQl.Expressions.Visitors.GenericVisitor"/> with the specified action.
            </summary>
            <param name="firstAction">
            The first action to add to the visitor.
            </param>
            <param name="secondAction">
            The second action to add to the visitor.
            </param>
            <typeparam name="T1">
            The type of the first function parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second function parameter.
            </typeparam>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.Create``3(System.Func{``0,System.Linq.Expressions.Expression},System.Func{``1,System.Linq.Expressions.Expression},System.Func{``2,System.Linq.Expressions.Expression})">
            <summary>
            Creates a <see cref="T:ConnectQl.Expressions.Visitors.GenericVisitor"/> with the specified action.
            </summary>
            <param name="firstAction">
            The first action to add to the visitor.
            </param>
            <param name="secondAction">
            The second action to add to the visitor.
            </param>
            <param name="thirdAction">
            The third action to add to the visitor.
            </param>
            <typeparam name="T1">
            The type of the first function parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second function parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third function parameter.
            </typeparam>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.Create``1(System.Action{``0})">
            <summary>
            Creates a <see cref="T:ConnectQl.Expressions.Visitors.GenericVisitor"/> with the specified action.
            </summary>
            <param name="action">
            The action to add to the visitor.
            </param>
            <typeparam name="T">
            The type of the function parameter.
            </typeparam>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.Create``2(System.Action{``0},System.Action{``1})">
            <summary>
            Creates a <see cref="T:ConnectQl.Expressions.Visitors.GenericVisitor"/> with the specified action.
            </summary>
            <param name="firstAction">
            The first action to add to the visitor.
            </param>
            <param name="secondAction">
            The second action to add to the visitor.
            </param>
            <typeparam name="T1">
            The type of the first function parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second function parameter.
            </typeparam>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.Create``3(System.Action{``0},System.Action{``1},System.Action{``2})">
            <summary>
            Creates a <see cref="T:ConnectQl.Expressions.Visitors.GenericVisitor"/> with the specified action.
            </summary>
            <param name="firstAction">
            The first action to add to the visitor.
            </param>
            <param name="secondAction">
            The second action to add to the visitor.
            </param>
            <param name="thirdAction">
            The third action to add to the visitor.
            </param>
            <typeparam name="T1">
            The type of the first function parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second function parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third function parameter.
            </typeparam>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.Visit``1(System.Func{``0,System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
            <summary>
            Creates a <see cref="T:ConnectQl.Expressions.Visitors.GenericVisitor"/>, visits the <paramref name="expression"/> and returns the result.
            </summary>
            <param name="action">
            The action to add to the visitor.
            </param>
            <param name="expression">
            The expression.
            </param>
            <typeparam name="T">
            The type of the function parameter.
            </typeparam>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.Visit``2(System.Func{``0,System.Linq.Expressions.Expression},System.Func{``1,System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
            <summary>
            Creates a <see cref="T:ConnectQl.Expressions.Visitors.GenericVisitor"/>, visits the <paramref name="expression"/> and returns the result.
            </summary>
            <param name="firstAction">
            The first action to add to the visitor.
            </param>
            <param name="secondAction">
            The second action to add to the visitor.
            </param>
            <param name="expression">
            The expression.
            </param>
            <typeparam name="T1">
            The type of the first function parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second function parameter.
            </typeparam>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.Visit``3(System.Func{``0,System.Linq.Expressions.Expression},System.Func{``1,System.Linq.Expressions.Expression},System.Func{``2,System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
            <summary>
            Creates a <see cref="T:ConnectQl.Expressions.Visitors.GenericVisitor"/>, visits the <paramref name="expression"/> and returns the result.
            </summary>
            <param name="firstAction">
            The first action to add to the visitor.
            </param>
            <param name="secondAction">
            The second action to add to the visitor.
            </param>
            <param name="thirdAction">
            The third action to add to the visitor.
            </param>
            <param name="expression">
            The expression.
            </param>
            <typeparam name="T1">
            The type of the first function parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second function parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third function parameter.
            </typeparam>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.Visit``1(System.Action{``0},System.Linq.Expressions.Expression)">
            <summary>
            Creates a <see cref="T:ConnectQl.Expressions.Visitors.GenericVisitor"/>, visits the <paramref name="expression"/> and returns the result.
            </summary>
            <param name="action">
            The action to add to the visitor.
            </param>
            <param name="expression">
            The expression.
            </param>
            <typeparam name="T">
            The type of the function parameter.
            </typeparam>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.Visit``2(System.Action{``0},System.Action{``1},System.Linq.Expressions.Expression)">
            <summary>
            Creates a <see cref="T:ConnectQl.Expressions.Visitors.GenericVisitor"/>, visits the <paramref name="expression"/> and returns the result.
            </summary>
            <param name="firstAction">
            The first action to add to the visitor.
            </param>
            <param name="secondAction">
            The second action to add to the visitor.
            </param>
            <param name="expression">
            The expression.
            </param>
            <typeparam name="T1">
            The type of the first function parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second function parameter.
            </typeparam>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.Visit``3(System.Action{``0},System.Action{``1},System.Action{``2},System.Linq.Expressions.Expression)">
            <summary>
            Creates a <see cref="T:ConnectQl.Expressions.Visitors.GenericVisitor"/>, visits the <paramref name="expression"/> and returns the result.
            </summary>
            <param name="firstAction">
            The first action to add to the visitor.
            </param>
            <param name="secondAction">
            The second action to add to the visitor.
            </param>
            <param name="thirdAction">
            The third action to add to the visitor.
            </param>
            <param name="expression">
            The expression.
            </param>
            <typeparam name="T1">
            The type of the first function parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second function parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third function parameter.
            </typeparam>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.Add(System.Func{System.Linq.Expressions.CatchBlock,System.Linq.Expressions.CatchBlock})">
            <summary>
            The add.
            </summary>
            <param name="catchBlock">
            The catch block.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Expressions.Visitors.GenericVisitor"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.Add(System.Func{System.Linq.Expressions.ElementInit,System.Linq.Expressions.ElementInit})">
            <summary>
            Adds an <see cref="T:System.Linq.Expressions.ElementInit"/> handler to the visitor.
            </summary>
            <param name="elementInit">
            The <see cref="T:System.Linq.Expressions.ElementInit"/> expression.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Expressions.Visitors.GenericVisitor"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.Add(System.Func{System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget})">
            <summary>
            The add.
            </summary>
            <param name="labelTarget">
            The label target.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Expressions.Visitors.GenericVisitor"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.Add(System.Func{System.Linq.Expressions.MemberAssignment,System.Linq.Expressions.MemberAssignment})">
            <summary>
            The add.
            </summary>
            <param name="memberAssignment">
            The member assignment.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Expressions.Visitors.GenericVisitor"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.Add(System.Func{System.Linq.Expressions.MemberBinding,System.Linq.Expressions.MemberBinding})">
            <summary>
            The add.
            </summary>
            <param name="memberBinding">
            The member binding.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Expressions.Visitors.GenericVisitor"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.Add(System.Func{System.Linq.Expressions.MemberListBinding,System.Linq.Expressions.MemberListBinding})">
            <summary>
            The add.
            </summary>
            <param name="memberListBinding">
            The member list binding.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Expressions.Visitors.GenericVisitor"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.Add(System.Func{System.Linq.Expressions.MemberMemberBinding,System.Linq.Expressions.MemberMemberBinding})">
            <summary>
            The add.
            </summary>
            <param name="memberMemberBinding">
            The member member binding.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Expressions.Visitors.GenericVisitor"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.Add(System.Func{System.Linq.Expressions.SwitchCase,System.Linq.Expressions.SwitchCase})">
            <summary>
            The add.
            </summary>
            <param name="switchCase">
            The switch case.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Expressions.Visitors.GenericVisitor"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.Add``1(System.Action{``0})">
            <summary>
            The add.
            </summary>
            <param name="implementation">
            The implementation.
            </param>
            <typeparam name="T">
            The type of the expression this implementation is for.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.Expressions.Visitors.GenericVisitor"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.Add``1(System.Func{``0,System.Linq.Expressions.Expression})">
            <summary>
            The add.
            </summary>
            <param name="implementation">
            The implementation.
            </param>
            <typeparam name="T">
            The type of the expression this implementation is for.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.Expressions.Visitors.GenericVisitor"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.Add``1(System.Action{ConnectQl.Expressions.Visitors.GenericVisitor,``0})">
            <summary>
            The add.
            </summary>
            <param name="implementation">
            The implementation.
            </param>
            <typeparam name="T">
            The type of the expression this implementation is for.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.Expressions.Visitors.GenericVisitor"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.Add``1(System.Func{ConnectQl.Expressions.Visitors.GenericVisitor,``0,System.Linq.Expressions.Expression})">
            <summary>
            The add.
            </summary>
            <param name="implementation">
            The implementation.
            </param>
            <typeparam name="T">
            The type of the expression this implementation is for.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.Expressions.Visitors.GenericVisitor"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.Default(System.Action{System.Linq.Expressions.Expression})">
            <summary>
            Registers a function to call when no other handler is registered.
            </summary>
            <param name="implementation">
            The handler to register.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Expressions.Visitors.GenericVisitor"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.Default(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Registers a function to call when no other handler is registered.
            </summary>
            <param name="implementation">
            The handler to register.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Expressions.Visitors.GenericVisitor"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.Default(System.Func{ConnectQl.Expressions.Visitors.GenericVisitor,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Registers a function to call when no other handler is registered.
            </summary>
            <param name="implementation">
            The handler to register.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Expressions.Visitors.GenericVisitor"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Dispatches the expression to one of the more specialized visit methods in this class.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.System#Collections#Generic#IEnumerable{System#Object}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection. Only here because we need it to use the collection
                initializer.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the
                collection.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.BinaryExpression"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.BlockExpression"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.CatchBlock"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.ConditionalExpression"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits the <see cref="T:System.Linq.Expressions.ConstantExpression"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
            <summary>
            Visits the <see cref="T:System.Linq.Expressions.DebugInfoExpression"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
            <summary>
            Visits the <see cref="T:System.Linq.Expressions.DefaultExpression"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.ElementInit"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitExtension(System.Linq.Expressions.Expression)">
            <summary>
            Visits the children of the extension expression.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.GotoExpression"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.IndexExpression"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.InvocationExpression"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.LabelExpression"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
            <summary>
            Visits the <see cref="T:System.Linq.Expressions.LabelTarget"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.Expression`1"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
            <typeparam name="T">
            The type of the delegate.
            </typeparam>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.ListInitExpression"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.LoopExpression"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.MemberExpression"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.MemberAssignment"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.MemberBinding"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.MemberInitExpression"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.MemberListBinding"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.MemberMemberBinding"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.NewExpression"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.NewArrayExpression"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits the <see cref="T:System.Linq.Expressions.ParameterExpression"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.SwitchExpression"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.SwitchCase"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.TryExpression"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.TypeBinaryExpression"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.UnaryExpression"/>.
            </summary>
            <returns>
            The modified expression, if it or any sub-Expression was modified; otherwise, returns the original
                Expression.
            </returns>
            <param name="node">
            The expression to visit.
            </param>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitImplementation``1(``0)">
            <summary>
            Visits the specified node.
            </summary>
            <param name="node">
            The node.
            </param>
            <typeparam name="T">
            The type of the expression.
            </typeparam>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Expressions.Visitors.GenericVisitor.VisitImplementation(System.Linq.Expressions.Expression)">
            <summary>
            Visits the specified node.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Interfaces.RowBuilderExtensions">
            <summary>
            The row builder extensions.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.RowBuilderExtensions.CreateRow``1(ConnectQl.Interfaces.IRowBuilder,``0,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Creates a row.
            </summary>
            <param name="rowBuilder">
            The row builder.
            </param>
            <param name="uniqueId">
            The unique id of the row.
            </param>
            <param name="fields">
            The fields in the row.
            </param>
            <typeparam name="T">
            The type of the unique id of the row.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.Results.Row"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Interfaces.ClassificationScope">
            <summary>
            The classification scope.
            </summary>
        </member>
        <member name="F:ConnectQl.Interfaces.ClassificationScope.Root">
            <summary>
            The root.
            </summary>
        </member>
        <member name="F:ConnectQl.Interfaces.ClassificationScope.Import">
            <summary>
            Inside an IMPORT PLUGIN statement.
            </summary>
        </member>
        <member name="F:ConnectQl.Interfaces.ClassificationScope.SelectExpression">
            <summary>
            Inside a select expression
            </summary>
        </member>
        <member name="F:ConnectQl.Interfaces.ClassificationScope.Expression">
            <summary>
            Inside an expression.
            </summary>
        </member>
        <member name="F:ConnectQl.Interfaces.ClassificationScope.FunctionName">
            <summary>
            The function name.
            </summary>
        </member>
        <member name="F:ConnectQl.Interfaces.ClassificationScope.Function">
            <summary>
            The function.
            </summary>
        </member>
        <member name="F:ConnectQl.Interfaces.ClassificationScope.Source">
            <summary>
            The source.
            </summary>
        </member>
        <member name="T:ConnectQl.Interfaces.ConnectQlFunctionsExtensions">
            <summary>
            The ConnectQl functions extensions.
            </summary>
        </member>
        <member name="F:ConnectQl.Interfaces.ConnectQlFunctionsExtensions.ApplyEnumerableFunction">
            <summary>
            The <see cref="M:ConnectQl.AsyncEnumerables.AsyncEnumerableExtensions.ApplyEnumerableFunction``2(ConnectQl.AsyncEnumerables.IAsyncEnumerable{``0},System.Func{System.Collections.Generic.IEnumerable{``0},``1})"/>.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.ConnectQlFunctionsExtensions.AddWithoutSideEffects``2(ConnectQl.Interfaces.IConnectQlFunctions,System.String,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Adds a key/value pair of key'1 =&gt; function to the dictionary. The function should not have side effects, because it will be evaluated by IntelliSense.
            </summary>
            <param name="functions">
            The functions to add the function to.
            </param>
            <param name="key">
            The key.
            </param>
            <param name="function">
            The function.
            </param>
            <typeparam name="TArgument">
            The type of the function argument.
            </typeparam>
            <typeparam name="TResult">
            The type of the function result.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Interfaces.ConnectQlFunctionsExtensions.AddWithoutSideEffects``1(ConnectQl.Interfaces.IConnectQlFunctions,System.String,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Adds a key/value pair of key'0 =&gt; function to the dictionary. The function should not have side effects, because it will be evaluated by IntelliSense.
            </summary>
            <param name="functions">
            The functions to add the function to.
            </param>
            <param name="key">
            The key.
            </param>
            <param name="function">
            The function.
            </param>
            <typeparam name="TResult">
            The type of the function result.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Interfaces.ConnectQlFunctionsExtensions.AddWithoutSideEffects``3(ConnectQl.Interfaces.IConnectQlFunctions,System.String,System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Adds a key/value pair of key'2 =&gt; function to the dictionary. The function should not have side effects, because it will be evaluated by IntelliSense.
            </summary>
            <param name="functions">
            The functions to add the function to.
            </param>
            <param name="key">
            The key.
            </param>
            <param name="function">
            The function.
            </param>
            <typeparam name="TArgument1">
            The type of the first argument.
            </typeparam>
            <typeparam name="TArgument2">
            The type of the second argument.
            </typeparam>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Interfaces.ConnectQlFunctionsExtensions.AddWithoutSideEffects``4(ConnectQl.Interfaces.IConnectQlFunctions,System.String,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
            <summary>
            Adds a key/value pair of key'3 =&gt; function to the dictionary. The function should not have side effects, because it will be evaluated by IntelliSense.
            </summary>
            <param name="functions">
            The functions to add the function to.
            </param>
            <param name="key">
            The key.
            </param>
            <param name="function">
            The function.
            </param>
            <typeparam name="TArgument1">
            The type of the first argument.
            </typeparam>
            <typeparam name="TArgument2">
            The type of the second argument.
            </typeparam>
            <typeparam name="TArgument3">
            The type of the third argument.
            </typeparam>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Interfaces.ConnectQlFunctionsExtensions.AddWithoutSideEffects``5(ConnectQl.Interfaces.IConnectQlFunctions,System.String,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
            <summary>
            Adds a key/value pair of key'4 =&gt; function to the dictionary. The function should not have side effects, because it will be evaluated by IntelliSense.
            </summary>
            <param name="functions">
            The functions to add the function to.
            </param>
            <param name="key">
            The key.
            </param>
            <param name="function">
            The function.
            </param>
            <typeparam name="TArgument1">
            The type of the first argument.
            </typeparam>
            <typeparam name="TArgument2">
            The type of the second argument.
            </typeparam>
            <typeparam name="TArgument3">
            The type of the third argument.
            </typeparam>
            <typeparam name="TArgument4">
            The type of the fourth argument.
            </typeparam>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Interfaces.ConnectQlFunctionsExtensions.AddWithoutSideEffects``6(ConnectQl.Interfaces.IConnectQlFunctions,System.String,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
            <summary>
            Adds a key/value pair of key'5 =&gt; function to the dictionary. The function should not have side effects, because it will be evaluated by IntelliSense.
            </summary>
            <param name="functions">
            The functions to add the function to.
            </param>
            <param name="key">
            The key.
            </param>
            <param name="function">
            The function.
            </param>
            <typeparam name="TArgument1">
            The type of the first argument.
            </typeparam>
            <typeparam name="TArgument2">
            The type of the second argument.
            </typeparam>
            <typeparam name="TArgument3">
            The type of the third argument.
            </typeparam>
            <typeparam name="TArgument4">
            The type of the fourth argument.
            </typeparam>
            <typeparam name="TArgument5">
            The type of the fifth argument.
            </typeparam>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Interfaces.ConnectQlFunctionsExtensions.AddWithoutSideEffects``7(ConnectQl.Interfaces.IConnectQlFunctions,System.String,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            Adds a key/value pair of key'6 =&gt; function to the dictionary. The function should not have side effects, because it will be evaluated by IntelliSense.
            </summary>
            <param name="functions">
            The functions to add the function to.
            </param>
            <param name="key">
            The key.
            </param>
            <param name="function">
            The function.
            </param>
            <typeparam name="TArgument1">
            The type of the first argument.
            </typeparam>
            <typeparam name="TArgument2">
            The type of the second argument.
            </typeparam>
            <typeparam name="TArgument3">
            The type of the third argument.
            </typeparam>
            <typeparam name="TArgument4">
            The type of the fourth argument.
            </typeparam>
            <typeparam name="TArgument5">
            The type of the fifth argument.
            </typeparam>
            <typeparam name="TArgument6">
            The type of the sixth argument.
            </typeparam>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Interfaces.ConnectQlFunctionsExtensions.AddWithSideEffects``2(ConnectQl.Interfaces.IConnectQlFunctions,System.String,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Adds a key/value pair of key'1 =&gt; function to the dictionary. The function has side effects and will not be evaluated by intellisense.
            </summary>
            <param name="functions">
            The functions to add the function to.
            </param>
            <param name="key">
            The key.
            </param>
            <param name="function">
            The function.
            </param>
            <typeparam name="TArgument">
            The type of the function argument.
            </typeparam>
            <typeparam name="TResult">
            The type of the function result.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Interfaces.ConnectQlFunctionsExtensions.AddWithSideEffects``1(ConnectQl.Interfaces.IConnectQlFunctions,System.String,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Adds a key/value pair of key'0 =&gt; function to the dictionary.
            </summary>
            <param name="functions">
            The functions to add the function to.
            </param>
            <param name="key">
            The key.
            </param>
            <param name="function">
            The function.
            </param>
            <typeparam name="TResult">
            The type of the function result.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Interfaces.ConnectQlFunctionsExtensions.AddWithSideEffects``3(ConnectQl.Interfaces.IConnectQlFunctions,System.String,System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Adds a key/value pair of key'2 =&gt; function to the dictionary.
            </summary>
            <param name="functions">
            The functions to add the function to.
            </param>
            <param name="key">
            The key.
            </param>
            <param name="function">
            The function.
            </param>
            <typeparam name="TArgument1">
            The type of the first argument.
            </typeparam>
            <typeparam name="TArgument2">
            The type of the second argument.
            </typeparam>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Interfaces.ConnectQlFunctionsExtensions.AddWithSideEffects``4(ConnectQl.Interfaces.IConnectQlFunctions,System.String,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
            <summary>
            Adds a key/value pair of key'3 =&gt; function to the dictionary.
            </summary>
            <param name="functions">
            The functions to add the function to.
            </param>
            <param name="key">
            The key.
            </param>
            <param name="function">
            The function.
            </param>
            <typeparam name="TArgument1">
            The type of the first argument.
            </typeparam>
            <typeparam name="TArgument2">
            The type of the second argument.
            </typeparam>
            <typeparam name="TArgument3">
            The type of the third argument.
            </typeparam>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Interfaces.ConnectQlFunctionsExtensions.AddWithSideEffects``5(ConnectQl.Interfaces.IConnectQlFunctions,System.String,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
            <summary>
            Adds a key/value pair of key'4 =&gt; function to the dictionary.
            </summary>
            <param name="functions">
            The functions to add the function to.
            </param>
            <param name="key">
            The key.
            </param>
            <param name="function">
            The function.
            </param>
            <typeparam name="TArgument1">
            The type of the first argument.
            </typeparam>
            <typeparam name="TArgument2">
            The type of the second argument.
            </typeparam>
            <typeparam name="TArgument3">
            The type of the third argument.
            </typeparam>
            <typeparam name="TArgument4">
            The type of the fourth argument.
            </typeparam>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Interfaces.ConnectQlFunctionsExtensions.AddWithSideEffects``6(ConnectQl.Interfaces.IConnectQlFunctions,System.String,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
            <summary>
            Adds a key/value pair of key'5 =&gt; function to the dictionary.
            </summary>
            <param name="functions">
            The functions to add the function to.
            </param>
            <param name="key">
            The key.
            </param>
            <param name="function">
            The function.
            </param>
            <typeparam name="TArgument1">
            The type of the first argument.
            </typeparam>
            <typeparam name="TArgument2">
            The type of the second argument.
            </typeparam>
            <typeparam name="TArgument3">
            The type of the third argument.
            </typeparam>
            <typeparam name="TArgument4">
            The type of the fourth argument.
            </typeparam>
            <typeparam name="TArgument5">
            The type of the fifth argument.
            </typeparam>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Interfaces.ConnectQlFunctionsExtensions.AddWithSideEffects``7(ConnectQl.Interfaces.IConnectQlFunctions,System.String,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            Adds a key/value pair of key'6 =&gt; function to the dictionary.
            </summary>
            <param name="functions">
            The functions to add the function to.
            </param>
            <param name="key">
            The key.
            </param>
            <param name="function">
            The function.
            </param>
            <typeparam name="TArgument1">
            The type of the first argument.
            </typeparam>
            <typeparam name="TArgument2">
            The type of the second argument.
            </typeparam>
            <typeparam name="TArgument3">
            The type of the third argument.
            </typeparam>
            <typeparam name="TArgument4">
            The type of the fourth argument.
            </typeparam>
            <typeparam name="TArgument5">
            The type of the fifth argument.
            </typeparam>
            <typeparam name="TArgument6">
            The type of the sixth argument.
            </typeparam>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Interfaces.ConnectQlFunctionsExtensions.ReplaceEnumerables(ConnectQl.Interfaces.IConnectQlFunctions,System.String,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Replaces all <see cref="T:System.Collections.Generic.IEnumerable`1"/> with <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </summary>
            <param name="functions">
            The functions.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="lambda">
            The lambda in which to replace the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </param>
            <returns>
            The new lambda.
            </returns>
        </member>
        <member name="T:ConnectQl.Interfaces.ExecutionContext">
            <summary>
            The execution context.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.ExecutionContext.Current">
            <summary>
            Gets the current execution context.
            </summary>
        </member>
        <member name="T:ConnectQl.Interfaces.FileFormatsExtensions">
            <summary>
            The file formats extensions.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.FileFormatsExtensions.Add(ConnectQl.Interfaces.IFileFormats,ConnectQl.Interfaces.IFileFormat)">
            <summary>
            Adds a file access to the file format collections.
            </summary>
            <param name="formats">
            The formats.
            </param>
            <param name="format">
            The access to add.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IFileFormats"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Interfaces.FileFormatsExtensions.Add(ConnectQl.Interfaces.IFileFormats,ConnectQl.Interfaces.IFileReader)">
            <summary>
            Adds a file reader to the file format collections.
            </summary>
            <param name="formats">
            The formats.
            </param>
            <param name="reader">
            The reader to add.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IFileFormats"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Interfaces.FileFormatsExtensions.Add(ConnectQl.Interfaces.IFileFormats,ConnectQl.Interfaces.IFileWriter)">
            <summary>
            Adds a file writer to the file format collections.
            </summary>
            <param name="formats">
            The formats.
            </param>
            <param name="writer">
            The writer to add.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IFileFormats"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Interfaces.IArgumentDescriptor">
            <summary>
            The ArgumentDescriptor interface.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IArgumentDescriptor.Name">
            <summary>
            Gets the argument name.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IArgumentDescriptor.Description">
            <summary>
            Gets the description.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IArgumentDescriptor.Type">
            <summary>
            Gets the argument type.
            </summary>
        </member>
        <member name="T:ConnectQl.Interfaces.IClassifiedToken">
            <summary>
            The ClassifiedToken interface.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IClassifiedToken.Start">
            <summary>
            Gets the start.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IClassifiedToken.Length">
            <summary>
            Gets the length.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IClassifiedToken.End">
            <summary>
            Gets the end.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IClassifiedToken.Classification">
            <summary>
            Gets the classification.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IClassifiedToken.Scope">
            <summary>
            Gets the scope.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IClassifiedToken.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:ConnectQl.Interfaces.IColumnDescriptor">
            <summary>
            The ColumnDescriptor interface.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IColumnDescriptor.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IColumnDescriptor.Description">
            <summary>
            Gets the description.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IColumnDescriptor.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="T:ConnectQl.Interfaces.IConnectQlFunctions">
            <summary>
            The ConnectQl functions interface.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IConnectQlFunctions.Log">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.IConnectQlFunctions.AddFunction(System.String,ConnectQl.Interfaces.IFunctionDescriptor)">
            <summary>
            Adds a key/value pair of key'1 =&gt; function to the dictionary.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="function">
            The function.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown when a lambda with the specified number of parameters is already in the dictionary.
            </exception>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Interfaces.IConnectQlPlugin">
            <summary>
            Implement this interface to create a plugin.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IConnectQlPlugin.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.IConnectQlPlugin.RegisterPlugin(ConnectQl.Interfaces.IPluginContext)">
            <summary>
            Registers the plugin on the context.
            </summary>
            <param name="context">
            The context to register the plugin on.
            </param>
        </member>
        <member name="T:ConnectQl.Interfaces.IConnectQlProviders">
            <summary>
            The ConnectQlProviders interface.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.IConnectQlProviders.Add``1(System.String,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            The add.
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="function">
            The function.
            </param>
            <typeparam name="TDataProvider">
            The type of the data provider.
            </typeparam>
        </member>
        <member name="M:ConnectQl.Interfaces.IConnectQlProviders.Add``2(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            The add.
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="function">
            The function.
            </param>
            <typeparam name="TArgument">
            The type of the argument.
            </typeparam>
            <typeparam name="TDataProvider">
            The type of the data provider.
            </typeparam>
        </member>
        <member name="M:ConnectQl.Interfaces.IConnectQlProviders.Add``3(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            The add.
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="function">
            The function.
            </param>
            <typeparam name="TArgument1">
            The type of the first argument.
            </typeparam>
            <typeparam name="TArgument2">
            The type of the second argument.
            </typeparam>
            <typeparam name="TDataProvider">
            The type of the data provider.
            </typeparam>
        </member>
        <member name="M:ConnectQl.Interfaces.IConnectQlProviders.Add``4(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
            <summary>
            The add.
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="function">
            The function.
            </param>
            <typeparam name="TArgument1">
            The type of the first argument.
            </typeparam>
            <typeparam name="TArgument2">
            The type of the second argument.
            </typeparam>
            <typeparam name="TArgument3">
            The type of the third argument.
            </typeparam>
            <typeparam name="TDataProvider">
            The type of the data provider.
            </typeparam>
        </member>
        <member name="M:ConnectQl.Interfaces.IConnectQlProviders.Add``5(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
            <summary>
            The add.
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="function">
            The function.
            </param>
            <typeparam name="TArgument1">
            The type of the first argument.
            </typeparam>
            <typeparam name="TArgument2">
            The type of the second argument.
            </typeparam>
            <typeparam name="TArgument3">
            The type of the third argument.
            </typeparam>
            <typeparam name="TArgument4">
            The type of the fourth argument.
            </typeparam>
            <typeparam name="TDataProvider">
            The type of the data provider.
            </typeparam>
        </member>
        <member name="M:ConnectQl.Interfaces.IConnectQlProviders.Add``6(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
            <summary>
            The add.
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="function">
            The function.
            </param>
            <typeparam name="TArgument1">
            The type of the first argument.
            </typeparam>
            <typeparam name="TArgument2">
            The type of the second argument.
            </typeparam>
            <typeparam name="TArgument3">
            The type of the third argument.
            </typeparam>
            <typeparam name="TArgument4">
            The type of the fourth argument.
            </typeparam>
            <typeparam name="TArgument5">
            The type of the fifth argument.
            </typeparam>
            <typeparam name="TDataProvider">
            The type of the data provider.
            </typeparam>
        </member>
        <member name="M:ConnectQl.Interfaces.IConnectQlProviders.Add``7(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            The add.
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="function">
            The function.
            </param>
            <typeparam name="TArgument1">
            The type of the first argument.
            </typeparam>
            <typeparam name="TArgument2">
            The type of the second argument.
            </typeparam>
            <typeparam name="TArgument3">
            The type of the third argument.
            </typeparam>
            <typeparam name="TArgument4">
            The type of the fourth argument.
            </typeparam>
            <typeparam name="TArgument5">
            The type of the fifth argument.
            </typeparam>
            <typeparam name="TArgument6">
            The type of the sixth argument.
            </typeparam>
            <typeparam name="TDataProvider">
            The type of the data provider.
            </typeparam>
        </member>
        <member name="T:ConnectQl.Interfaces.IDataAccess">
            <summary>
            The DataAccess interface.
            </summary>
        </member>
        <member name="T:ConnectQl.Interfaces.IDataSource">
            <summary>
            The DataSource interface.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.IDataSource.GetRows(ConnectQl.Interfaces.IExecutionContext,ConnectQl.Interfaces.IRowBuilder,ConnectQl.Interfaces.IQuery)">
            <summary>
            Retrieves the data from the source as an <see cref="T:ConnectQl.AsyncEnumerables.IAsyncEnumerable`1"/>.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="rowBuilder">
            The row builder.
            </param>
            <param name="query">
            The query expression. Can be <c>null</c>.
            </param>
            <returns>
            A task returning the data set.
            </returns>
        </member>
        <member name="T:ConnectQl.Interfaces.IDataSourceDescriptor">
            <summary>
            Describes a data source that has static columns.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IDataSourceDescriptor.Alias">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IDataSourceDescriptor.AllowsAnyColumnName">
            <summary>
            Gets a value indicating whether the data source allows any column name, or only the columns returned by
                <see cref="P:ConnectQl.Interfaces.IDataSourceDescriptor.Columns"/>.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IDataSourceDescriptor.Columns">
            <summary>
            Gets the columns for this data source.
            </summary>
        </member>
        <member name="T:ConnectQl.Interfaces.IDataSourceDescriptorRange">
            <summary>
            The DataSourceDescriptorRange interface.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IDataSourceDescriptorRange.Start">
            <summary>
            Gets the start.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IDataSourceDescriptorRange.End">
            <summary>
            Gets the end.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IDataSourceDescriptorRange.DataSource">
            <summary>
            Gets the data source.
            </summary>
        </member>
        <member name="T:ConnectQl.Interfaces.IDataSourceFilterSupport">
            <summary>
            The DataSourceFilterSupport interface.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.IDataSourceFilterSupport.SupportsExpression(ConnectQl.Expressions.CompareExpression)">
            <summary>
            Checks if the data source supports the expression.
            </summary>
            <param name="expression">
            The expression to check.
            </param>
            <returns>
            <c>true</c> if the expression is supported, false otherwise.
            </returns>
        </member>
        <member name="T:ConnectQl.Interfaces.IDataSourceOrderBySupport">
            <summary>
            The DataSourceOrderBySupport interface.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.IDataSourceOrderBySupport.SupportsOrderBy(System.Collections.Generic.IEnumerable{ConnectQl.Interfaces.IOrderByExpression})">
            <summary>
            Checks if the data source supports the ORDER BY expressions.
            </summary>
            <param name="orderBy">
            The expression to check.
            </param>
            <returns>
            <c>true</c> if the expressions are supported, false otherwise.
            </returns>
        </member>
        <member name="T:ConnectQl.Interfaces.IDataTarget">
            <summary>
            The DataTarget interface.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.IDataTarget.WriteRowsAsync(ConnectQl.Interfaces.IExecutionContext,ConnectQl.AsyncEnumerables.IAsyncEnumerable{ConnectQl.Results.Row},System.Boolean)">
            <summary>
            Writes the rowsToWrite to the specified target.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="rowsToWrite">
            The rowsToWrite.
            </param>
            <param name="upsert">
            True to also update records, false to insert.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Interfaces.IDescriptableDataSource">
            <summary>
            A data source that can describe itself.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.IDescriptableDataSource.GetDataSourceDescriptorAsync(System.String,ConnectQl.Interfaces.IExecutionContext)">
            <summary>
            Gets the descriptor for this data source.
            </summary>
            <param name="sourceAlias">
            The data source source alias.
            </param>
            <param name="context">
            The execution context.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Interfaces.IDescriptableFileFormat">
            <summary>
            A file format that can describe itself.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.IDescriptableFileFormat.GetDataSourceDescriptorAsync(System.String,ConnectQl.Interfaces.IFileFormatExecutionContext,System.IO.StreamReader)">
            <summary>
            Gets the descriptor for this data source.
            </summary>
            <param name="alias">
            The alias.
            </param>
            <param name="context">
            The execution context.
            </param>
            <param name="reader">
            The reader.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Interfaces.IDocumentDescriptor">
            <summary>
            The DocumentDescriptor interface.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IDocumentDescriptor.Functions">
            <summary>
            Gets the functions.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IDocumentDescriptor.Tokens">
            <summary>
            Gets the tokens.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IDocumentDescriptor.Messages">
            <summary>
            Gets the messages.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IDocumentDescriptor.Variables">
            <summary>
            Gets the variables.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IDocumentDescriptor.Sources">
            <summary>
            Gets the sources.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IDocumentDescriptor.Plugins">
            <summary>
            Gets the plugins.
            </summary>
        </member>
        <member name="T:ConnectQl.Interfaces.IExecutionContext">
            <summary>
            The ExecuteContext interface.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IExecutionContext.MaxRowsToScan">
            <summary>
            Gets the maximum rows to scan when determining the columns in a source.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IExecutionContext.WriteProgressInterval">
            <summary>
            Gets the write progress interval.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IExecutionContext.Log">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IExecutionContext.FileFormats">
            <summary>
            Gets the available file formats.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.IExecutionContext.GetVariable``1(System.String)">
            <summary>
            Gets the value for the specified variable.
            </summary>
            <typeparam name="T">
            The type of the variable.
            </typeparam>
            <param name="variable">
            The name of the variable, including the '@'.
            </param>
            <returns>
            The value of the variable.
            </returns>
        </member>
        <member name="M:ConnectQl.Interfaces.IExecutionContext.OpenStreamAsync(System.String,ConnectQl.UriResolveMode)">
            <summary>
            Opens a file.
            </summary>
            <param name="uri">
            The uri of the file.
            </param>
            <param name="uriResolveMode">
            The file mode.
            </param>
            <returns>
            The stream containing the data of the file.
            </returns>
        </member>
        <member name="M:ConnectQl.Interfaces.IExecutionContext.GetDefault(System.String,ConnectQl.Interfaces.IDataAccess,System.Boolean)">
            <summary>
            Gets the default setting for a data source. A 'USE DEFAULT' statement can be used to set a default value for a
                function.
            </summary>
            <param name="setting">
            The default setting get the value for.
            </param>
            <param name="source">
            The data source to get the value for.
            </param>
            <param name="throwOnError">
            <c>true</c>to throw an exception when an error occurs.
            </param>
            <returns>
            The value for the function for the specified source.
            </returns>
        </member>
        <member name="T:ConnectQl.Interfaces.IField">
            <summary>
            A field.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IField.FieldName">
            <summary>
            Gets the name of the field.
            </summary>
            <value>
            The name of the field.
            </value>
        </member>
        <member name="P:ConnectQl.Interfaces.IField.SourceAlias">
            <summary>
            Gets the source alias.
            </summary>
            <value>
            The source alias.
            </value>
        </member>
        <member name="T:ConnectQl.Interfaces.IFileAccess">
            <summary>
            The FileAccess interface.
            </summary>
        </member>
        <member name="T:ConnectQl.Interfaces.IFileFormat">
            <summary>
            The FileAccess interface.
            </summary>
        </member>
        <member name="T:ConnectQl.Interfaces.IFileFormatExecutionContext">
            <summary>
                The FileFormatExecutionContext interface.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IFileFormatExecutionContext.Log">
            <summary>
                Gets the logger.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IFileFormatExecutionContext.MaxRowsToScan">
            <summary>
                Gets the maximum rows to scan when determining the columns in a source.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.IFileFormatExecutionContext.GetDefault(System.String,System.Boolean)">
            <summary>
                Gets the default setting for a data source. A 'USE DEFAULT' statement can be used to set a default value for a
                function.
            </summary>
            <param name="setting">
                The default setting get the value for.
            </param>
            <param name="throwOnError">
                <c>true</c> to throw an exception when an error occurs, false otherwise.
            </param>
            <returns>
                The value for the function for the specified source.
            </returns>
        </member>
        <member name="T:ConnectQl.Interfaces.IFileFormats">
            <summary>
            The file format collection.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.IFileFormats.AddFileAccess(ConnectQl.Interfaces.IFileAccess)">
            <summary>
            Adds a file access method to the file formats.
            </summary>
            <param name="access">
            The file access to add.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IFileFormats"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Interfaces.IFileReader">
            <summary>
            The FileReader interface.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.IFileReader.CanReadThisFile(ConnectQl.Interfaces.IFileFormatExecutionContext,System.String,System.Byte[])">
            <summary>
            Checks if the file reader can read this file.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="fileName">
            The file name.
            </param>
            <param name="firstBytes">
            The first bytes of the file.
            </param>
            <returns>
            <c>true</c> if this reader can read the file, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:ConnectQl.Interfaces.IFileReader.Read(ConnectQl.Interfaces.IFileFormatExecutionContext,ConnectQl.Interfaces.IRowBuilder,System.IO.StreamReader,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Reads objects from the stream.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="rowBuilder">
            The row builder.
            </param>
            <param name="reader">
            The stream.
            </param>
            <param name="fields">
            The fields, or <c>null</c> to retrieve all fields.
            </param>
            <returns>
            The rows.
            </returns>
        </member>
        <member name="T:ConnectQl.Interfaces.IFileWriter">
            <summary>
            The FileWriter interface.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IFileWriter.ShouldMaterialize">
            <summary>
            Gets a value indicating whether the collection of rows should be materialized when
            calling this writer.
            When all columns are needed in the header (e.g. for CSV or Excel), you should return <c>true</c>
            here. Other formats that use the columns per object (like JSON) can return <c>false</c>.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.IFileWriter.CanWriteThisFile(System.String)">
            <summary>
            Checks if the file writer can write this file.
            </summary>
            <param name="fileName">
            The file name.
            </param>
            <returns>
            <c>true</c> if this reader can write the file, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:ConnectQl.Interfaces.IFileWriter.WriteHeader(ConnectQl.Interfaces.IFileFormatExecutionContext,System.IO.StreamWriter,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes the header to the file.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="writer">
            The stream.
            </param>
            <param name="fields">
            The fields.
            </param>
        </member>
        <member name="M:ConnectQl.Interfaces.IFileWriter.WriteRows(ConnectQl.Interfaces.IFileFormatExecutionContext,System.IO.StreamWriter,System.Collections.Generic.IEnumerable{ConnectQl.Results.Row},System.Boolean)">
            <summary>
            Writes rows to the file.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="writer">
            The stream.
            </param>
            <param name="rows">
            The rows to write.
            </param>
            <param name="upsert">
            True to upsert, false to insert.
            </param>
            <returns>
            The number of rows that were written.
            </returns>
        </member>
        <member name="M:ConnectQl.Interfaces.IFileWriter.WriteFooter(ConnectQl.Interfaces.IFileFormatExecutionContext,System.IO.StreamWriter)">
            <summary>
            Writes the footer to the file.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="writer">
            The stream.
            </param>
        </member>
        <member name="T:ConnectQl.Interfaces.IFunctionDescriptor">
            <summary>
            The FunctionDescriptor interface.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IFunctionDescriptor.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IFunctionDescriptor.Description">
            <summary>
            Gets the description.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IFunctionDescriptor.Arguments">
            <summary>
            Gets the arguments.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IFunctionDescriptor.IsAggregateFunction">
            <summary>
            Gets a value indicating whether this function is an aggregate function.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IFunctionDescriptor.ReturnType">
            <summary>
            Gets the return type.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IFunctionDescriptor.HasSideEffects">
            <summary>
            Gets a value indicating whether the function has side effects and should not be evaluated for IntelliSense.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.IFunctionDescriptor.GetExpression">
            <summary>
            Gets the lambda expression.
            </summary>
            <returns>
            The lambda expression, or <c>null</c> if it's not supported.
            </returns>
        </member>
        <member name="T:ConnectQl.Interfaces.IFunctionRegistration">
            <summary>
            A function registration with no arguments.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.IFunctionRegistration.SetDescription(System.String)">
            <summary>
            Sets the description for this registration.
            </summary>
            <param name="description">
            The description.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Interfaces.IFunctionRegistration1">
            <summary>
            A function registration with 1 arguments.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.IFunctionRegistration1.SetDescription(System.String,System.String)">
            <summary>
            Sets the description for this registration.
            </summary>
            <param name="description">
            The description.
            </param>
            <param name="argument1">
            The argument 1.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Interfaces.IFunctionRegistration10">
            <summary>
            A function registration with 10 arguments.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.IFunctionRegistration10.SetDescription(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the description for this registration.
            </summary>
            <param name="description">
            The description.
            </param>
            <param name="argument1">
            The argument 1.
            </param>
            <param name="argument2">
            The argument 2.
            </param>
            <param name="argument3">
            The argument 3.
            </param>
            <param name="argument4">
            The argument 4.
            </param>
            <param name="argument5">
            The argument 5.
            </param>
            <param name="argument6">
            The argument 6.
            </param>
            <param name="argument7">
            The argument 7.
            </param>
            <param name="argument8">
            The argument 8.
            </param>
            <param name="argument9">
            The argument 9.
            </param>
            <param name="argument10">
            The argument 10.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Interfaces.IFunctionRegistration2">
            <summary>
            A function registration with 2 arguments.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.IFunctionRegistration2.SetDescription(System.String,System.String,System.String)">
            <summary>
            Sets the description for this registration.
            </summary>
            <param name="description">
            The description.
            </param>
            <param name="argument1">
            The argument 1.
            </param>
            <param name="argument2">
            The argument 2.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Interfaces.IFunctionRegistration3">
            <summary>
            A function registration with 3 arguments.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.IFunctionRegistration3.SetDescription(System.String,System.String,System.String,System.String)">
            <summary>
            Sets the description for this registration.
            </summary>
            <param name="description">
            The description.
            </param>
            <param name="argument1">
            The argument 1.
            </param>
            <param name="argument2">
            The argument 2.
            </param>
            <param name="argument3">
            The argument 3.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Interfaces.IFunctionRegistration4">
            <summary>
            A function registration with 4 arguments.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.IFunctionRegistration4.SetDescription(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the description for this registration.
            </summary>
            <param name="description">
            The description.
            </param>
            <param name="argument1">
            The argument 1.
            </param>
            <param name="argument2">
            The argument 2.
            </param>
            <param name="argument3">
            The argument 3.
            </param>
            <param name="argument4">
            The argument 4.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Interfaces.IFunctionRegistration5">
            <summary>
            A function registration with 5 arguments.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.IFunctionRegistration5.SetDescription(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the description for this registration.
            </summary>
            <param name="description">
            The description.
            </param>
            <param name="argument1">
            The argument 1.
            </param>
            <param name="argument2">
            The argument 2.
            </param>
            <param name="argument3">
            The argument 3.
            </param>
            <param name="argument4">
            The argument 4.
            </param>
            <param name="argument5">
            The argument 5.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Interfaces.IFunctionRegistration6">
            <summary>
            A function registration with 6 arguments.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.IFunctionRegistration6.SetDescription(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the description for this registration.
            </summary>
            <param name="description">
            The description.
            </param>
            <param name="argument1">
            The argument 1.
            </param>
            <param name="argument2">
            The argument 2.
            </param>
            <param name="argument3">
            The argument 3.
            </param>
            <param name="argument4">
            The argument 4.
            </param>
            <param name="argument5">
            The argument 5.
            </param>
            <param name="argument6">
            The argument 6.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Interfaces.IFunctionRegistration7">
            <summary>
            A function registration with 7 arguments.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.IFunctionRegistration7.SetDescription(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the description for this registration.
            </summary>
            <param name="description">
            The description.
            </param>
            <param name="argument1">
            The argument 1.
            </param>
            <param name="argument2">
            The argument 2.
            </param>
            <param name="argument3">
            The argument 3.
            </param>
            <param name="argument4">
            The argument 4.
            </param>
            <param name="argument5">
            The argument 5.
            </param>
            <param name="argument6">
            The argument 6.
            </param>
            <param name="argument7">
            The argument 7.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Interfaces.IFunctionRegistration8">
            <summary>
            A function registration with 8 arguments.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.IFunctionRegistration8.SetDescription(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the description for this registration.
            </summary>
            <param name="description">
            The description.
            </param>
            <param name="argument1">
            The argument 1.
            </param>
            <param name="argument2">
            The argument 2.
            </param>
            <param name="argument3">
            The argument 3.
            </param>
            <param name="argument4">
            The argument 4.
            </param>
            <param name="argument5">
            The argument 5.
            </param>
            <param name="argument6">
            The argument 6.
            </param>
            <param name="argument7">
            The argument 7.
            </param>
            <param name="argument8">
            The argument 8.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Interfaces.IFunctionRegistration9">
            <summary>
            A function registration with 9 arguments.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.IFunctionRegistration9.SetDescription(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the description for this registration.
            </summary>
            <param name="description">
            The description.
            </param>
            <param name="argument1">
            The argument 1.
            </param>
            <param name="argument2">
            The argument 2.
            </param>
            <param name="argument3">
            The argument 3.
            </param>
            <param name="argument4">
            The argument 4.
            </param>
            <param name="argument5">
            The argument 5.
            </param>
            <param name="argument6">
            The argument 6.
            </param>
            <param name="argument7">
            The argument 7.
            </param>
            <param name="argument8">
            The argument 8.
            </param>
            <param name="argument9">
            The argument 9.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IConnectQlFunctions"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Interfaces.IJobRunner">
            <summary>
            The JobRunner interface.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.IJobRunner.Run(System.String)">
            <summary>
            Runs the job.
            </summary>
            <param name="jobName">
            The job name to run.
            </param>
        </member>
        <member name="T:ConnectQl.Interfaces.IJobTrigger">
            <summary>
            The job trigger.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IJobTrigger.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.IJobTrigger.Disable(ConnectQl.Interfaces.ITriggerContext)">
            <summary>
            The disable.
            </summary>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="M:ConnectQl.Interfaces.IJobTrigger.Enable(ConnectQl.Interfaces.ITriggerContext)">
            <summary>
            The enable.
            </summary>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="T:ConnectQl.Interfaces.ILog">
            <summary>
            The Log interface.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.ILog.Debug(System.String,System.Object[])">
            <summary>
            Writes a debug message to the log.
            </summary>
            <param name="format">
            The format string.
            </param>
            <param name="args">
            The objects to format.
            </param>
        </member>
        <member name="M:ConnectQl.Interfaces.ILog.Verbose(System.String,System.Object[])">
            <summary>
            Writes a verbose message to the log.
            </summary>
            <param name="format">
            The format string.
            </param>
            <param name="args">
            The objects to format.
            </param>
        </member>
        <member name="M:ConnectQl.Interfaces.ILog.Information(System.String,System.Object[])">
            <summary>
            Writes an information message to the log.
            </summary>
            <param name="format">
            The format string.
            </param>
            <param name="args">
            The objects to format.
            </param>
        </member>
        <member name="M:ConnectQl.Interfaces.ILog.Warning(System.String,System.Object[])">
            <summary>
            Writes a warning message to the log.
            </summary>
            <param name="format">
            The format string.
            </param>
            <param name="args">
            The objects to format.
            </param>
        </member>
        <member name="M:ConnectQl.Interfaces.ILog.Error(System.String,System.Object[])">
            <summary>
            Writes a error message to the log.
            </summary>
            <param name="format">
            The format string.
            </param>
            <param name="args">
            The objects to format.
            </param>
        </member>
        <member name="T:ConnectQl.Interfaces.IMessage">
            <summary>
            The Message interface.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IMessage.End">
            <summary>
            Gets the end.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IMessage.File">
            <summary>
            Gets the file.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IMessage.Start">
            <summary>
            Gets the start.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IMessage.Text">
            <summary>
            Gets the text.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IMessage.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="T:ConnectQl.Interfaces.IOrderByExpression">
            <summary>
            The ORDER BY expression.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IOrderByExpression.Ascending">
            <summary>
            Gets a value indicating whether this <see cref="T:ConnectQl.Interfaces.IOrderByExpression"/> is ascending.
            </summary>
            <value>
              <c>true</c> if ascending; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ConnectQl.Interfaces.IOrderByExpression.Expression">
            <summary>
            Gets the expression.
            </summary>
            <value>
            The expression.
            </value>
        </member>
        <member name="T:ConnectQl.Interfaces.IOverrideEncoding">
            <summary>
            Overrides the encoding for a file format.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IOverrideEncoding.Encoding">
            <summary>
            Gets the encoding.
            </summary>
        </member>
        <member name="T:ConnectQl.Interfaces.IPluginContext">
            <summary>
            The PluginContext interface.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IPluginContext.Functions">
            <summary>
            Gets the functions.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IPluginContext.FileFormats">
            <summary>
            Gets the file formats.
            </summary>
        </member>
        <member name="T:ConnectQl.Interfaces.IPluginResolver">
            <summary>
            The PluginResolver interface.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.IPluginResolver.EnumerateAvailablePlugins">
            <summary>
            Enumerates the available plugins.
            </summary>
            <returns>
            The available plugins.
            </returns>
        </member>
        <member name="T:ConnectQl.Interfaces.IQuery">
            <summary>
            The SourceQuery interface.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IQuery.Count">
            <summary>
            Gets the number of records to retrieve. When this is <c>null</c>, all records will be retrieved.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IQuery.FilterExpression">
            <summary>
            Gets the filter expression.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IQuery.Fields">
            <summary>
            Gets the fields.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IQuery.RetrieveAllFields">
            <summary>
            Gets a value indicating whether to retrieve all fields.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IQuery.OrderByExpressions">
            <summary>
            Gets the order by expressions.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.IQuery.GetFilter(ConnectQl.Interfaces.IExecutionContext)">
            <summary>
            Retrieves the filter for the query.
            </summary>
            <param name="context">
            The execution context.
            </param>
            <returns>
            The filter for this query, or <c>null</c> when no filter exists.
            </returns>
        </member>
        <member name="M:ConnectQl.Interfaces.IQuery.GetSortOrders(ConnectQl.Interfaces.IExecutionContext)">
            <summary>
            Retrieves the sort orders for the query.
            </summary>
            <param name="context">
            The execution context.
            </param>
            <returns>
            A collection of sort orders.
            </returns>
        </member>
        <member name="T:ConnectQl.Interfaces.IRowBuilder">
            <summary>
            Contains a method to build rows for a data set.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.IRowBuilder.CreateRow``1(``0,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Creates a row.
            </summary>
            <param name="uniqueId">
            The unique id of the row.
            </param>
            <param name="fields">
            The fields in the row.
            </param>
            <typeparam name="T">
            The type of the unique id of the row.
            </typeparam>
            <returns>
            The <see cref="T:ConnectQl.Results.Row"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Interfaces.IRowBuilder.CombineRows(ConnectQl.Results.Row,ConnectQl.Results.Row)">
            <summary>
            Combines two rows.
            </summary>
            <param name="first">
            The first row.
            </param>
            <param name="second">
            The second row.
            </param>
            <returns>
            The combined rows or <c>null</c> if both rows were <c>null</c>.
            </returns>
        </member>
        <member name="M:ConnectQl.Interfaces.IRowBuilder.Attach(ConnectQl.Results.Row)">
            <summary>
            Attaches the row to the current builder.
            </summary>
            <param name="row">
            The row to attach.
            </param>
            <returns>
            The <paramref name="row"/> if it was already attached to the builder, or a copy otherwise.
            </returns>
        </member>
        <member name="T:ConnectQl.Interfaces.ITrigger">
            <summary>
            The Trigger interface.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.ITrigger.Enable(ConnectQl.Interfaces.ITriggerContext)">
            <summary>
            Enables the trigger.
            </summary>
            <param name="context">
            The trigger context.
            </param>
        </member>
        <member name="M:ConnectQl.Interfaces.ITrigger.Disable(ConnectQl.Interfaces.ITriggerContext)">
            <summary>
            Disables the trigger.
            </summary>
            <param name="context">
            The trigger context.
            </param>
        </member>
        <member name="T:ConnectQl.Interfaces.ITriggerContext">
            <summary>
            The TriggerContext interface.
            </summary>
        </member>
        <member name="E:ConnectQl.Interfaces.ITriggerContext.JobExecuted">
            <summary>
            Raised when a job was executed.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.ITriggerContext.Log">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.ITriggerContext.Activate">
            <summary>
            Activates the trigger.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.ITriggerContext.GetLastExecutionTime(System.String)">
            <summary>
            Gets the date and time this job was executed the last time.
            </summary>
            <param name="jobName">
            The name of the job.
            </param>
            <returns>
            The date and time this job was executed, or <c>null</c> if the job was never executed.
            </returns>
        </member>
        <member name="T:ConnectQl.Interfaces.ITypeDescriptor">
            <summary>
            Describes a type.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.ITypeDescriptor.Interfaces">
            <summary>
            Gets the implemented interfaces.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.ITypeDescriptor.SimplifiedType">
            <summary>
            Gets the simplified type.
            </summary>
        </member>
        <member name="T:ConnectQl.Interfaces.IVariableDescriptor">
            <summary>
            The VariableDescriptor interface.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IVariableDescriptor.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IVariableDescriptor.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IVariableDescriptor.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IVariableDescriptor.WasEvaluated">
            <summary>
            Gets a value indicating whether the variable was evaluated.
            </summary>
        </member>
        <member name="T:ConnectQl.Interfaces.IVariableDescriptorRange">
            <summary>
            The VariableDescriptorRange interface.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IVariableDescriptorRange.Start">
            <summary>
            Gets the start.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IVariableDescriptorRange.End">
            <summary>
            Gets the end.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.IVariableDescriptorRange.Variable">
            <summary>
            Gets the variable.
            </summary>
        </member>
        <member name="T:ConnectQl.Interfaces.JobExecutedArgs">
            <summary>
            The job executed args.
            </summary>
        </member>
        <member name="M:ConnectQl.Interfaces.JobExecutedArgs.#ctor(System.String,System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Interfaces.JobExecutedArgs"/> class.
            </summary>
            <param name="jobName">
            The job name.
            </param>
            <param name="start">
            The start.
            </param>
            <param name="end">
            The end.
            </param>
        </member>
        <member name="P:ConnectQl.Interfaces.JobExecutedArgs.Duration">
            <summary>
            Gets the execution time.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.JobExecutedArgs.End">
            <summary>
            Gets the end time.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.JobExecutedArgs.JobName">
            <summary>
            Gets the job name.
            </summary>
        </member>
        <member name="P:ConnectQl.Interfaces.JobExecutedArgs.Start">
            <summary>
            Gets the start time.
            </summary>
        </member>
        <member name="T:ConnectQl.Intellisense.AssemblyPluginResolver">
            <summary>
            Resolves plugins using the assembly list provided.
            </summary>
        </member>
        <member name="F:ConnectQl.Intellisense.AssemblyPluginResolver.assemblies">
            <summary>
            The assemblies.
            </summary>
        </member>
        <member name="F:ConnectQl.Intellisense.AssemblyPluginResolver.plugins">
            <summary>
            The plugins.
            </summary>
        </member>
        <member name="M:ConnectQl.Intellisense.AssemblyPluginResolver.#ctor(System.Collections.Generic.IList{System.Reflection.Assembly})">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Intellisense.AssemblyPluginResolver"/> class.
            </summary>
            <param name="assemblies">
            The assemblies.
            </param>
        </member>
        <member name="M:ConnectQl.Intellisense.AssemblyPluginResolver.EnumerateAvailablePlugins">
            <summary>
            Enumerates the available plugins.
            </summary>
            <returns>
            The available plugins.
            </returns>
        </member>
        <member name="T:ConnectQl.Intellisense.Classification">
            <summary>
            The classification.
            </summary>
        </member>
        <member name="F:ConnectQl.Intellisense.Classification.Unknown">
            <summary>
            The unknown.
            </summary>
        </member>
        <member name="F:ConnectQl.Intellisense.Classification.Comment">
            <summary>
            The comment.
            </summary>
        </member>
        <member name="F:ConnectQl.Intellisense.Classification.Identifier">
            <summary>
            The identifier.
            </summary>
        </member>
        <member name="F:ConnectQl.Intellisense.Classification.Number">
            <summary>
            The number.
            </summary>
        </member>
        <member name="F:ConnectQl.Intellisense.Classification.String">
            <summary>
            The string.
            </summary>
        </member>
        <member name="F:ConnectQl.Intellisense.Classification.Variable">
            <summary>
            The variable.
            </summary>
        </member>
        <member name="F:ConnectQl.Intellisense.Classification.Function">
            <summary>
            The function.
            </summary>
        </member>
        <member name="F:ConnectQl.Intellisense.Classification.Keyword">
            <summary>
            The keyword.
            </summary>
        </member>
        <member name="F:ConnectQl.Intellisense.Classification.Parens">
            <summary>
            The parentheses.
            </summary>
        </member>
        <member name="F:ConnectQl.Intellisense.Classification.Operator">
            <summary>
            The operator.
            </summary>
        </member>
        <member name="F:ConnectQl.Intellisense.Classification.Constant">
            <summary>
            The constant.
            </summary>
        </member>
        <member name="F:ConnectQl.Intellisense.Classification.Source">
            <summary>
            The source.
            </summary>
        </member>
        <member name="T:ConnectQl.Intellisense.Descriptor">
            <summary>
            The descriptor.
            </summary>
        </member>
        <member name="M:ConnectQl.Intellisense.Descriptor.DynamicDataSource(System.String)">
            <summary>
            Creates a dynamic data source; no columns, but allows any column name.
            </summary>
            <param name="alias">
            The alias.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IDataSourceDescriptor"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Intellisense.Descriptor.ForColumn(System.String,System.Type,System.String)">
            <summary>
            Creates a descriptor for a column.
            </summary>
            <param name="name">
            The name of the column.
            </param>
            <param name="type">
            The type of the column.
            </param>
            <param name="description">
            Optional. The description of the column.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IColumnDescriptor"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Intellisense.Descriptor.ForDataSource(System.String,System.Collections.Generic.IEnumerable{ConnectQl.Interfaces.IColumnDescriptor},System.Boolean)">
            <summary>
            The for data source.
            </summary>
            <param name="alias">
            The alias.
            </param>
            <param name="columns">
            The columns.
            </param>
            <param name="allowsAnyColumnName">
            The allows any column name.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IDataSourceDescriptor"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Intellisense.IntellisenseSession">
            <summary>
            The <c>Intellisense</c> session.
            </summary>
        </member>
        <member name="F:ConnectQl.Intellisense.IntellisenseSession.documents">
            <summary>
            The documents.
            </summary>
        </member>
        <member name="M:ConnectQl.Intellisense.IntellisenseSession.#ctor(ConnectQl.Interfaces.IPluginResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Intellisense.IntellisenseSession"/> class.
            </summary>
            <param name="pluginResolver">
            The plugin resolver.
            </param>
        </member>
        <member name="E:ConnectQl.Intellisense.IntellisenseSession.ClassificationChanged">
            <summary>
            The classification changed.
            </summary>
        </member>
        <member name="P:ConnectQl.Intellisense.IntellisenseSession.Plugins">
            <summary>
            Gets the plugins.
            </summary>
        </member>
        <member name="P:ConnectQl.Intellisense.IntellisenseSession.Context">
            <summary>
            Gets the context.
            </summary>
        </member>
        <member name="M:ConnectQl.Intellisense.IntellisenseSession.Deserialize(System.Byte[])">
            <summary>
            Deserializes a serialized document.
            </summary>
            <param name="serializedDocument">
            The serialized document.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Interfaces.IDocumentDescriptor"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Intellisense.IntellisenseSession.GetDocument(System.String)">
            <summary>
            Gets the document by its path.
            </summary>
            <param name="filename">
            The filename.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Intellisense.IntellisenseSession.RemoveDocument(System.String)">
            <summary>
            Removes the document.
            </summary>
            <param name="filename">
            The filename.
            </param>
        </member>
        <member name="M:ConnectQl.Intellisense.IntellisenseSession.UpdateDocument(System.String,System.String)">
            <summary>
            Updates the document.
            </summary>
            <param name="filename">
            The filename.
            </param>
            <param name="contents">
            The contents.
            </param>
        </member>
        <member name="M:ConnectQl.Intellisense.IntellisenseSession.UpdateDocumentSpan(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Updates a span in the document.
            </summary>
            <param name="filename">
            The filename.
            </param>
            <param name="startIndex">
            The start index.
            </param>
            <param name="endIndex">
            The end index.
            </param>
            <param name="span">
            The span.
            </param>
        </member>
        <member name="M:ConnectQl.Intellisense.IntellisenseSession.OnClassificationChanged(System.String,ConnectQl.Internal.Intellisense.Protocol.SerializableDocumentDescriptor)">
            <summary>
            Sends the classification changed event.
            </summary>
            <param name="filename">
            The filename.
            </param>
            <param name="document">
            The serialized document.
            </param>
        </member>
        <member name="T:ConnectQl.Results.Error">
            <summary>
            The error.
            </summary>
        </member>
        <member name="M:ConnectQl.Results.Error.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Results.Error"/> class.
            </summary>
            <param name="exception">
            The exception.
            </param>
        </member>
        <member name="P:ConnectQl.Results.Error.Exception">
            <summary>
            Gets the exception.
            </summary>
        </member>
        <member name="P:ConnectQl.Results.Error.Message">
            <summary>
            Gets the message.
            </summary>
        </member>
        <member name="M:ConnectQl.Results.Error.ToString">
            <summary>
            The to string.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Results.IExecuteResult">
            <summary>
            The result of a script execution.
            </summary>
        </member>
        <member name="P:ConnectQl.Results.IExecuteResult.Jobs">
            <summary>
                Gets the jobs.
            </summary>
        </member>
        <member name="P:ConnectQl.Results.IExecuteResult.QueryResults">
            <summary>
                Gets the query results.
            </summary>
        </member>
        <member name="P:ConnectQl.Results.IExecuteResult.Warnings">
            <summary>
                Gets or sets the warnings.
            </summary>
        </member>
        <member name="T:ConnectQl.Results.IJob">
            <summary>
            A job definition.
            </summary>
        </member>
        <member name="P:ConnectQl.Results.IJob.Name">
            <summary>
                Gets the name.
            </summary>
        </member>
        <member name="P:ConnectQl.Results.IJob.Triggers">
            <summary>
                Gets the triggers.
            </summary>
        </member>
        <member name="M:ConnectQl.Results.IJob.RunAsync(ConnectQl.Results.IJobContext)">
            <summary>
                Runs the job.
            </summary>
            <param name="jobContext">
                The job context.
            </param>
            <returns>
                The <see cref="T:System.Threading.Tasks.Task" />.
            </returns>
        </member>
        <member name="T:ConnectQl.Results.IJobContext">
            <summary>
            The JobContext interface.
            </summary>
        </member>
        <member name="P:ConnectQl.Results.IJobContext.SerializedContext">
            <summary>
            Gets or sets the serialized context.
            </summary>
        </member>
        <member name="T:ConnectQl.Results.IQueryResult">
            <summary>
                The QueryResult interface.
            </summary>
        </member>
        <member name="P:ConnectQl.Results.IQueryResult.AffectedRecords">
            <summary>
                Gets the affected records.
            </summary>
        </member>
        <member name="P:ConnectQl.Results.IQueryResult.Rows">
            <summary>
                Gets the rows.
            </summary>
        </member>
        <member name="T:ConnectQl.Results.Position">
            <summary>
                The position.
            </summary>
        </member>
        <member name="P:ConnectQl.Results.Position.Column">
            <summary>
                Gets or sets the column.
            </summary>
        </member>
        <member name="P:ConnectQl.Results.Position.Line">
            <summary>
                Gets or sets the line.
            </summary>
        </member>
        <member name="P:ConnectQl.Results.Position.TokenIndex">
            <summary>
                Gets or sets the token index.
            </summary>
        </member>
        <member name="M:ConnectQl.Results.Position.op_Equality(ConnectQl.Results.Position,ConnectQl.Results.Position)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="first">The first position.</param>
            <param name="second">The second position.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:ConnectQl.Results.Position.op_Inequality(ConnectQl.Results.Position,ConnectQl.Results.Position)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="first">The first position.</param>
            <param name="second">The second position.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:ConnectQl.Results.Position.Equals(System.Object)">
            <summary>
            The equals.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Results.Position.GetHashCode">
            <summary>
            The get hash code.
            </summary>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Results.ResultMessageType">
            <summary>
            The result message type.
            </summary>
        </member>
        <member name="F:ConnectQl.Results.ResultMessageType.Information">
            <summary>
            The information.
            </summary>
        </member>
        <member name="F:ConnectQl.Results.ResultMessageType.Warning">
            <summary>
            The warning.
            </summary>
        </member>
        <member name="F:ConnectQl.Results.ResultMessageType.Error">
            <summary>
            The error.
            </summary>
        </member>
        <member name="T:ConnectQl.Results.Row">
            <summary>
            The row.
            </summary>
        </member>
        <member name="F:ConnectQl.Results.Row.RowCreateMethod">
            <summary>
            The <see cref="M:ConnectQl.Results.Row.Create``1(ConnectQl.Internal.Results.IRowFieldResolver,``0,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})"/> method.
            </summary>
        </member>
        <member name="F:ConnectQl.Results.Row.values">
            <summary>
            The values.
            </summary>
        </member>
        <member name="M:ConnectQl.Results.Row.#ctor(ConnectQl.Internal.Results.IRowFieldResolver,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Results.Row"/> class.
            </summary>
            <param name="resolver">
            The resolver.
            </param>
            <param name="values">
            The values.
            </param>
        </member>
        <member name="M:ConnectQl.Results.Row.#ctor(ConnectQl.Internal.Results.IRowFieldResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Results.Row"/> class.
            </summary>
            <param name="resolver">
            The resolver.
            </param>
        </member>
        <member name="T:ConnectQl.Results.Row.IRowImplementation">
            <summary>
            The row implementation.
            </summary>
        </member>
        <member name="M:ConnectQl.Results.Row.IRowImplementation.CombineFrom``1(ConnectQl.Interfaces.IRowBuilder,ConnectQl.Results.Row.RowImplementation{``0})">
            <summary>
            Joins the other row to the current row.
            </summary>
            <typeparam name="TOther">
            The type of the other row's unique id.
            </typeparam>
            <param name="rowBuilder">
            The row Builder.
            </param>
            <param name="other">
            The other row.
            </param>
            <returns>
            The joined row, or null when the rows cannot be joined.
            </returns>
        </member>
        <member name="P:ConnectQl.Results.Row.ColumnNames">
            <summary>
            Gets the column names.
            </summary>
        </member>
        <member name="P:ConnectQl.Results.Row.UniqueId">
            <summary>
            Gets the unique id of the row.
            </summary>
        </member>
        <member name="P:ConnectQl.Results.Row.Resolver">
            <summary>
            Gets the field resolver.
            </summary>
        </member>
        <member name="P:ConnectQl.Results.Row.Values">
            <summary>
            Gets the values for debugging purposes.
            </summary>
        </member>
        <member name="P:ConnectQl.Results.Row.Item(System.String)">
            <summary>
            Gets or sets the values for the specified field name.
            </summary>
            <param name="field">
            The field name.
            </param>
            <returns>
            The value for the field, or null if the field is not in the row.
            </returns>
        </member>
        <member name="M:ConnectQl.Results.Row.ToDictionary">
            <summary>
            Converts the row to a dictionary.
            </summary>
            <returns>
            A dictionary containing all fields and their values.
            </returns>
        </member>
        <member name="M:ConnectQl.Results.Row.ConnectQl#Results#Row#IRowImplementation#CombineFrom``1(ConnectQl.Interfaces.IRowBuilder,ConnectQl.Results.Row.RowImplementation{``0})">
            <summary>
            Joins the other row to the current row.
            </summary>
            <typeparam name="TOther">
            The type of the other row's unique id.
            </typeparam>
            <param name="rowBuilder">
            The row Builder.
            </param>
            <param name="other">
            The other row.
            </param>
            <returns>
            The joined row, or null when the rows cannot be joined.
            </returns>
        </member>
        <member name="M:ConnectQl.Results.Row.Create``1(ConnectQl.Internal.Results.IRowFieldResolver,``0,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Creates a row.
            </summary>
            <typeparam name="T">
            The type of the unique identifier.
            </typeparam>
            <param name="fieldResolver">
            The data Set.
            </param>
            <param name="uniqueId">
            The unique identifier.
            </param>
            <param name="values">
            The values.
            </param>
            <returns>
            The row.
            </returns>
        </member>
        <member name="M:ConnectQl.Results.Row.Clone(ConnectQl.Interfaces.IRowBuilder)">
            <summary>
            Clones the row in the specified row builder.
            </summary>
            <param name="rowBuilder">
            The builder to clone the row into.
            </param>
            <returns>
            The cloned row.
            </returns>
        </member>
        <member name="M:ConnectQl.Results.Row.CombineWith(ConnectQl.Interfaces.IRowBuilder,ConnectQl.Results.Row)">
            <summary>
            Joins the row with this row and returns the result as new row.
            </summary>
            <param name="set">
            The set.
            </param>
            <param name="row">
            The row to join this row with.
            </param>
            <returns>
            A new <see cref="T:ConnectQl.Results.Row"/> containing fields for both the left row and the right row, or null if he join was an inner
                join
                and <paramref name="row"/> was null.
            </returns>
        </member>
        <member name="M:ConnectQl.Results.Row.Get``1(System.String)">
            <summary>
            Gets the value for the specified field name.
            </summary>
            <param name="name">
            The name of the field to get the value for.
            </param>
            <typeparam name="T">
            The type of the value to get.
            </typeparam>
            <returns>
            The value or <c>default(T)</c> if a field is not in the row.
            </returns>
        </member>
        <member name="M:ConnectQl.Results.Row.GetByInternalName``1(System.String)">
            <summary>
            Gets the value for the specified field's internal name.
            </summary>
            <param name="internalName">
            The internal name of the field to get the value for.
            </param>
            <typeparam name="T">
            The type of the value to get.
            </typeparam>
            <returns>
            The value or <c>default(T)</c> if a field is not in the row.
            </returns>
        </member>
        <member name="M:ConnectQl.Results.Row.CombineFrom``1(ConnectQl.Interfaces.IRowBuilder,ConnectQl.Results.Row.RowImplementation{``0})">
            <summary>
            When implemented in a derived class, joins the other row to the current row.
            </summary>
            <typeparam name="TOther">
            The type of the other row's unique id.
            </typeparam>
            <param name="rowBuilder">
            The row Builder.
            </param>
            <param name="other">
            The other row.
            </param>
            <returns>
            The joined row, or null when the rows cannot be joined.
            </returns>
        </member>
        <member name="M:ConnectQl.Results.Row.GetByIndex``1(System.Nullable{System.Int32})">
            <summary>
            Gets a value by index.
            </summary>
            <param name="index">
            The index.
            </param>
            <typeparam name="T">
            The type of the value.
            </typeparam>
            <returns>
            The <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Results.Row.RowImplementation`1">
            <summary>
            The row implementation.
            </summary>
            <typeparam name="T">
            The type of the unique id.
            </typeparam>
        </member>
        <member name="M:ConnectQl.Results.Row.RowImplementation`1.#ctor(ConnectQl.Internal.Results.IRowFieldResolver,`0,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:ConnectQl.Results.Row.RowImplementation`1"/> class.
            </summary>
            <param name="resolver">
            The field resolver.
            </param>
            <param name="id">
            The unique id.
            </param>
            <param name="values">
            The values.
            </param>
        </member>
        <member name="P:ConnectQl.Results.Row.RowImplementation`1.UniqueId">
            <summary>
            Gets the unique id for the row.
            </summary>
        </member>
        <member name="P:ConnectQl.Results.Row.RowImplementation`1.Id">
            <summary>
            Gets the unique id.
            </summary>
        </member>
        <member name="P:ConnectQl.Results.Row.RowImplementation`1.ValuesAsString">
            <summary>
            Gets the string representation of the values.
            </summary>
        </member>
        <member name="M:ConnectQl.Results.Row.RowImplementation`1.ToString">
            <summary>
            The to string.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Results.Row.RowImplementation`1.Clone(ConnectQl.Interfaces.IRowBuilder)">
            <summary>
            Clones the row in the specified row builder.
            </summary>
            <param name="rowBuilder">
            The builder to clone the row into.
            </param>
            <returns>
            The cloned row.
            </returns>
        </member>
        <member name="M:ConnectQl.Results.Row.RowImplementation`1.CombineWith(ConnectQl.Interfaces.IRowBuilder,ConnectQl.Results.Row)">
            <summary>
            Joins the current row with the other row.
            </summary>
            <param name="rowBuilder">
            The row Builder.
            </param>
            <param name="row">
            The row to join.
            </param>
            <returns>
            The joined row, or null if <paramref name="row"/> is null and this is an inner join.
            </returns>
        </member>
        <member name="M:ConnectQl.Results.Row.RowImplementation`1.CombineFrom``1(ConnectQl.Interfaces.IRowBuilder,ConnectQl.Results.Row.RowImplementation{``0})">
            <summary>
            Joins the other row to the current row.
            </summary>
            <typeparam name="TOther">
            The type of the other row's unique id.
            </typeparam>
            <param name="builder">
            The builder.
            </param>
            <param name="other">
            The other row.
            </param>
            <returns>
            The joined row, or null when the rows cannot be joined.
            </returns>
        </member>
        <member name="T:ConnectQl.Results.Row.RowImplementation`1.IdCombiner`2">
            <summary>
            The id combiner.
            </summary>
            <typeparam name="TFirst">
            The type of the first unique id.
            </typeparam>
            <typeparam name="TSecond">
            The type of the second unique id.
            </typeparam>
        </member>
        <member name="F:ConnectQl.Results.Row.RowImplementation`1.IdCombiner`2.Combine">
            <summary>
            The combine.
            </summary>
        </member>
        <member name="M:ConnectQl.Results.Row.RowImplementation`1.IdCombiner`2.CreateCombine">
            <summary>
            Creates the function that combines two rows into the new <see cref="T:ConnectQl.Interfaces.IRowBuilder"/> for the combination of types.
            </summary>
            <returns>
            The combine function.
            </returns>
        </member>
        <member name="M:ConnectQl.Results.Row.RowImplementation`1.IdCombiner`2.GetTupleArguments(System.Linq.Expressions.Expression)">
            <summary>
            Gets the generic type arguments from the parameter.
            </summary>
            <param name="parameter">
            The parameter.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Results.Row.RowImplementation`1.IdCombiner`2.NewTuple(System.Collections.Generic.ICollection{System.Linq.Expressions.Expression})">
            <summary>
            Creates a constructor call from the passed in expressions.
            </summary>
            <param name="expressions">
            The expressions.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="T:ConnectQl.Results.RowSerializer">
            <summary>
            The row serializer.
            </summary>
        </member>
        <member name="M:ConnectQl.Results.RowSerializer.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ConnectQl.Results.RowSerializer"/> class from being created.
            </summary>
        </member>
        <member name="P:ConnectQl.Results.RowSerializer.Default">
            <summary>
            Gets the default row serializer.
            </summary>
        </member>
        <member name="P:ConnectQl.Results.RowSerializer.TargetType">
            <summary>
                Gets the target type values will be transformed to.
            </summary>
        </member>
        <member name="M:ConnectQl.Results.RowSerializer.CreateContext">
            <summary>
                Creates a transformation context.
                This context will be used in all calls to Serialize and Deserialize.
            </summary>
            <returns>
                The context that will be disposed when the transformation is no longer needed.
            </returns>
        </member>
        <member name="M:ConnectQl.Results.RowSerializer.Deserialize(System.IDisposable,System.Object)">
            <summary>
                Transforms a serializable object to a value.
            </summary>
            <param name="context">
                The context in which this serializable object is transformed.
            </param>
            <param name="value">
                The serializable object to transform.
            </param>
            <returns>
                The value.
            </returns>
        </member>
        <member name="M:ConnectQl.Results.RowSerializer.Serialize(System.IDisposable,ConnectQl.Results.Row)">
            <summary>
                Transforms the value to the serializable object.
            </summary>
            <param name="context">
                The context in which this value is transformed.
            </param>
            <param name="value">
                The value to transform.
            </param>
            <returns>
                A serializable version of the value.
            </returns>
        </member>
        <member name="T:ConnectQl.Results.RowSerializer.SerializableRow">
            <summary>
            The serializable row.
            </summary>
        </member>
        <member name="P:ConnectQl.Results.RowSerializer.SerializableRow.BuilderId">
            <summary>
            Gets or sets the builder id.
            </summary>
        </member>
        <member name="P:ConnectQl.Results.RowSerializer.SerializableRow.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:ConnectQl.Results.RowSerializer.SerializableRow.Values">
            <summary>
            Gets or sets the values.
            </summary>
        </member>
        <member name="T:ConnectQl.Results.RowSerializer.SerializerContext">
            <summary>
            The serializer context.
            </summary>
        </member>
        <member name="F:ConnectQl.Results.RowSerializer.SerializerContext.resolversById">
            <summary>
            The resolvers by id.
            </summary>
        </member>
        <member name="F:ConnectQl.Results.RowSerializer.SerializerContext.idsByResolver">
            <summary>
            The ids by resolver.
            </summary>
        </member>
        <member name="F:ConnectQl.Results.RowSerializer.SerializerContext.currentId">
            <summary>
            The current id.
            </summary>
        </member>
        <member name="M:ConnectQl.Results.RowSerializer.SerializerContext.Dispose">
            <summary>
            Disposes the context.
            </summary>
        </member>
        <member name="M:ConnectQl.Results.RowSerializer.SerializerContext.GetResolver(System.Int32)">
            <summary>
            Gets the resolver by id.
            </summary>
            <param name="id">
            The id.
            </param>
            <returns>
            The <see cref="T:ConnectQl.Internal.Results.IRowFieldResolver"/>.
            </returns>
        </member>
        <member name="M:ConnectQl.Results.RowSerializer.SerializerContext.GetResolverId(ConnectQl.Internal.Results.IRowFieldResolver)">
            <summary>
            Gets the id for a resolver.
            </summary>
            <param name="resolver">
            The resolver.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:System.Collections.Generic.EnumerableExtensions">
            <summary>
            The enumerable extensions.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.ActionIfEmpty``1(System.Collections.Generic.IEnumerable{``0},System.Action)">
            <summary>
            Returns the same enumerable, but executes an action if the enumerable is empty.
            </summary>
            <typeparam name="T">
            The type of the elements in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </typeparam>
            <param name="source">
            The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </param>
            <param name="isEmpty">
            The action to call when the enumerable is empty.
            </param>
            <returns>
            An enumerable with the same elements as <paramref name="source"/>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtensions.AggregateAsync``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Aggregates an enumerable asynchronously.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="start">
            The start.
            </param>
            <param name="aggregate">
            The aggregate.
            </param>
            <typeparam name="TElement">
            The type of the elements.
            </typeparam>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="T:System.Linq.Expressions.ExpressionExtensions">
            <summary>
            The expression extensions.
            </summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionExtensions.EqualsMethod">
            <summary>
            The <see cref="M:System.Object.Equals(System.Object,System.Object)"/> method.
            </summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionExtensions.ErrorConstructor">
            <summary>
            The <see cref="T:ConnectQl.Results.Error"/> constructor.
            </summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionExtensions.ExpressionComparer">
            <summary>
            The expression comparer.
            </summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionExtensions.TaskUnwrapMethod">
            <summary>
            The task unwrap method.
            </summary>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.CatchErrors(System.Linq.Expressions.Expression)">
            <summary>
            The catch errors.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.Eval(System.Linq.Expressions.Expression)">
            <summary>
            Evaluates the expression.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.EvalExpression(System.Linq.Expressions.Expression)">
            <summary>
            Evaluates the expression and returns it as a constant expression.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.EvaluateAsValue(System.Linq.Expressions.Expression)">
            <summary>
            Tries to evaluate the expression if it is a constant. If an error occurs, returns an <see cref="T:ConnectQl.Results.Error"/> object.
            </summary>
            <param name="expression">
            The expression to evaluate.
            </param>
            <returns>
            When the expression contains field references or context references, the original expression, otherwise the result
                of the evaluation or an <see cref="T:ConnectQl.Results.Error"/> object.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.Except(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
            <summary>
            Returns the expression without the expressions to remove.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <param name="expressionsToRemove">
            The expressions to remove.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.FilterByAliases(System.Linq.Expressions.Expression,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Leaves only filter parts that contain aliases specified in <paramref name="sources"/>.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="sources">
            The sources.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.GetFields(System.Linq.Expressions.Expression)">
            <summary>
            The get fields.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <returns>
            The <see cref="T:System.Collections.IEnumerable"/>.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.GetFieldsFromSource(System.Linq.Expressions.Expression,System.String)">
            <summary>
            Gets the fields of the <paramref name="source"/> that are used in the expression.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <param name="source">
            The source.
            </param>
            <returns>
            An enumerable of fields that were used.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.GetGroupValues(System.Collections.Generic.IEnumerable{ConnectQl.Results.Row},System.String)">
            <summary>
            Gets the values for the specified field from a group.
            </summary>
            <param name="rows">
            The rows to get the values from.
            </param>
            <param name="field">
            The field to get.
            </param>
            <returns>
            The values of the fields in the specified rows.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.GetRowExpression``1(System.Linq.Expressions.Expression)">
            <summary>
            Creates a function that converts a row into a value.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <typeparam name="TParam">
            The type of the argument the lambda will have.
            </typeparam>
            <returns>
            A function that takes a row and returns the value for the expression.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.GetRowFilter(System.Linq.Expressions.Expression)">
            <summary>
            Creates a function that filters the rows based on a query.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <returns>
            A function that takes a row and returns true when a row should be in the result.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.ReplaceParameter``1(``0,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Replaces the parameter in the specified expression.
            </summary>
            <param name="haystack">
            The expression in which to look for the <paramref name="needle"/>.
            </param>
            <param name="needle">
            The parameter expression to replace.
            </param>
            <param name="replace">
            The expression to replace the parameter with.
            </param>
            <typeparam name="TExpression">
            The type of the expression.
            </typeparam>
            <returns>
            The <typeparamref name="TExpression"/>.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.ReplaceParameters``1(``0,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Replaces the parameters in the specified expression.
            </summary>
            <param name="haystack">
            The expression in which to look for the <paramref name="needles"/>.
            </param>
            <param name="needles">
            The parameter expressions to replace.
            </param>
            <param name="replaces">
            The expressions to replace the parameters with.
            </param>
            <typeparam name="TExpression">
            The type of the expression.
            </typeparam>
            <returns>
            The <typeparamref name="TExpression"/>.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.RewriteTasksToAsyncExpression(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Rewrites <see cref="T:ConnectQl.Expressions.TaskExpression"/>s to an async expression (if needed).           a.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.RewriteTasksToAsyncExpression(System.Linq.Expressions.Expression)">
            <summary>
            Rewrites <see cref="T:ConnectQl.Expressions.TaskExpression"/>s to an async expression (if needed).
            </summary>
            <param name="expression">
            The expression.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.Simplify(System.Linq.Expressions.Expression,ConnectQl.Interfaces.IExecutionContext)">
            <summary>
            Evaluates all variables and function calls on constants.
            </summary>
            <param name="source">
            The source expression.
            </param>
            <param name="context">
            The execution context.
            </param>
            <returns>
            The simplified expression.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.SimplifyExpression(System.Linq.Expressions.Expression,ConnectQl.Interfaces.IExecutionContext)">
            <summary>
            Evaluates all variables and function calls on constants.
            </summary>
            <param name="source">
            The source expression.
            </param>
            <param name="context">
            The execution context.
            </param>
            <returns>
            The simplified expression.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.SimplifyRanges(System.Linq.Expressions.Expression)">
            <summary>
            Evaluates all variables and function calls on constants.
            </summary>
            <param name="source">
            The source expression.
            </param>
            <returns>
            The simplified expression.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.SplitByAndExpressions(System.Linq.Expressions.Expression)">
            <summary>
            Splits an expression into multiple expression by And/AndAlsoexpressions.
            </summary>
            <param name="expression">
            The expression to split.
            </param>
            <returns>
            An enumerable of expressions that represent the different parts of the or-expression.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.SplitByOrExpressions(System.Linq.Expressions.Expression)">
            <summary>
            Splits an expression into multiple expression by Or/OrElse expressions.
                When or-expressions are nested inise , they are moved up the expression tree.
            </summary>
            <param name="expression">
            The expression to split.
            </param>
            <returns>
            An enumerable of expressions that represent the different parts of the or-expression.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.ToRangedExpressionAsync(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},ConnectQl.AsyncEnumerables.IAsyncReadOnlyCollection{ConnectQl.Results.Row},System.Collections.Generic.HashSet{System.String})">
            <summary>
            Replaces all fields in the <paramref name="expressions"/> with the ranges for the fields found in
                <paramref name="rows"/>.
                Leaves all fields of <paramref name="ignoreAliases"/> intact.
            </summary>
            <param name="expressions">
            The expressions.
            </param>
            <param name="rows">
            The rows.
            </param>
            <param name="ignoreAliases">
            Aliases to ignore.
            </param>
            <returns>
            An array of <see cref="T:System.Linq.Expressions.Expression"/>s.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.ReplaceFieldsWithValues(System.Linq.Expressions.Expression,System.Collections.Generic.IList{ConnectQl.Internal.Expressions.SourceFieldExpression},System.Collections.Generic.IList{System.Object})">
            <summary>
            Replaces fields with the specified values.
            </summary>
            <param name="expression">
            The expression to replace the fields in.
            </param>
            <param name="fields">
            The fields to replace.
            </param>
            <param name="values">
            The values to replcae the fields with.
            </param>
            <returns>
            A new expression containing the values instead of the fields.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.ContainsField(System.Linq.Expressions.Expression,ConnectQl.Internal.DataSources.DataSource)">
            <summary>
            Checks if the expression contains the specified field.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <param name="source">
            Optional. The source the field should be in.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.InvertComparison(System.Linq.Expressions.ExpressionType)">
            <summary>
            Inverts a comparison operator, so the operands of the compare can be switched.
            </summary>
            <param name="comparisonType">
            The comparison type.
            </param>
            <returns>
            The inverted comparison type, or <c>null</c> if this is not a valid comparison.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.BuildRangeExpression(System.Linq.Expressions.Expression,System.Collections.Generic.List{System.Collections.Generic.List{System.Linq.Expressions.ConstantExpression}})">
            <summary>
            The build range expression.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <param name="subExpressionPermutations">
            The sub expression permutations.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.ContainsRangeButIsNoRange(System.Linq.Expressions.Expression)">
            <summary>
            Checks if the expression contains (and not is) a range expression.
            </summary>
            <param name="expression">
            The expression to check for range expression.
            </param>
            <returns>
            <c>true</c> if <paramref name="expression"/> contains a range expression, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.MoveFieldsToTheLeft(System.Linq.Expressions.Expression)">
            <summary>
            Moves field expressions in comparisons to the left.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.MoveRangesUp(System.Linq.Expressions.Expression)">
            <summary>
            Takes all the ranges in the expression and tries to combine and simplify them as much as possible.
            </summary>
            <param name="expression">
            The expression to simplify.
            </param>
            <returns>
            The simplified expression.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.MoveUpRange(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
            <summary>
            Tries to move up the range expression. When an expression has exactly one subexpression that is a range,
                and none of the field expressions are field expressions, then we can create a range expression from the results of
                the expression with the minimum and maximum value of the range parameter.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <param name="subExpressions">
            The sub expressions.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
    </members>
</doc>
